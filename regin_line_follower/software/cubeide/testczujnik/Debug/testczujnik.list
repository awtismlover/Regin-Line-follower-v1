
testczujnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800a2b0  0800a2b0  0000b2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a78c  0800a78c  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a78c  0800a78c  0000b78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a794  0800a794  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a794  0800a794  0000b794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a798  0800a798  0000b798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a79c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  200001d8  0800a974  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  0800a974  0000c68c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144a2  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9d  00000000  00000000  000206aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00023548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4a  00000000  00000000  000247b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000389d  00000000  00000000  00025602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c17  00000000  00000000  00028e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8282  00000000  00000000  0003fab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eec  00000000  00000000  00107d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a294 	.word	0x0800a294

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800a294 	.word	0x0800a294

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2iz>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d215      	bcs.n	8000bd2 <__aeabi_d2iz+0x36>
 8000ba6:	d511      	bpl.n	8000bcc <__aeabi_d2iz+0x30>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d912      	bls.n	8000bd8 <__aeabi_d2iz+0x3c>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	4770      	bx	lr
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd6:	d105      	bne.n	8000be4 <__aeabi_d2iz+0x48>
 8000bd8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	bf08      	it	eq
 8000bde:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_d2uiz>:
 8000bec:	004a      	lsls	r2, r1, #1
 8000bee:	d211      	bcs.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf4:	d211      	bcs.n	8000c1a <__aeabi_d2uiz+0x2e>
 8000bf6:	d50d      	bpl.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d40e      	bmi.n	8000c20 <__aeabi_d2uiz+0x34>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1e:	d102      	bne.n	8000c26 <__aeabi_d2uiz+0x3a>
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	4770      	bx	lr
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_d2f>:
 8000c2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c34:	bf24      	itt	cs
 8000c36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3e:	d90d      	bls.n	8000c5c <__aeabi_d2f+0x30>
 8000c40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c54:	bf08      	it	eq
 8000c56:	f020 0001 	biceq.w	r0, r0, #1
 8000c5a:	4770      	bx	lr
 8000c5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c60:	d121      	bne.n	8000ca6 <__aeabi_d2f+0x7a>
 8000c62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c66:	bfbc      	itt	lt
 8000c68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	4770      	bxlt	lr
 8000c6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c76:	f1c2 0218 	rsb	r2, r2, #24
 8000c7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c82:	fa20 f002 	lsr.w	r0, r0, r2
 8000c86:	bf18      	it	ne
 8000c88:	f040 0001 	orrne.w	r0, r0, #1
 8000c8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c98:	ea40 000c 	orr.w	r0, r0, ip
 8000c9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca4:	e7cc      	b.n	8000c40 <__aeabi_d2f+0x14>
 8000ca6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000caa:	d107      	bne.n	8000cbc <__aeabi_d2f+0x90>
 8000cac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cba:	4770      	bxne	lr
 8000cbc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <__aeabi_uldivmod>:
 8000ccc:	b953      	cbnz	r3, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cce:	b94a      	cbnz	r2, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	bf08      	it	eq
 8000cd4:	2800      	cmpeq	r0, #0
 8000cd6:	bf1c      	itt	ne
 8000cd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce0:	f000 b9a0 	b.w	8001024 <__aeabi_idiv0>
 8000ce4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cec:	f000 f83c 	bl	8000d68 <__udivmoddi4>
 8000cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_d2lz>:
 8000cfc:	b538      	push	{r3, r4, r5, lr}
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2300      	movs	r3, #0
 8000d02:	4604      	mov	r4, r0
 8000d04:	460d      	mov	r5, r1
 8000d06:	f7ff ff21 	bl	8000b4c <__aeabi_dcmplt>
 8000d0a:	b928      	cbnz	r0, 8000d18 <__aeabi_d2lz+0x1c>
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d14:	f000 b80a 	b.w	8000d2c <__aeabi_d2ulz>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1e:	f000 f805 	bl	8000d2c <__aeabi_d2ulz>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	bd38      	pop	{r3, r4, r5, pc}
 8000d2a:	bf00      	nop

08000d2c <__aeabi_d2ulz>:
 8000d2c:	b5d0      	push	{r4, r6, r7, lr}
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <__aeabi_d2ulz+0x34>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	4606      	mov	r6, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	f7ff fc97 	bl	8000668 <__aeabi_dmul>
 8000d3a:	f7ff ff57 	bl	8000bec <__aeabi_d2uiz>
 8000d3e:	4604      	mov	r4, r0
 8000d40:	f7ff fc18 	bl	8000574 <__aeabi_ui2d>
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <__aeabi_d2ulz+0x38>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f7ff fc8e 	bl	8000668 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4630      	mov	r0, r6
 8000d52:	4639      	mov	r1, r7
 8000d54:	f7ff fad0 	bl	80002f8 <__aeabi_dsub>
 8000d58:	f7ff ff48 	bl	8000bec <__aeabi_d2uiz>
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d60:	3df00000 	.word	0x3df00000
 8000d64:	41f00000 	.word	0x41f00000

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9d08      	ldr	r5, [sp, #32]
 8000d6e:	460c      	mov	r4, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14e      	bne.n	8000e12 <__udivmoddi4+0xaa>
 8000d74:	4694      	mov	ip, r2
 8000d76:	458c      	cmp	ip, r1
 8000d78:	4686      	mov	lr, r0
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	d962      	bls.n	8000e46 <__udivmoddi4+0xde>
 8000d80:	b14a      	cbz	r2, 8000d96 <__udivmoddi4+0x2e>
 8000d82:	f1c2 0320 	rsb	r3, r2, #32
 8000d86:	4091      	lsls	r1, r2
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	4319      	orrs	r1, r3
 8000d92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f f68c 	uxth.w	r6, ip
 8000d9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000da2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da6:	fb07 1114 	mls	r1, r7, r4, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb04 f106 	mul.w	r1, r4, r6
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x64>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dbe:	f080 8112 	bcs.w	8000fe6 <__udivmoddi4+0x27e>
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	f240 810f 	bls.w	8000fe6 <__udivmoddi4+0x27e>
 8000dc8:	3c02      	subs	r4, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	fa1f f38e 	uxth.w	r3, lr
 8000dd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f606 	mul.w	r6, r0, r6
 8000de2:	429e      	cmp	r6, r3
 8000de4:	d90a      	bls.n	8000dfc <__udivmoddi4+0x94>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dee:	f080 80fc 	bcs.w	8000fea <__udivmoddi4+0x282>
 8000df2:	429e      	cmp	r6, r3
 8000df4:	f240 80f9 	bls.w	8000fea <__udivmoddi4+0x282>
 8000df8:	4463      	add	r3, ip
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e02:	2100      	movs	r1, #0
 8000e04:	b11d      	cbz	r5, 8000e0e <__udivmoddi4+0xa6>
 8000e06:	40d3      	lsrs	r3, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d905      	bls.n	8000e22 <__udivmoddi4+0xba>
 8000e16:	b10d      	cbz	r5, 8000e1c <__udivmoddi4+0xb4>
 8000e18:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e7f5      	b.n	8000e0e <__udivmoddi4+0xa6>
 8000e22:	fab3 f183 	clz	r1, r3
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d146      	bne.n	8000eb8 <__udivmoddi4+0x150>
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xcc>
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	f0c0 80f0 	bcc.w	8001014 <__udivmoddi4+0x2ac>
 8000e34:	1a86      	subs	r6, r0, r2
 8000e36:	eb64 0303 	sbc.w	r3, r4, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d0e6      	beq.n	8000e0e <__udivmoddi4+0xa6>
 8000e40:	e9c5 6300 	strd	r6, r3, [r5]
 8000e44:	e7e3      	b.n	8000e0e <__udivmoddi4+0xa6>
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	f040 8090 	bne.w	8000f6c <__udivmoddi4+0x204>
 8000e4c:	eba1 040c 	sub.w	r4, r1, ip
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa1f f78c 	uxth.w	r7, ip
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e62:	fb08 4416 	mls	r4, r8, r6, r4
 8000e66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e6a:	fb07 f006 	mul.w	r0, r7, r6
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x11c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x11a>
 8000e7c:	4298      	cmp	r0, r3
 8000e7e:	f200 80cd 	bhi.w	800101c <__udivmoddi4+0x2b4>
 8000e82:	4626      	mov	r6, r4
 8000e84:	1a1c      	subs	r4, r3, r0
 8000e86:	fa1f f38e 	uxth.w	r3, lr
 8000e8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb00 f707 	mul.w	r7, r0, r7
 8000e9a:	429f      	cmp	r7, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x148>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x146>
 8000ea8:	429f      	cmp	r7, r3
 8000eaa:	f200 80b0 	bhi.w	800100e <__udivmoddi4+0x2a6>
 8000eae:	4620      	mov	r0, r4
 8000eb0:	1bdb      	subs	r3, r3, r7
 8000eb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0x9c>
 8000eb8:	f1c1 0620 	rsb	r6, r1, #32
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ecc:	ea43 030c 	orr.w	r3, r3, ip
 8000ed0:	40f4      	lsrs	r4, r6
 8000ed2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed6:	0c38      	lsrs	r0, r7, #16
 8000ed8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000edc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ee0:	fa1f fc87 	uxth.w	ip, r7
 8000ee4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eec:	fb0e f90c 	mul.w	r9, lr, ip
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	d90a      	bls.n	8000f0e <__udivmoddi4+0x1a6>
 8000ef8:	193c      	adds	r4, r7, r4
 8000efa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efe:	f080 8084 	bcs.w	800100a <__udivmoddi4+0x2a2>
 8000f02:	45a1      	cmp	r9, r4
 8000f04:	f240 8081 	bls.w	800100a <__udivmoddi4+0x2a2>
 8000f08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f0c:	443c      	add	r4, r7
 8000f0e:	eba4 0409 	sub.w	r4, r4, r9
 8000f12:	fa1f f983 	uxth.w	r9, r3
 8000f16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f26:	45a4      	cmp	ip, r4
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x1d2>
 8000f2a:	193c      	adds	r4, r7, r4
 8000f2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f30:	d267      	bcs.n	8001002 <__udivmoddi4+0x29a>
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d965      	bls.n	8001002 <__udivmoddi4+0x29a>
 8000f36:	3b02      	subs	r3, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f42:	eba4 040c 	sub.w	r4, r4, ip
 8000f46:	429c      	cmp	r4, r3
 8000f48:	46ce      	mov	lr, r9
 8000f4a:	469c      	mov	ip, r3
 8000f4c:	d351      	bcc.n	8000ff2 <__udivmoddi4+0x28a>
 8000f4e:	d04e      	beq.n	8000fee <__udivmoddi4+0x286>
 8000f50:	b155      	cbz	r5, 8000f68 <__udivmoddi4+0x200>
 8000f52:	ebb8 030e 	subs.w	r3, r8, lr
 8000f56:	eb64 040c 	sbc.w	r4, r4, ip
 8000f5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5e:	40cb      	lsrs	r3, r1
 8000f60:	431e      	orrs	r6, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	e9c5 6400 	strd	r6, r4, [r5]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	e750      	b.n	8000e0e <__udivmoddi4+0xa6>
 8000f6c:	f1c2 0320 	rsb	r3, r2, #32
 8000f70:	fa20 f103 	lsr.w	r1, r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa24 f303 	lsr.w	r3, r4, r3
 8000f7c:	4094      	lsls	r4, r2
 8000f7e:	430c      	orrs	r4, r1
 8000f80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f88:	fa1f f78c 	uxth.w	r7, ip
 8000f8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f90:	fb08 3110 	mls	r1, r8, r0, r3
 8000f94:	0c23      	lsrs	r3, r4, #16
 8000f96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f9a:	fb00 f107 	mul.w	r1, r0, r7
 8000f9e:	4299      	cmp	r1, r3
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x24c>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000faa:	d22c      	bcs.n	8001006 <__udivmoddi4+0x29e>
 8000fac:	4299      	cmp	r1, r3
 8000fae:	d92a      	bls.n	8001006 <__udivmoddi4+0x29e>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1a5b      	subs	r3, r3, r1
 8000fb6:	b2a4      	uxth	r4, r4
 8000fb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fbc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc4:	fb01 f307 	mul.w	r3, r1, r7
 8000fc8:	42a3      	cmp	r3, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x276>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd4:	d213      	bcs.n	8000ffe <__udivmoddi4+0x296>
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	d911      	bls.n	8000ffe <__udivmoddi4+0x296>
 8000fda:	3902      	subs	r1, #2
 8000fdc:	4464      	add	r4, ip
 8000fde:	1ae4      	subs	r4, r4, r3
 8000fe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe4:	e739      	b.n	8000e5a <__udivmoddi4+0xf2>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	e6f0      	b.n	8000dcc <__udivmoddi4+0x64>
 8000fea:	4608      	mov	r0, r1
 8000fec:	e706      	b.n	8000dfc <__udivmoddi4+0x94>
 8000fee:	45c8      	cmp	r8, r9
 8000ff0:	d2ae      	bcs.n	8000f50 <__udivmoddi4+0x1e8>
 8000ff2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ffa:	3801      	subs	r0, #1
 8000ffc:	e7a8      	b.n	8000f50 <__udivmoddi4+0x1e8>
 8000ffe:	4631      	mov	r1, r6
 8001000:	e7ed      	b.n	8000fde <__udivmoddi4+0x276>
 8001002:	4603      	mov	r3, r0
 8001004:	e799      	b.n	8000f3a <__udivmoddi4+0x1d2>
 8001006:	4630      	mov	r0, r6
 8001008:	e7d4      	b.n	8000fb4 <__udivmoddi4+0x24c>
 800100a:	46d6      	mov	lr, sl
 800100c:	e77f      	b.n	8000f0e <__udivmoddi4+0x1a6>
 800100e:	4463      	add	r3, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e74d      	b.n	8000eb0 <__udivmoddi4+0x148>
 8001014:	4606      	mov	r6, r0
 8001016:	4623      	mov	r3, r4
 8001018:	4608      	mov	r0, r1
 800101a:	e70f      	b.n	8000e3c <__udivmoddi4+0xd4>
 800101c:	3e02      	subs	r6, #2
 800101e:	4463      	add	r3, ip
 8001020:	e730      	b.n	8000e84 <__udivmoddi4+0x11c>
 8001022:	bf00      	nop

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	425a      	negs	r2, r3
 800103c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001040:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001044:	bf58      	it	pl
 8001046:	4253      	negpl	r3, r2
 8001048:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	b29a      	uxth	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	885b      	ldrh	r3, [r3, #2]
 8001052:	429a      	cmp	r2, r3
 8001054:	d101      	bne.n	800105a <RB_Write+0x32>
	{
		return RB_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00b      	b.n	8001072 <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	78fa      	ldrb	r2, [r7, #3]
 8001066:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	885b      	ldrh	r3, [r3, #2]
 8001090:	429a      	cmp	r2, r3
 8001092:	d101      	bne.n	8001098 <RB_Read+0x1a>
	{
		return RB_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e015      	b.n	80010c4 <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	885b      	ldrh	r3, [r3, #2]
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	791a      	ldrb	r2, [r3, #4]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	885b      	ldrh	r3, [r3, #2]
 80010ac:	3301      	adds	r3, #1
 80010ae:	425a      	negs	r2, r3
 80010b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010b4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80010b8:	bf58      	it	pl
 80010ba:	4253      	negpl	r3, r2
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <Parser_TakeLine>:
#include "SimpleParser.h"
#include "Line_Follower.h"


void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 80010de:	f107 030e 	add.w	r3, r7, #14
 80010e2:	4619      	mov	r1, r3
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ffca 	bl	800107e <RB_Read>

		if(Tmp == ENDLINE)
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	2b0a      	cmp	r3, #10
 80010ee:	d105      	bne.n	80010fc <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e004      	b.n	8001106 <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	7bba      	ldrb	r2, [r7, #14]
 8001104:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	2b0a      	cmp	r3, #10
 8001110:	d1e5      	bne.n	80010de <Parser_TakeLine+0xe>

}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001124:	490f      	ldr	r1, [pc, #60]	@ (8001164 <kp_change+0x48>)
 8001126:	2000      	movs	r0, #0
 8001128:	f007 f98e 	bl	8008448 <strtok>
 800112c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d011      	beq.n	800115a <kp_change+0x3e>
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff f87c 	bl	8000234 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	2b1f      	cmp	r3, #31
 8001140:	d80b      	bhi.n	800115a <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f006 fa4c 	bl	80075e0 <atof>
 8001148:	ec53 2b10 	vmov	r2, r3, d0
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd6c 	bl	8000c2c <__aeabi_d2f>
 8001154:	4602      	mov	r2, r0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
	}

}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	0800a2b0 	.word	0x0800a2b0

08001168 <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001170:	490f      	ldr	r1, [pc, #60]	@ (80011b0 <kd_change+0x48>)
 8001172:	2000      	movs	r0, #0
 8001174:	f007 f968 	bl	8008448 <strtok>
 8001178:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d011      	beq.n	80011a6 <kd_change+0x3e>
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff f856 	bl	8000234 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	2b1f      	cmp	r3, #31
 800118c:	d80b      	bhi.n	80011a6 <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f006 fa26 	bl	80075e0 <atof>
 8001194:	ec53 2b10 	vmov	r2, r3, d0
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fd46 	bl	8000c2c <__aeabi_d2f>
 80011a0:	4602      	mov	r2, r0
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	605a      	str	r2, [r3, #4]
	}
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	0800a2b0 	.word	0x0800a2b0

080011b4 <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80011bc:	4915      	ldr	r1, [pc, #84]	@ (8001214 <Base_speed_change+0x60>)
 80011be:	2000      	movs	r0, #0
 80011c0:	f007 f942 	bl	8008448 <strtok>
 80011c4:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d01d      	beq.n	800120a <Base_speed_change+0x56>
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f7ff f830 	bl	8000234 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b1f      	cmp	r3, #31
 80011d8:	d817      	bhi.n	800120a <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f006 fa00 	bl	80075e0 <atof>
 80011e0:	ec53 2b10 	vmov	r2, r3, d0
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fcd8 	bl	8000b9c <__aeabi_d2iz>
 80011ec:	4602      	mov	r2, r0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
		LF->Base_speed_L = atof(ParsePointer);
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f006 f9f4 	bl	80075e0 <atof>
 80011f8:	ec53 2b10 	vmov	r2, r3, d0
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fccc 	bl	8000b9c <__aeabi_d2iz>
 8001204:	4602      	mov	r2, r0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60da      	str	r2, [r3, #12]
	}
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0800a2b0 	.word	0x0800a2b0

08001218 <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001220:	4915      	ldr	r1, [pc, #84]	@ (8001278 <Max_speed_change+0x60>)
 8001222:	2000      	movs	r0, #0
 8001224:	f007 f910 	bl	8008448 <strtok>
 8001228:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01d      	beq.n	800126e <Max_speed_change+0x56>
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7fe fffe 	bl	8000234 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	2b1f      	cmp	r3, #31
 800123c:	d817      	bhi.n	800126e <Max_speed_change+0x56>
	{
		LF->Max_speed_R = atof(ParsePointer);
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f006 f9ce 	bl	80075e0 <atof>
 8001244:	ec53 2b10 	vmov	r2, r3, d0
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fca6 	bl	8000b9c <__aeabi_d2iz>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
		LF->Max_speed_L = atof(ParsePointer);
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f006 f9c2 	bl	80075e0 <atof>
 800125c:	ec53 2b10 	vmov	r2, r3, d0
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fc9a 	bl	8000b9c <__aeabi_d2iz>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	615a      	str	r2, [r3, #20]
	}
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	0800a2b0 	.word	0x0800a2b0

0800127c <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001284:	490f      	ldr	r1, [pc, #60]	@ (80012c4 <Sharp_bend_speed_right_change+0x48>)
 8001286:	2000      	movs	r0, #0
 8001288:	f007 f8de 	bl	8008448 <strtok>
 800128c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d011      	beq.n	80012ba <Sharp_bend_speed_right_change+0x3e>
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7fe ffcc 	bl	8000234 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	2b1f      	cmp	r3, #31
 80012a0:	d80b      	bhi.n	80012ba <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f006 f99c 	bl	80075e0 <atof>
 80012a8:	ec53 2b10 	vmov	r2, r3, d0
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc74 	bl	8000b9c <__aeabi_d2iz>
 80012b4:	4602      	mov	r2, r0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
	}
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800a2b0 	.word	0x0800a2b0

080012c8 <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012d0:	490f      	ldr	r1, [pc, #60]	@ (8001310 <Sharp_bend_speed_left_change+0x48>)
 80012d2:	2000      	movs	r0, #0
 80012d4:	f007 f8b8 	bl	8008448 <strtok>
 80012d8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d011      	beq.n	8001306 <Sharp_bend_speed_left_change+0x3e>
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7fe ffa6 	bl	8000234 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b1f      	cmp	r3, #31
 80012ec:	d80b      	bhi.n	8001306 <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f006 f976 	bl	80075e0 <atof>
 80012f4:	ec53 2b10 	vmov	r2, r3, d0
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc4e 	bl	8000b9c <__aeabi_d2iz>
 8001300:	4602      	mov	r2, r0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	61da      	str	r2, [r3, #28]
	}
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	0800a2b0 	.word	0x0800a2b0

08001314 <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800131c:	490f      	ldr	r1, [pc, #60]	@ (800135c <Bend_speed_right_change+0x48>)
 800131e:	2000      	movs	r0, #0
 8001320:	f007 f892 	bl	8008448 <strtok>
 8001324:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d011      	beq.n	8001352 <Bend_speed_right_change+0x3e>
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7fe ff80 	bl	8000234 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	2b1f      	cmp	r3, #31
 8001338:	d80b      	bhi.n	8001352 <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f006 f950 	bl	80075e0 <atof>
 8001340:	ec53 2b10 	vmov	r2, r3, d0
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc28 	bl	8000b9c <__aeabi_d2iz>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	621a      	str	r2, [r3, #32]
	}
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800a2b0 	.word	0x0800a2b0

08001360 <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001368:	490f      	ldr	r1, [pc, #60]	@ (80013a8 <Bend_speed_left_change+0x48>)
 800136a:	2000      	movs	r0, #0
 800136c:	f007 f86c 	bl	8008448 <strtok>
 8001370:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d011      	beq.n	800139e <Bend_speed_left_change+0x3e>
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7fe ff5a 	bl	8000234 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	2b1f      	cmp	r3, #31
 8001384:	d80b      	bhi.n	800139e <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f006 f92a 	bl	80075e0 <atof>
 800138c:	ec53 2b10 	vmov	r2, r3, d0
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc02 	bl	8000b9c <__aeabi_d2iz>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	0800a2b0 	.word	0x0800a2b0

080013ac <App_Controll>:
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80013bc:	d106      	bne.n	80013cc <App_Controll+0x20>
	{
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c8:	f001 ff76 	bl	80032b8 <HAL_GPIO_WritePin>
		/*Send battery percentage*/
		//SN_UART_Send(&huart1, "%.1f \r \n" ,battery_procentage_raw);

	}
	/*Start robot*/
	if (RxData == 'Y')
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b59      	cmp	r3, #89	@ 0x59
 80013d0:	d106      	bne.n	80013e0 <App_Controll+0x34>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f001 ff6c 	bl	80032b8 <HAL_GPIO_WritePin>
	}

 	  //low
 	  if(RxData == 'n')
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b6e      	cmp	r3, #110	@ 0x6e
 80013e4:	d11f      	bne.n	8001426 <App_Controll+0x7a>
 	  {
 	    LineFollower->Base_speed_R = 116;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2274      	movs	r2, #116	@ 0x74
 80013ea:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 116;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2274      	movs	r2, #116	@ 0x74
 80013f0:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 167;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	22a7      	movs	r2, #167	@ 0xa7
 80013f6:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 167;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	22a7      	movs	r2, #167	@ 0xa7
 80013fc:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -96;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f06f 025f 	mvn.w	r2, #95	@ 0x5f
 8001404:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 185;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	22b9      	movs	r2, #185	@ 0xb9
 800140a:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001412:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2264      	movs	r2, #100	@ 0x64
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Kp = 0.02;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	4a4a      	ldr	r2, [pc, #296]	@ (8001548 <App_Controll+0x19c>)
 800141e:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4a4a      	ldr	r2, [pc, #296]	@ (800154c <App_Controll+0x1a0>)
 8001424:	605a      	str	r2, [r3, #4]
 	  }
 	  //medium
 	  if(RxData == 'h')
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b68      	cmp	r3, #104	@ 0x68
 800142a:	d11f      	bne.n	800146c <App_Controll+0xc0>
 	  {
 	    LineFollower->Base_speed_R = 123;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	227b      	movs	r2, #123	@ 0x7b
 8001430:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 123;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	227b      	movs	r2, #123	@ 0x7b
 8001436:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 172;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	22ac      	movs	r2, #172	@ 0xac
 800143c:	615a      	str	r2, [r3, #20]
 	    LineFollower->Max_speed_R = 172;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	22ac      	movs	r2, #172	@ 0xac
 8001442:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -90;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f06f 0259 	mvn.w	r2, #89	@ 0x59
 800144a:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 185;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	22b9      	movs	r2, #185	@ 0xb9
 8001450:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8001458:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2264      	movs	r2, #100	@ 0x64
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Kp = 0.02;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a39      	ldr	r2, [pc, #228]	@ (8001548 <App_Controll+0x19c>)
 8001464:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	4a38      	ldr	r2, [pc, #224]	@ (800154c <App_Controll+0x1a0>)
 800146a:	605a      	str	r2, [r3, #4]
 	  }
 	  //fast
 	  if(RxData == 'o')
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b6f      	cmp	r3, #111	@ 0x6f
 8001470:	d11f      	bne.n	80014b2 <App_Controll+0x106>
 	  {
 	    LineFollower->Base_speed_R = 143;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	228f      	movs	r2, #143	@ 0x8f
 8001476:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 143;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	228f      	movs	r2, #143	@ 0x8f
 800147c:	60da      	str	r2, [r3, #12]
 	   	LineFollower->Max_speed_L = 182;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	22b6      	movs	r2, #182	@ 0xb6
 8001482:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 182;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	22b6      	movs	r2, #182	@ 0xb6
 8001488:	611a      	str	r2, [r3, #16]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 8001490:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 90;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	225a      	movs	r2, #90	@ 0x5a
 8001496:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 800149e:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2264      	movs	r2, #100	@ 0x64
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
 		LineFollower->Kp = 0.02;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	4a27      	ldr	r2, [pc, #156]	@ (8001548 <App_Controll+0x19c>)
 80014aa:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4a27      	ldr	r2, [pc, #156]	@ (800154c <App_Controll+0x1a0>)
 80014b0:	605a      	str	r2, [r3, #4]
 	   }
 	   //rura
 	   if(RxData == 'u')
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b75      	cmp	r3, #117	@ 0x75
 80014b6:	d11f      	bne.n	80014f8 <App_Controll+0x14c>
 	   {
 	     LineFollower->Base_speed_R = 153;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2299      	movs	r2, #153	@ 0x99
 80014bc:	609a      	str	r2, [r3, #8]
 	     LineFollower->Base_speed_L = 153;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2299      	movs	r2, #153	@ 0x99
 80014c2:	60da      	str	r2, [r3, #12]
 	     LineFollower->Max_speed_L = 187;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	22bb      	movs	r2, #187	@ 0xbb
 80014c8:	615a      	str	r2, [r3, #20]
 	   	 LineFollower->Max_speed_R = 187;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	22bb      	movs	r2, #187	@ 0xbb
 80014ce:	611a      	str	r2, [r3, #16]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 80014d6:	619a      	str	r2, [r3, #24]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	225a      	movs	r2, #90	@ 0x5a
 80014dc:	61da      	str	r2, [r3, #28]
 	 	 LineFollower->Bend_speed_right = -50;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 80014e4:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Bend_speed_left = 100;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2264      	movs	r2, #100	@ 0x64
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
 	 	 LineFollower->Kp = 0.02;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4a16      	ldr	r2, [pc, #88]	@ (8001548 <App_Controll+0x19c>)
 80014f0:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	4a15      	ldr	r2, [pc, #84]	@ (800154c <App_Controll+0x1a0>)
 80014f6:	605a      	str	r2, [r3, #4]
 	   }
 	  //full rura
 	  if(RxData == 'p')
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b70      	cmp	r3, #112	@ 0x70
 80014fc:	d11f      	bne.n	800153e <App_Controll+0x192>
 	  {
 		 LineFollower->Base_speed_R = 143;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	228f      	movs	r2, #143	@ 0x8f
 8001502:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 143;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	228f      	movs	r2, #143	@ 0x8f
 8001508:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 182;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	22b6      	movs	r2, #182	@ 0xb6
 800150e:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 182;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	22b6      	movs	r2, #182	@ 0xb6
 8001514:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f06f 024b 	mvn.w	r2, #75	@ 0x4b
 800151c:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	225a      	movs	r2, #90	@ 0x5a
 8001522:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 800152a:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	226e      	movs	r2, #110	@ 0x6e
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
 		 LineFollower->Kp = 0.02;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <App_Controll+0x19c>)
 8001536:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <App_Controll+0x1a0>)
 800153c:	605a      	str	r2, [r3, #4]
 	  }
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	3ca3d70a 	.word	0x3ca3d70a
 800154c:	43af0000 	.word	0x43af0000

08001550 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001558:	490c      	ldr	r1, [pc, #48]	@ (800158c <Mode_change+0x3c>)
 800155a:	2000      	movs	r0, #0
 800155c:	f006 ff74 	bl	8008448 <strtok>
 8001560:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <Mode_change+0x32>
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7fe fe62 	bl	8000234 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	2b01      	cmp	r3, #1
 8001574:	d805      	bhi.n	8001582 <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff15 	bl	80013ac <App_Controll>
	}
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	0800a2b0 	.word	0x0800a2b0

08001590 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 800159a:	4935      	ldr	r1, [pc, #212]	@ (8001670 <Parser_Parse+0xe0>)
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f006 ff53 	bl	8008448 <strtok>
 80015a2:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 80015a4:	68f9      	ldr	r1, [r7, #12]
 80015a6:	4833      	ldr	r0, [pc, #204]	@ (8001674 <Parser_Parse+0xe4>)
 80015a8:	f7fe fe3a 	bl	8000220 <strcmp>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d103      	bne.n	80015ba <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f7ff fdb2 	bl	800111c <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 80015b8:	e056      	b.n	8001668 <Parser_Parse+0xd8>
	else if(!strcmp("Kd",ParsePointer))
 80015ba:	68f9      	ldr	r1, [r7, #12]
 80015bc:	482e      	ldr	r0, [pc, #184]	@ (8001678 <Parser_Parse+0xe8>)
 80015be:	f7fe fe2f 	bl	8000220 <strcmp>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <Parser_Parse+0x40>
		kd_change(LineFollower);
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f7ff fdcd 	bl	8001168 <kd_change>
}
 80015ce:	e04b      	b.n	8001668 <Parser_Parse+0xd8>
	else if(!strcmp("Base_speed",ParsePointer))
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	482a      	ldr	r0, [pc, #168]	@ (800167c <Parser_Parse+0xec>)
 80015d4:	f7fe fe24 	bl	8000220 <strcmp>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7ff fde8 	bl	80011b4 <Base_speed_change>
}
 80015e4:	e040      	b.n	8001668 <Parser_Parse+0xd8>
	else if(!strcmp("Max_speed",ParsePointer))
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	4825      	ldr	r0, [pc, #148]	@ (8001680 <Parser_Parse+0xf0>)
 80015ea:	f7fe fe19 	bl	8000220 <strcmp>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff fe0f 	bl	8001218 <Max_speed_change>
}
 80015fa:	e035      	b.n	8001668 <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	4821      	ldr	r0, [pc, #132]	@ (8001684 <Parser_Parse+0xf4>)
 8001600:	f7fe fe0e 	bl	8000220 <strcmp>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 800160a:	6838      	ldr	r0, [r7, #0]
 800160c:	f7ff fe36 	bl	800127c <Sharp_bend_speed_right_change>
}
 8001610:	e02a      	b.n	8001668 <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	481c      	ldr	r0, [pc, #112]	@ (8001688 <Parser_Parse+0xf8>)
 8001616:	f7fe fe03 	bl	8000220 <strcmp>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7ff fe51 	bl	80012c8 <Sharp_bend_speed_left_change>
}
 8001626:	e01f      	b.n	8001668 <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001628:	68f9      	ldr	r1, [r7, #12]
 800162a:	4818      	ldr	r0, [pc, #96]	@ (800168c <Parser_Parse+0xfc>)
 800162c:	f7fe fdf8 	bl	8000220 <strcmp>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001636:	6838      	ldr	r0, [r7, #0]
 8001638:	f7ff fe6c 	bl	8001314 <Bend_speed_right_change>
}
 800163c:	e014      	b.n	8001668 <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	4813      	ldr	r0, [pc, #76]	@ (8001690 <Parser_Parse+0x100>)
 8001642:	f7fe fded 	bl	8000220 <strcmp>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d103      	bne.n	8001654 <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 800164c:	6838      	ldr	r0, [r7, #0]
 800164e:	f7ff fe87 	bl	8001360 <Bend_speed_left_change>
}
 8001652:	e009      	b.n	8001668 <Parser_Parse+0xd8>
	else if(!strcmp("Mode",ParsePointer))
 8001654:	68f9      	ldr	r1, [r7, #12]
 8001656:	480f      	ldr	r0, [pc, #60]	@ (8001694 <Parser_Parse+0x104>)
 8001658:	f7fe fde2 	bl	8000220 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <Parser_Parse+0xd8>
		Mode_change(LineFollower);
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f7ff ff74 	bl	8001550 <Mode_change>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	0800a2b4 	.word	0x0800a2b4
 8001674:	0800a2b8 	.word	0x0800a2b8
 8001678:	0800a2bc 	.word	0x0800a2bc
 800167c:	0800a2c0 	.word	0x0800a2c0
 8001680:	0800a2cc 	.word	0x0800a2cc
 8001684:	0800a2d8 	.word	0x0800a2d8
 8001688:	0800a2f0 	.word	0x0800a2f0
 800168c:	0800a308 	.word	0x0800a308
 8001690:	0800a31c 	.word	0x0800a31c
 8001694:	0800a32c 	.word	0x0800a32c

08001698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b33      	ldr	r3, [pc, #204]	@ (800177c <MX_GPIO_Init+0xe4>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	4a32      	ldr	r2, [pc, #200]	@ (800177c <MX_GPIO_Init+0xe4>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ba:	4b30      	ldr	r3, [pc, #192]	@ (800177c <MX_GPIO_Init+0xe4>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <MX_GPIO_Init+0xe4>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4a2c      	ldr	r2, [pc, #176]	@ (800177c <MX_GPIO_Init+0xe4>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <MX_GPIO_Init+0xe4>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 80016de:	2200      	movs	r2, #0
 80016e0:	f248 71f3 	movw	r1, #34803	@ 0x87f3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e8:	f001 fde6 	bl	80032b8 <HAL_GPIO_WritePin>
                          |SENSOR5_Pin|SENSOR6_Pin|IN2_R_Pin|SENSOR8_Pin
                          |IN1_L_Pin|STNDBY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_L_Pin|SENSOR7_Pin|IN1_R_Pin|LEDON_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f240 1131 	movw	r1, #305	@ 0x131
 80016f2:	4823      	ldr	r0, [pc, #140]	@ (8001780 <MX_GPIO_Init+0xe8>)
 80016f4:	f001 fde0 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 80016f8:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 80016fc:	60fb      	str	r3, [r7, #12]
                          |SENSOR5_Pin|SENSOR6_Pin|IN2_R_Pin|SENSOR8_Pin
                          |IN1_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001714:	f001 fc36 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN2_L_Pin|SENSOR7_Pin|IN1_R_Pin;
 8001718:	2331      	movs	r3, #49	@ 0x31
 800171a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	4814      	ldr	r0, [pc, #80]	@ (8001780 <MX_GPIO_Init+0xe8>)
 8001730:	f001 fc28 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STNDBY_Pin;
 8001734:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STNDBY_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001750:	f001 fc18 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDON_Pin;
 8001754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEDON_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4619      	mov	r1, r3
 800176c:	4804      	ldr	r0, [pc, #16]	@ (8001780 <MX_GPIO_Init+0xe8>)
 800176e:	f001 fc09 	bl	8002f84 <HAL_GPIO_Init>

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	48000400 	.word	0x48000400

08001784 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <delay_us+0x34>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8001796:	bf00      	nop
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <delay_us+0x34>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3f9      	bcc.n	8001798 <delay_us+0x14>
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <delay_us+0x34>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20000330 	.word	0x20000330

080017bc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f001 fbca 	bl	8002f84 <HAL_GPIO_Init>
}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181c:	2301      	movs	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f001 fbac 	bl	8002f84 <HAL_GPIO_Init>
}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 8001834:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001840:	ed87 1b00 	vstr	d1, [r7]
	if (pos_left < 0 )
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001850:	f7ff f97c 	bl	8000b4c <__aeabi_dcmplt>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d022      	beq.n	80018a0 <motor_control+0x6c>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)(ARR*pos_left*-1));
 800185a:	4b4a      	ldr	r3, [pc, #296]	@ (8001984 <motor_control+0x150>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe98 	bl	8000594 <__aeabi_i2d>
 8001864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001868:	f7fe fefe 	bl	8000668 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4690      	mov	r8, r2
 8001872:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001876:	4640      	mov	r0, r8
 8001878:	4649      	mov	r1, r9
 800187a:	f7ff f98f 	bl	8000b9c <__aeabi_d2iz>
 800187e:	4602      	mov	r2, r0
 8001880:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <motor_control+0x154>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(IN1_L_GPIO_Port, IN1_L_Pin, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800188c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001890:	f001 fd12 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_L_GPIO_Port, IN2_L_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2101      	movs	r1, #1
 8001898:	483c      	ldr	r0, [pc, #240]	@ (800198c <motor_control+0x158>)
 800189a:	f001 fd0d 	bl	80032b8 <HAL_GPIO_WritePin>
 800189e:	e01e      	b.n	80018de <motor_control+0xaa>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)(ARR*pos_left));
 80018a0:	4b38      	ldr	r3, [pc, #224]	@ (8001984 <motor_control+0x150>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe75 	bl	8000594 <__aeabi_i2d>
 80018aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ae:	f7fe fedb 	bl	8000668 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f96f 	bl	8000b9c <__aeabi_d2iz>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <motor_control+0x154>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(IN1_L_GPIO_Port, IN1_L_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d0:	f001 fcf2 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_L_GPIO_Port, IN2_L_Pin, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	2101      	movs	r1, #1
 80018d8:	482c      	ldr	r0, [pc, #176]	@ (800198c <motor_control+0x158>)
 80018da:	f001 fced 	bl	80032b8 <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ea:	f7ff f92f 	bl	8000b4c <__aeabi_dcmplt>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d022      	beq.n	800193a <motor_control+0x106>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, (int)(ARR*pos_right*-1));
 80018f4:	4b23      	ldr	r3, [pc, #140]	@ (8001984 <motor_control+0x150>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe4b 	bl	8000594 <__aeabi_i2d>
 80018fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001902:	f7fe feb1 	bl	8000668 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4614      	mov	r4, r2
 800190c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7ff f942 	bl	8000b9c <__aeabi_d2iz>
 8001918:	4602      	mov	r2, r0
 800191a:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <motor_control+0x154>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(IN1_R_GPIO_Port, IN1_R_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2120      	movs	r1, #32
 8001924:	4819      	ldr	r0, [pc, #100]	@ (800198c <motor_control+0x158>)
 8001926:	f001 fcc7 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_R_GPIO_Port, IN2_R_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001934:	f001 fcc0 	bl	80032b8 <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, (int)(ARR*pos_right));
		HAL_GPIO_WritePin(IN1_R_GPIO_Port, IN1_R_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN2_R_GPIO_Port, IN2_R_Pin, GPIO_PIN_SET);
	}
}
 8001938:	e01e      	b.n	8001978 <motor_control+0x144>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, (int)(ARR*pos_right));
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <motor_control+0x150>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe28 	bl	8000594 <__aeabi_i2d>
 8001944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001948:	f7fe fe8e 	bl	8000668 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f922 	bl	8000b9c <__aeabi_d2iz>
 8001958:	4602      	mov	r2, r0
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <motor_control+0x154>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(IN1_R_GPIO_Port, IN1_R_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2120      	movs	r1, #32
 8001964:	4809      	ldr	r0, [pc, #36]	@ (800198c <motor_control+0x158>)
 8001966:	f001 fca7 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_R_GPIO_Port, IN2_R_Pin, GPIO_PIN_SET);
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001974:	f001 fca0 	bl	80032b8 <HAL_GPIO_WritePin>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	2000037c 	.word	0x2000037c
 800198c:	48000400 	.word	0x48000400

08001990 <sharp_turn>:


void sharp_turn () {
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 8001994:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <sharp_turn+0xc8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b18      	cmp	r3, #24
 800199a:	dc2d      	bgt.n	80019f8 <sharp_turn+0x68>
	{
		if (Last_end == 1)
 800199c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <sharp_turn+0xcc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d114      	bne.n	80019ce <sharp_turn+0x3e>
			motor_control(REGIN.Sharp_bend_speed_right, REGIN.Sharp_bend_speed_left);
 80019a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <sharp_turn+0xd0>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdf3 	bl	8000594 <__aeabi_i2d>
 80019ae:	4604      	mov	r4, r0
 80019b0:	460d      	mov	r5, r1
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <sharp_turn+0xd0>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fdec 	bl	8000594 <__aeabi_i2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	ec43 2b11 	vmov	d1, r2, r3
 80019c4:	ec45 4b10 	vmov	d0, r4, r5
 80019c8:	f7ff ff34 	bl	8001834 <motor_control>
		if (Last_end == 1)
			motor_control(REGIN.Bend_speed_right, REGIN.Bend_speed_left);
		else
			motor_control(REGIN.Bend_speed_left, REGIN.Bend_speed_right);
	}
}
 80019cc:	e041      	b.n	8001a52 <sharp_turn+0xc2>
			motor_control(REGIN.Sharp_bend_speed_left, REGIN.Sharp_bend_speed_right);
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <sharp_turn+0xd0>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdde 	bl	8000594 <__aeabi_i2d>
 80019d8:	4604      	mov	r4, r0
 80019da:	460d      	mov	r5, r1
 80019dc:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <sharp_turn+0xd0>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdd7 	bl	8000594 <__aeabi_i2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	ec43 2b11 	vmov	d1, r2, r3
 80019ee:	ec45 4b10 	vmov	d0, r4, r5
 80019f2:	f7ff ff1f 	bl	8001834 <motor_control>
}
 80019f6:	e02c      	b.n	8001a52 <sharp_turn+0xc2>
		if (Last_end == 1)
 80019f8:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <sharp_turn+0xcc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d114      	bne.n	8001a2a <sharp_turn+0x9a>
			motor_control(REGIN.Bend_speed_right, REGIN.Bend_speed_left);
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <sharp_turn+0xd0>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fdc5 	bl	8000594 <__aeabi_i2d>
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	460d      	mov	r5, r1
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <sharp_turn+0xd0>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdbe 	bl	8000594 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	ec43 2b11 	vmov	d1, r2, r3
 8001a20:	ec45 4b10 	vmov	d0, r4, r5
 8001a24:	f7ff ff06 	bl	8001834 <motor_control>
}
 8001a28:	e013      	b.n	8001a52 <sharp_turn+0xc2>
			motor_control(REGIN.Bend_speed_left, REGIN.Bend_speed_right);
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <sharp_turn+0xd0>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fdb0 	bl	8000594 <__aeabi_i2d>
 8001a34:	4604      	mov	r4, r0
 8001a36:	460d      	mov	r5, r1
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <sharp_turn+0xd0>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fda9 	bl	8000594 <__aeabi_i2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	ec43 2b11 	vmov	d1, r2, r3
 8001a4a:	ec45 4b10 	vmov	d0, r4, r5
 8001a4e:	f7ff fef1 	bl	8001834 <motor_control>
}
 8001a52:	bf00      	nop
 8001a54:	bdb0      	pop	{r4, r5, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200002d4 	.word	0x200002d4
 8001a5c:	200002d0 	.word	0x200002d0
 8001a60:	200001f4 	.word	0x200001f4

08001a64 <QTR8_read>:
int QTR8_read ()
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a70:	48b2      	ldr	r0, [pc, #712]	@ (8001d3c <QTR8_read+0x2d8>)
 8001a72:	f001 fc21 	bl	80032b8 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8001a76:	2101      	movs	r1, #1
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7c:	f7ff fe9e 	bl	80017bc <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8001a80:	2102      	movs	r1, #2
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a86:	f7ff fe99 	bl	80017bc <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a90:	f7ff fe94 	bl	80017bc <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8001a94:	2120      	movs	r1, #32
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a9a:	f7ff fe8f 	bl	80017bc <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8001a9e:	2140      	movs	r1, #64	@ 0x40
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa4:	f7ff fe8a 	bl	80017bc <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aae:	f7ff fe85 	bl	80017bc <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	48a1      	ldr	r0, [pc, #644]	@ (8001d3c <QTR8_read+0x2d8>)
 8001ab6:	f7ff fe81 	bl	80017bc <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8001aba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac2:	f7ff fe7b 	bl	80017bc <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2101      	movs	r1, #1
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ace:	f001 fbf3 	bl	80032b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ada:	f001 fbed 	bl	80032b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae6:	f001 fbe7 	bl	80032b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2120      	movs	r1, #32
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af2:	f001 fbe1 	bl	80032b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2140      	movs	r1, #64	@ 0x40
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afe:	f001 fbdb 	bl	80032b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0a:	f001 fbd5 	bl	80032b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2110      	movs	r1, #16
 8001b12:	488a      	ldr	r0, [pc, #552]	@ (8001d3c <QTR8_read+0x2d8>)
 8001b14:	f001 fbd0 	bl	80032b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b22:	f001 fbc9 	bl	80032b8 <HAL_GPIO_WritePin>

	delay_us(10);
 8001b26:	200a      	movs	r0, #10
 8001b28:	f7ff fe2c 	bl	8001784 <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b32:	f7ff fe61 	bl	80017f8 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8001b36:	2102      	movs	r1, #2
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3c:	f7ff fe5c 	bl	80017f8 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8001b40:	2110      	movs	r1, #16
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b46:	f7ff fe57 	bl	80017f8 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b50:	f7ff fe52 	bl	80017f8 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8001b54:	2140      	movs	r1, #64	@ 0x40
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5a:	f7ff fe4d 	bl	80017f8 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001b5e:	2180      	movs	r1, #128	@ 0x80
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b64:	f7ff fe48 	bl	80017f8 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8001b68:	2110      	movs	r1, #16
 8001b6a:	4874      	ldr	r0, [pc, #464]	@ (8001d3c <QTR8_read+0x2d8>)
 8001b6c:	f7ff fe44 	bl	80017f8 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8001b70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b78:	f7ff fe3e 	bl	80017f8 <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 8001b7c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001b80:	f7ff fe00 	bl	8001784 <delay_us>


	Sensors_read = 0x00000000;
 8001b84:	4b6e      	ldr	r3, [pc, #440]	@ (8001d40 <QTR8_read+0x2dc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  int active = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8001b92:	2101      	movs	r1, #1
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b98:	f001 fb76 	bl	8003288 <HAL_GPIO_ReadPin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00f      	beq.n	8001bc2 <QTR8_read+0x15e>
		Sensors_read |= 0x00000001;
 8001ba2:	4b67      	ldr	r3, [pc, #412]	@ (8001d40 <QTR8_read+0x2dc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	4a65      	ldr	r2, [pc, #404]	@ (8001d40 <QTR8_read+0x2dc>)
 8001bac:	6013      	str	r3, [r2, #0]
		pos += 1000;//1000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001bb4:	607b      	str	r3, [r7, #4]
    active++;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	603b      	str	r3, [r7, #0]
		Last_end = 1;
 8001bbc:	4b61      	ldr	r3, [pc, #388]	@ (8001d44 <QTR8_read+0x2e0>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc8:	f001 fb5e 	bl	8003288 <HAL_GPIO_ReadPin>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <QTR8_read+0x188>
		Sensors_read |= 0x00000010;
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d40 <QTR8_read+0x2dc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	4a59      	ldr	r2, [pc, #356]	@ (8001d40 <QTR8_read+0x2dc>)
 8001bdc:	6013      	str	r3, [r2, #0]
		pos += 2000;//2000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001be4:	607b      	str	r3, [r7, #4]
    active++;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8001bec:	2110      	movs	r1, #16
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf2:	f001 fb49 	bl	8003288 <HAL_GPIO_ReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00c      	beq.n	8001c16 <QTR8_read+0x1b2>
		Sensors_read |= 0x00000100;
 8001bfc:	4b50      	ldr	r3, [pc, #320]	@ (8001d40 <QTR8_read+0x2dc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c04:	4a4e      	ldr	r2, [pc, #312]	@ (8001d40 <QTR8_read+0x2dc>)
 8001c06:	6013      	str	r3, [r2, #0]
		pos += 3000;//3000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8001c0e:	607b      	str	r3, [r7, #4]
    active++;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8001c16:	2120      	movs	r1, #32
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1c:	f001 fb34 	bl	8003288 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00c      	beq.n	8001c40 <QTR8_read+0x1dc>
		Sensors_read |= 0x00001000;
 8001c26:	4b46      	ldr	r3, [pc, #280]	@ (8001d40 <QTR8_read+0x2dc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c2e:	4a44      	ldr	r2, [pc, #272]	@ (8001d40 <QTR8_read+0x2dc>)
 8001c30:	6013      	str	r3, [r2, #0]
		pos += 4000;//4000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f503 637a 	add.w	r3, r3, #4000	@ 0xfa0
 8001c38:	607b      	str	r3, [r7, #4]
    active++;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8001c40:	2140      	movs	r1, #64	@ 0x40
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c46:	f001 fb1f 	bl	8003288 <HAL_GPIO_ReadPin>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <QTR8_read+0x208>
		Sensors_read |= 0x00010000;
 8001c50:	4b3b      	ldr	r3, [pc, #236]	@ (8001d40 <QTR8_read+0x2dc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	4a39      	ldr	r2, [pc, #228]	@ (8001d40 <QTR8_read+0x2dc>)
 8001c5a:	6013      	str	r3, [r2, #0]
		pos += 5000;//5000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001c62:	3308      	adds	r3, #8
 8001c64:	607b      	str	r3, [r7, #4]
    active++;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c72:	f001 fb09 	bl	8003288 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00d      	beq.n	8001c98 <QTR8_read+0x234>
		Sensors_read |= 0x00100000;
 8001c7c:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <QTR8_read+0x2dc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c84:	4a2e      	ldr	r2, [pc, #184]	@ (8001d40 <QTR8_read+0x2dc>)
 8001c86:	6013      	str	r3, [r2, #0]
		pos += 6000;//6000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001c8e:	3310      	adds	r3, #16
 8001c90:	607b      	str	r3, [r7, #4]
    active++;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8001c98:	2110      	movs	r1, #16
 8001c9a:	4828      	ldr	r0, [pc, #160]	@ (8001d3c <QTR8_read+0x2d8>)
 8001c9c:	f001 faf4 	bl	8003288 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00d      	beq.n	8001cc2 <QTR8_read+0x25e>
		Sensors_read |= 0x01000000;
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <QTR8_read+0x2dc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cae:	4a24      	ldr	r2, [pc, #144]	@ (8001d40 <QTR8_read+0x2dc>)
 8001cb0:	6013      	str	r3, [r2, #0]
		pos += 7000;//7000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f503 53da 	add.w	r3, r3, #6976	@ 0x1b40
 8001cb8:	3318      	adds	r3, #24
 8001cba:	607b      	str	r3, [r7, #4]
    active++;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8001cc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cca:	f001 fadd 	bl	8003288 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00f      	beq.n	8001cf4 <QTR8_read+0x290>
		Sensors_read |= 0x10000000;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <QTR8_read+0x2dc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	4a18      	ldr	r2, [pc, #96]	@ (8001d40 <QTR8_read+0x2dc>)
 8001cde:	6013      	str	r3, [r2, #0]
		pos += 8000;//8000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8001ce6:	607b      	str	r3, [r7, #4]
    active++;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
		Last_end = 0;
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <QTR8_read+0x2e0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cfa:	4810      	ldr	r0, [pc, #64]	@ (8001d3c <QTR8_read+0x2d8>)
 8001cfc:	f001 fadc 	bl	80032b8 <HAL_GPIO_WritePin>

  actives = active;
 8001d00:	4a11      	ldr	r2, [pc, #68]	@ (8001d48 <QTR8_read+0x2e4>)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <QTR8_read+0x2e8>)
 8001d10:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <QTR8_read+0x2e4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <QTR8_read+0x2c2>
		Last_idle++;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <QTR8_read+0x2ec>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a0b      	ldr	r2, [pc, #44]	@ (8001d50 <QTR8_read+0x2ec>)
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e002      	b.n	8001d2c <QTR8_read+0x2c8>
	else
		Last_idle = 0;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <QTR8_read+0x2ec>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

	return pos/active;
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	20000284 	.word	0x20000284
 8001d44:	200002d0 	.word	0x200002d0
 8001d48:	200002d8 	.word	0x200002d8
 8001d4c:	20000288 	.word	0x20000288
 8001d50:	200002d4 	.word	0x200002d4

08001d54 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8001d54:	b5b0      	push	{r4, r5, r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <forward_brake+0x40>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <forward_brake+0x18>
		sharp_turn();
 8001d66:	f7ff fe13 	bl	8001990 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8001d6a:	e00f      	b.n	8001d8c <forward_brake+0x38>
	  motor_control(pos_right, pos_left);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7fe fc11 	bl	8000594 <__aeabi_i2d>
 8001d72:	4604      	mov	r4, r0
 8001d74:	460d      	mov	r5, r1
 8001d76:	6838      	ldr	r0, [r7, #0]
 8001d78:	f7fe fc0c 	bl	8000594 <__aeabi_i2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ec43 2b11 	vmov	d1, r2, r3
 8001d84:	ec45 4b10 	vmov	d0, r4, r5
 8001d88:	f7ff fd54 	bl	8001834 <motor_control>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdb0      	pop	{r4, r5, r7, pc}
 8001d94:	200002d8 	.word	0x200002d8

08001d98 <past_errors>:

void past_errors (int error)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8001da0:	2309      	movs	r3, #9
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e00b      	b.n	8001dbe <past_errors+0x26>
      Errors[i] = Errors[i-1];
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <past_errors+0x40>)
 8001dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001db0:	4909      	ldr	r1, [pc, #36]	@ (8001dd8 <past_errors+0x40>)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dcf0      	bgt.n	8001da6 <past_errors+0xe>
  Errors[0] = error;
 8001dc4:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <past_errors+0x40>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200002a8 	.word	0x200002a8

08001ddc <errors_sum>:

int errors_sum (int index, int abs)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	e01a      	b.n	8001e26 <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d10d      	bne.n	8001e12 <errors_sum+0x36>
 8001df6:	4a11      	ldr	r2, [pc, #68]	@ (8001e3c <errors_sum+0x60>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da07      	bge.n	8001e12 <errors_sum+0x36>
      sum += -Errors[i];
 8001e02:	4a0e      	ldr	r2, [pc, #56]	@ (8001e3c <errors_sum+0x60>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e006      	b.n	8001e20 <errors_sum+0x44>
    else
      sum += Errors[i];
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <errors_sum+0x60>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dbe0      	blt.n	8001df0 <errors_sum+0x14>
  }
  return sum;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	200002a8 	.word	0x200002a8

08001e40 <PID_control>:

void PID_control() {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8001e46:	f7ff fe0d 	bl	8001a64 <QTR8_read>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 8001e4e:	89fb      	ldrh	r3, [r7, #14]
 8001e50:	f5c3 538c 	rsb	r3, r3, #4480	@ 0x1180
 8001e54:	3314      	adds	r3, #20
 8001e56:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8001e58:	68b8      	ldr	r0, [r7, #8]
 8001e5a:	f7ff ff9d 	bl	8001d98 <past_errors>

  P = error;
 8001e5e:	4a48      	ldr	r2, [pc, #288]	@ (8001f80 <PID_control+0x140>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8001e64:	2100      	movs	r1, #0
 8001e66:	2005      	movs	r0, #5
 8001e68:	f7ff ffb8 	bl	8001ddc <errors_sum>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a45      	ldr	r2, [pc, #276]	@ (8001f84 <PID_control+0x144>)
 8001e70:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 8001e72:	4b45      	ldr	r3, [pc, #276]	@ (8001f88 <PID_control+0x148>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	4a44      	ldr	r2, [pc, #272]	@ (8001f8c <PID_control+0x14c>)
 8001e7c:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8001e7e:	2101      	movs	r1, #1
 8001e80:	2005      	movs	r0, #5
 8001e82:	f7ff ffab 	bl	8001ddc <errors_sum>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a41      	ldr	r2, [pc, #260]	@ (8001f90 <PID_control+0x150>)
 8001e8a:	6013      	str	r3, [r2, #0]
  Last_error = error;
 8001e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8001f88 <PID_control+0x148>)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	6013      	str	r3, [r2, #0]

  int motorspeed = P*REGIN.Kp + I*Ki + D*REGIN.Kd;
 8001e92:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <PID_control+0x140>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f94 <PID_control+0x154>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea8:	4b36      	ldr	r3, [pc, #216]	@ (8001f84 <PID_control+0x144>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001eb4:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <PID_control+0x158>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec2:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <PID_control+0x14c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <PID_control+0x154>)
 8001ed0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee0:	ee17 3a90 	vmov	r3, s15
 8001ee4:	607b      	str	r3, [r7, #4]

  int motorspeedl = REGIN.Base_speed_L + motorspeed - R*Kr;
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f94 <PID_control+0x154>)
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef6:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <PID_control+0x150>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f02:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <PID_control+0x15c>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f14:	ee17 3a90 	vmov	r3, s15
 8001f18:	617b      	str	r3, [r7, #20]
  int motorspeedr = REGIN.Base_speed_R - motorspeed - R*Kr;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <PID_control+0x154>)
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2a:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <PID_control+0x150>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <PID_control+0x15c>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f48:	ee17 3a90 	vmov	r3, s15
 8001f4c:	613b      	str	r3, [r7, #16]

  if (motorspeedl > REGIN.Max_speed_L)
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <PID_control+0x154>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dd02      	ble.n	8001f5e <PID_control+0x11e>
    motorspeedl = REGIN.Max_speed_L;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <PID_control+0x154>)
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	617b      	str	r3, [r7, #20]
  if (motorspeedr > REGIN.Max_speed_R)
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <PID_control+0x154>)
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dd02      	ble.n	8001f6e <PID_control+0x12e>
    motorspeedr = REGIN.Max_speed_R;
 8001f68:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <PID_control+0x154>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 8001f6e:	6979      	ldr	r1, [r7, #20]
 8001f70:	6938      	ldr	r0, [r7, #16]
 8001f72:	f7ff feef 	bl	8001d54 <forward_brake>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000294 	.word	0x20000294
 8001f84:	20000298 	.word	0x20000298
 8001f88:	200002a4 	.word	0x200002a4
 8001f8c:	2000029c 	.word	0x2000029c
 8001f90:	200002a0 	.word	0x200002a0
 8001f94:	200001f4 	.word	0x200001f4
 8001f98:	2000028c 	.word	0x2000028c
 8001f9c:	20000290 	.word	0x20000290

08001fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa4:	f000 fd8b 	bl	8002abe <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa8:	f000 f880 	bl	80020ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fac:	f7ff fb74 	bl	8001698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fb0:	f000 fc68 	bl	8002884 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001fb4:	f000 fa3e 	bl	8002434 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001fb8:	f000 fb60 	bl	800267c <MX_TIM16_Init>
  MX_TIM4_Init();
 8001fbc:	f000 fadc 	bl	8002578 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001fc0:	f000 fc14 	bl	80027ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001fc4:	f000 fa8a 	bl	80024dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  REGIN.Kp = 0.02;
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002084 <main+0xe4>)
 8001fca:	4a2f      	ldr	r2, [pc, #188]	@ (8002088 <main+0xe8>)
 8001fcc:	601a      	str	r2, [r3, #0]
  REGIN.Kd = 350 ;
 8001fce:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <main+0xe4>)
 8001fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800208c <main+0xec>)
 8001fd2:	605a      	str	r2, [r3, #4]
  REGIN.Base_speed_R = 92;
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <main+0xe4>)
 8001fd6:	225c      	movs	r2, #92	@ 0x5c
 8001fd8:	609a      	str	r2, [r3, #8]
  REGIN.Base_speed_L = 92;
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <main+0xe4>)
 8001fdc:	225c      	movs	r2, #92	@ 0x5c
 8001fde:	60da      	str	r2, [r3, #12]
  REGIN.Max_speed_R = 140;
 8001fe0:	4b28      	ldr	r3, [pc, #160]	@ (8002084 <main+0xe4>)
 8001fe2:	228c      	movs	r2, #140	@ 0x8c
 8001fe4:	611a      	str	r2, [r3, #16]
  REGIN.Max_speed_L = 140;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <main+0xe4>)
 8001fe8:	228c      	movs	r2, #140	@ 0x8c
 8001fea:	615a      	str	r2, [r3, #20]
  REGIN.Sharp_bend_speed_right=-90;
 8001fec:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <main+0xe4>)
 8001fee:	f06f 0259 	mvn.w	r2, #89	@ 0x59
 8001ff2:	619a      	str	r2, [r3, #24]
  REGIN.Sharp_bend_speed_left=185;
 8001ff4:	4b23      	ldr	r3, [pc, #140]	@ (8002084 <main+0xe4>)
 8001ff6:	22b9      	movs	r2, #185	@ 0xb9
 8001ff8:	61da      	str	r2, [r3, #28]
  REGIN.Bend_speed_right=-50;
 8001ffa:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <main+0xe4>)
 8001ffc:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8002000:	621a      	str	r2, [r3, #32]
  REGIN.Bend_speed_left=100;
 8002002:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <main+0xe4>)
 8002004:	2264      	movs	r2, #100	@ 0x64
 8002006:	625a      	str	r2, [r3, #36]	@ 0x24
  /*Start receiving data from Bluetooth*/
     HAL_UART_Receive_IT(&huart1,&RxData,1);
 8002008:	2201      	movs	r2, #1
 800200a:	4921      	ldr	r1, [pc, #132]	@ (8002090 <main+0xf0>)
 800200c:	4821      	ldr	r0, [pc, #132]	@ (8002094 <main+0xf4>)
 800200e:	f003 faa7 	bl	8005560 <HAL_UART_Receive_IT>

     /*Start and compare timers*/

    //HAL_TIM_Base_Start(&htim3);
     HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002012:	2100      	movs	r1, #0
 8002014:	4820      	ldr	r0, [pc, #128]	@ (8002098 <main+0xf8>)
 8002016:	f002 fa6f 	bl	80044f8 <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800201a:	2104      	movs	r1, #4
 800201c:	481e      	ldr	r0, [pc, #120]	@ (8002098 <main+0xf8>)
 800201e:	f002 fa6b 	bl	80044f8 <HAL_TIM_PWM_Start>
     //__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 100);
     __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, 100);
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <main+0xf8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2264      	movs	r2, #100	@ 0x64
 8002028:	639a      	str	r2, [r3, #56]	@ 0x38
     __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 100);
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <main+0xf8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2264      	movs	r2, #100	@ 0x64
 8002030:	635a      	str	r2, [r3, #52]	@ 0x34
     HAL_TIM_Base_Start(&htim2);
 8002032:	481a      	ldr	r0, [pc, #104]	@ (800209c <main+0xfc>)
 8002034:	f002 f99c 	bl	8004370 <HAL_TIM_Base_Start>

     HAL_GPIO_TogglePin(STNDBY_GPIO_Port, STNDBY_Pin);
 8002038:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800203c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002040:	f001 f952 	bl	80032e8 <HAL_GPIO_TogglePin>
     HAL_Delay(2000);
 8002044:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002048:	f000 fdaa 	bl	8002ba0 <HAL_Delay>
     HAL_GPIO_TogglePin(STNDBY_GPIO_Port, STNDBY_Pin);
 800204c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002054:	f001 f948 	bl	80032e8 <HAL_GPIO_TogglePin>
     while (1)
      {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    	  PID_control();
 8002058:	f7ff fef2 	bl	8001e40 <PID_control>
    	  if(ReceivedLines > 0)
 800205c:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <main+0x100>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f9      	beq.n	8002058 <main+0xb8>
    	 	  {
    	 		  Parser_TakeLine(&ReceiveBuffer, &ReceivedData);
 8002064:	490f      	ldr	r1, [pc, #60]	@ (80020a4 <main+0x104>)
 8002066:	4810      	ldr	r0, [pc, #64]	@ (80020a8 <main+0x108>)
 8002068:	f7ff f832 	bl	80010d0 <Parser_TakeLine>
    	 		  Parser_Parse(ReceivedData,&REGIN);
 800206c:	4905      	ldr	r1, [pc, #20]	@ (8002084 <main+0xe4>)
 800206e:	480d      	ldr	r0, [pc, #52]	@ (80020a4 <main+0x104>)
 8002070:	f7ff fa8e 	bl	8001590 <Parser_Parse>

    	 		  ReceivedLines--;
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <main+0x100>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <main+0x100>)
 800207e:	701a      	strb	r2, [r3, #0]
    	  PID_control();
 8002080:	e7ea      	b.n	8002058 <main+0xb8>
 8002082:	bf00      	nop
 8002084:	200001f4 	.word	0x200001f4
 8002088:	3ca3d70a 	.word	0x3ca3d70a
 800208c:	43af0000 	.word	0x43af0000
 8002090:	200002dc 	.word	0x200002dc
 8002094:	20000414 	.word	0x20000414
 8002098:	2000037c 	.word	0x2000037c
 800209c:	20000330 	.word	0x20000330
 80020a0:	20000280 	.word	0x20000280
 80020a4:	20000260 	.word	0x20000260
 80020a8:	2000021c 	.word	0x2000021c

080020ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b094      	sub	sp, #80	@ 0x50
 80020b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	2238      	movs	r2, #56	@ 0x38
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f006 f9a9 	bl	8008412 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f001 f924 	bl	800331c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020de:	2340      	movs	r3, #64	@ 0x40
 80020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e2:	2302      	movs	r3, #2
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020e6:	2302      	movs	r3, #2
 80020e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80020ea:	2304      	movs	r3, #4
 80020ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80020ee:	2355      	movs	r3, #85	@ 0x55
 80020f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f2:	2302      	movs	r3, #2
 80020f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020fe:	f107 0318 	add.w	r3, r7, #24
 8002102:	4618      	mov	r0, r3
 8002104:	f001 f9be 	bl	8003484 <HAL_RCC_OscConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800210e:	f000 f84b 	bl	80021a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002112:	230f      	movs	r3, #15
 8002114:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002116:	2303      	movs	r3, #3
 8002118:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800211e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002124:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002128:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2104      	movs	r1, #4
 800212e:	4618      	mov	r0, r3
 8002130:	f001 fcba 	bl	8003aa8 <HAL_RCC_ClockConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800213a:	f000 f835 	bl	80021a8 <Error_Handler>
  }
}
 800213e:	bf00      	nop
 8002140:	3750      	adds	r7, #80	@ 0x50
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0f      	ldr	r2, [pc, #60]	@ (8002194 <HAL_UART_RxCpltCallback+0x4c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d117      	bne.n	800218a <HAL_UART_RxCpltCallback+0x42>
	{
				if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_UART_RxCpltCallback+0x50>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	480e      	ldr	r0, [pc, #56]	@ (800219c <HAL_UART_RxCpltCallback+0x54>)
 8002162:	f7fe ff61 	bl	8001028 <RB_Write>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_UART_RxCpltCallback+0x38>
				{
					if(RxData == ENDLINE)
 800216c:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <HAL_UART_RxCpltCallback+0x50>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b0a      	cmp	r3, #10
 8002172:	d105      	bne.n	8002180 <HAL_UART_RxCpltCallback+0x38>
					{
						ReceivedLines++;
 8002174:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <HAL_UART_RxCpltCallback+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_UART_RxCpltCallback+0x58>)
 800217e:	701a      	strb	r2, [r3, #0]
					}
				}
		    	HAL_UART_Receive_IT(&huart1,&RxData, 1);
 8002180:	2201      	movs	r2, #1
 8002182:	4905      	ldr	r1, [pc, #20]	@ (8002198 <HAL_UART_RxCpltCallback+0x50>)
 8002184:	4807      	ldr	r0, [pc, #28]	@ (80021a4 <HAL_UART_RxCpltCallback+0x5c>)
 8002186:	f003 f9eb 	bl	8005560 <HAL_UART_Receive_IT>
	}
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40013800 	.word	0x40013800
 8002198:	200002dc 	.word	0x200002dc
 800219c:	2000021c 	.word	0x2000021c
 80021a0:	20000280 	.word	0x20000280
 80021a4:	20000414 	.word	0x20000414

080021a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ac:	b672      	cpsid	i
}
 80021ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <Error_Handler+0x8>

080021b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_MspInit+0x44>)
 80021bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021be:	4a0e      	ldr	r2, [pc, #56]	@ (80021f8 <HAL_MspInit+0x44>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021c6:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <HAL_MspInit+0x44>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_MspInit+0x44>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <HAL_MspInit+0x44>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_MspInit+0x44>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021ea:	f001 f93b 	bl	8003464 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <NMI_Handler+0x4>

08002204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <MemManage_Handler+0x4>

08002214 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <UsageFault_Handler+0x4>

08002224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002252:	f000 fc87 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <USART1_IRQHandler+0x10>)
 8002262:	f003 f9c9 	bl	80055f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000414 	.word	0x20000414

08002270 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <USART2_IRQHandler+0x10>)
 8002276:	f003 f9bf 	bl	80055f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200004a8 	.word	0x200004a8

08002284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_kill>:

int _kill(int pid, int sig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800229e:	f006 f975 	bl	800858c <__errno>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2216      	movs	r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
  return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_exit>:

void _exit (int status)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffe7 	bl	8002294 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022c6:	bf00      	nop
 80022c8:	e7fd      	b.n	80022c6 <_exit+0x12>

080022ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e00a      	b.n	80022f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022dc:	f3af 8000 	nop.w
 80022e0:	4601      	mov	r1, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	60ba      	str	r2, [r7, #8]
 80022e8:	b2ca      	uxtb	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dbf0      	blt.n	80022dc <_read+0x12>
  }

  return len;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e009      	b.n	800232a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	60ba      	str	r2, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	dbf1      	blt.n	8002316 <_write+0x12>
  }
  return len;
 8002332:	687b      	ldr	r3, [r7, #4]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <_close>:

int _close(int file)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002364:	605a      	str	r2, [r3, #4]
  return 0;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_isatty>:

int _isatty(int file)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800237c:	2301      	movs	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f006 f8da 	bl	800858c <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20008000 	.word	0x20008000
 8002404:	00000400 	.word	0x00000400
 8002408:	200002e0 	.word	0x200002e0
 800240c:	20000690 	.word	0x20000690

08002410 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	@ (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002452:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 8002454:	4a20      	ldr	r2, [pc, #128]	@ (80024d8 <MX_TIM1_Init+0xa4>)
 8002456:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85;
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 800245a:	2255      	movs	r2, #85	@ 0x55
 800245c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245e:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 8002466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800246a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002472:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002478:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800247e:	4815      	ldr	r0, [pc, #84]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 8002480:	f001 ff1e 	bl	80042c0 <HAL_TIM_Base_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800248a:	f7ff fe8d 	bl	80021a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002492:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	4619      	mov	r1, r3
 800249a:	480e      	ldr	r0, [pc, #56]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 800249c:	f002 fa40 	bl	8004920 <HAL_TIM_ConfigClockSource>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80024a6:	f7ff fe7f 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4806      	ldr	r0, [pc, #24]	@ (80024d4 <MX_TIM1_Init+0xa0>)
 80024bc:	f002 ff7e 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80024c6:	f7ff fe6f 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200002e4 	.word	0x200002e4
 80024d8:	40012c00 	.word	0x40012c00

080024dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <MX_TIM2_Init+0x98>)
 80024fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002500:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 85;
 8002502:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <MX_TIM2_Init+0x98>)
 8002504:	2255      	movs	r2, #85	@ 0x55
 8002506:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <MX_TIM2_Init+0x98>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800250e:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <MX_TIM2_Init+0x98>)
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b17      	ldr	r3, [pc, #92]	@ (8002574 <MX_TIM2_Init+0x98>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <MX_TIM2_Init+0x98>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002522:	4814      	ldr	r0, [pc, #80]	@ (8002574 <MX_TIM2_Init+0x98>)
 8002524:	f001 fecc 	bl	80042c0 <HAL_TIM_Base_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800252e:	f7ff fe3b 	bl	80021a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4619      	mov	r1, r3
 800253e:	480d      	ldr	r0, [pc, #52]	@ (8002574 <MX_TIM2_Init+0x98>)
 8002540:	f002 f9ee 	bl	8004920 <HAL_TIM_ConfigClockSource>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800254a:	f7ff fe2d 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4806      	ldr	r0, [pc, #24]	@ (8002574 <MX_TIM2_Init+0x98>)
 800255c:	f002 ff2e 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002566:	f7ff fe1f 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000330 	.word	0x20000330

08002578 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08e      	sub	sp, #56	@ 0x38
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002598:	463b      	mov	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	615a      	str	r2, [r3, #20]
 80025a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025ac:	4a32      	ldr	r2, [pc, #200]	@ (8002678 <MX_TIM4_Init+0x100>)
 80025ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 85;
 80025b0:	4b30      	ldr	r3, [pc, #192]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025b2:	2255      	movs	r2, #85	@ 0x55
 80025b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025d0:	4828      	ldr	r0, [pc, #160]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025d2:	f001 fe75 	bl	80042c0 <HAL_TIM_Base_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80025dc:	f7ff fde4 	bl	80021a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ea:	4619      	mov	r1, r3
 80025ec:	4821      	ldr	r0, [pc, #132]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025ee:	f002 f997 	bl	8004920 <HAL_TIM_ConfigClockSource>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80025f8:	f7ff fdd6 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025fc:	481d      	ldr	r0, [pc, #116]	@ (8002674 <MX_TIM4_Init+0xfc>)
 80025fe:	f001 ff19 	bl	8004434 <HAL_TIM_PWM_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002608:	f7ff fdce 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	4816      	ldr	r0, [pc, #88]	@ (8002674 <MX_TIM4_Init+0xfc>)
 800261c:	f002 fece 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002626:	f7ff fdbf 	bl	80021a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262a:	2360      	movs	r3, #96	@ 0x60
 800262c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800263a:	463b      	mov	r3, r7
 800263c:	2200      	movs	r2, #0
 800263e:	4619      	mov	r1, r3
 8002640:	480c      	ldr	r0, [pc, #48]	@ (8002674 <MX_TIM4_Init+0xfc>)
 8002642:	f002 f859 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800264c:	f7ff fdac 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002650:	463b      	mov	r3, r7
 8002652:	2204      	movs	r2, #4
 8002654:	4619      	mov	r1, r3
 8002656:	4807      	ldr	r0, [pc, #28]	@ (8002674 <MX_TIM4_Init+0xfc>)
 8002658:	f002 f84e 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002662:	f7ff fda1 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002666:	4803      	ldr	r0, [pc, #12]	@ (8002674 <MX_TIM4_Init+0xfc>)
 8002668:	f000 f888 	bl	800277c <HAL_TIM_MspPostInit>

}
 800266c:	bf00      	nop
 800266e:	3738      	adds	r7, #56	@ 0x38
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2000037c 	.word	0x2000037c
 8002678:	40000800 	.word	0x40000800

0800267c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002680:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <MX_TIM16_Init+0x44>)
 8002682:	4a10      	ldr	r2, [pc, #64]	@ (80026c4 <MX_TIM16_Init+0x48>)
 8002684:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 85-1;
 8002686:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <MX_TIM16_Init+0x44>)
 8002688:	2254      	movs	r2, #84	@ 0x54
 800268a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268c:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <MX_TIM16_Init+0x44>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <MX_TIM16_Init+0x44>)
 8002694:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002698:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <MX_TIM16_Init+0x44>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80026a0:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <MX_TIM16_Init+0x44>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <MX_TIM16_Init+0x44>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80026ac:	4804      	ldr	r0, [pc, #16]	@ (80026c0 <MX_TIM16_Init+0x44>)
 80026ae:	f001 fe07 	bl	80042c0 <HAL_TIM_Base_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80026b8:	f7ff fd76 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200003c8 	.word	0x200003c8
 80026c4:	40014400 	.word	0x40014400

080026c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a25      	ldr	r2, [pc, #148]	@ (800276c <HAL_TIM_Base_MspInit+0xa4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d10c      	bne.n	80026f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026da:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	4a24      	ldr	r2, [pc, #144]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 80026e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80026f2:	e034      	b.n	800275e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fc:	d10c      	bne.n	8002718 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	4a1b      	ldr	r2, [pc, #108]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6593      	str	r3, [r2, #88]	@ 0x58
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
}
 8002716:	e022      	b.n	800275e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a15      	ldr	r2, [pc, #84]	@ (8002774 <HAL_TIM_Base_MspInit+0xac>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10c      	bne.n	800273c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	4a12      	ldr	r2, [pc, #72]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6593      	str	r3, [r2, #88]	@ 0x58
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
}
 800273a:	e010      	b.n	800275e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM16)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <HAL_TIM_Base_MspInit+0xb0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10b      	bne.n	800275e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 8002748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274a:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 800274c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002750:	6613      	str	r3, [r2, #96]	@ 0x60
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <HAL_TIM_Base_MspInit+0xa8>)
 8002754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40021000 	.word	0x40021000
 8002774:	40000800 	.word	0x40000800
 8002778:	40014400 	.word	0x40014400

0800277c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <HAL_TIM_MspPostInit+0x68>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d11d      	bne.n	80027da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a2:	4a11      	ldr	r2, [pc, #68]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027aa:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80027c8:	230a      	movs	r3, #10
 80027ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	4619      	mov	r1, r3
 80027d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027d6:	f000 fbd5 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40021000 	.word	0x40021000

080027ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f0:	4b22      	ldr	r3, [pc, #136]	@ (800287c <MX_USART1_UART_Init+0x90>)
 80027f2:	4a23      	ldr	r2, [pc, #140]	@ (8002880 <MX_USART1_UART_Init+0x94>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027f6:	4b21      	ldr	r3, [pc, #132]	@ (800287c <MX_USART1_UART_Init+0x90>)
 80027f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <MX_USART1_UART_Init+0x90>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <MX_USART1_UART_Init+0x90>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800280a:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <MX_USART1_UART_Init+0x90>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <MX_USART1_UART_Init+0x90>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b19      	ldr	r3, [pc, #100]	@ (800287c <MX_USART1_UART_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b17      	ldr	r3, [pc, #92]	@ (800287c <MX_USART1_UART_Init+0x90>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <MX_USART1_UART_Init+0x90>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002828:	4b14      	ldr	r3, [pc, #80]	@ (800287c <MX_USART1_UART_Init+0x90>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800282e:	4b13      	ldr	r3, [pc, #76]	@ (800287c <MX_USART1_UART_Init+0x90>)
 8002830:	2200      	movs	r2, #0
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002834:	4811      	ldr	r0, [pc, #68]	@ (800287c <MX_USART1_UART_Init+0x90>)
 8002836:	f002 fe43 	bl	80054c0 <HAL_UART_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002840:	f7ff fcb2 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002844:	2100      	movs	r1, #0
 8002846:	480d      	ldr	r0, [pc, #52]	@ (800287c <MX_USART1_UART_Init+0x90>)
 8002848:	f004 fdff 	bl	800744a <HAL_UARTEx_SetTxFifoThreshold>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002852:	f7ff fca9 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002856:	2100      	movs	r1, #0
 8002858:	4808      	ldr	r0, [pc, #32]	@ (800287c <MX_USART1_UART_Init+0x90>)
 800285a:	f004 fe34 	bl	80074c6 <HAL_UARTEx_SetRxFifoThreshold>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002864:	f7ff fca0 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002868:	4804      	ldr	r0, [pc, #16]	@ (800287c <MX_USART1_UART_Init+0x90>)
 800286a:	f004 fdb5 	bl	80073d8 <HAL_UARTEx_DisableFifoMode>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002874:	f7ff fc98 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000414 	.word	0x20000414
 8002880:	40013800 	.word	0x40013800

08002884 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002888:	4b22      	ldr	r3, [pc, #136]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 800288a:	4a23      	ldr	r2, [pc, #140]	@ (8002918 <MX_USART2_UART_Init+0x94>)
 800288c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800288e:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 8002890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002896:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800289c:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028aa:	220c      	movs	r2, #12
 80028ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ae:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b4:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ba:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028c0:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c6:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028cc:	4811      	ldr	r0, [pc, #68]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028ce:	f002 fdf7 	bl	80054c0 <HAL_UART_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028d8:	f7ff fc66 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028dc:	2100      	movs	r1, #0
 80028de:	480d      	ldr	r0, [pc, #52]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028e0:	f004 fdb3 	bl	800744a <HAL_UARTEx_SetTxFifoThreshold>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028ea:	f7ff fc5d 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ee:	2100      	movs	r1, #0
 80028f0:	4808      	ldr	r0, [pc, #32]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 80028f2:	f004 fde8 	bl	80074c6 <HAL_UARTEx_SetRxFifoThreshold>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028fc:	f7ff fc54 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002900:	4804      	ldr	r0, [pc, #16]	@ (8002914 <MX_USART2_UART_Init+0x90>)
 8002902:	f004 fd69 	bl	80073d8 <HAL_UARTEx_DisableFifoMode>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800290c:	f7ff fc4c 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200004a8 	.word	0x200004a8
 8002918:	40004400 	.word	0x40004400

0800291c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b09c      	sub	sp, #112	@ 0x70
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002934:	f107 0318 	add.w	r3, r7, #24
 8002938:	2244      	movs	r2, #68	@ 0x44
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f005 fd68 	bl	8008412 <memset>
  if(uartHandle->Instance==USART1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a45      	ldr	r2, [pc, #276]	@ (8002a5c <HAL_UART_MspInit+0x140>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d13e      	bne.n	80029ca <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800294c:	2301      	movs	r3, #1
 800294e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002954:	f107 0318 	add.w	r3, r7, #24
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fac1 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002964:	f7ff fc20 	bl	80021a8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002968:	4b3d      	ldr	r3, [pc, #244]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 800296a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 800296e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002972:	6613      	str	r3, [r2, #96]	@ 0x60
 8002974:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 8002976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002980:	4b37      	ldr	r3, [pc, #220]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002984:	4a36      	ldr	r2, [pc, #216]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800298c:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 800298e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002998:	23c0      	movs	r3, #192	@ 0xc0
 800299a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029a8:	2307      	movs	r3, #7
 80029aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80029b0:	4619      	mov	r1, r3
 80029b2:	482c      	ldr	r0, [pc, #176]	@ (8002a64 <HAL_UART_MspInit+0x148>)
 80029b4:	f000 fae6 	bl	8002f84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2100      	movs	r1, #0
 80029bc:	2025      	movs	r0, #37	@ 0x25
 80029be:	f000 f9ec 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029c2:	2025      	movs	r0, #37	@ 0x25
 80029c4:	f000 fa03 	bl	8002dce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029c8:	e043      	b.n	8002a52 <HAL_UART_MspInit+0x136>
  else if(uartHandle->Instance==USART2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a26      	ldr	r2, [pc, #152]	@ (8002a68 <HAL_UART_MspInit+0x14c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d13e      	bne.n	8002a52 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029d4:	2302      	movs	r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029dc:	f107 0318 	add.w	r3, r7, #24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fa7d 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80029ec:	f7ff fbdc 	bl	80021a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 80029f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80029fc:	4b18      	ldr	r3, [pc, #96]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0c:	4a14      	ldr	r2, [pc, #80]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_UART_MspInit+0x144>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002a20:	230c      	movs	r3, #12
 8002a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a30:	2307      	movs	r3, #7
 8002a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a3e:	f000 faa1 	bl	8002f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	2026      	movs	r0, #38	@ 0x26
 8002a48:	f000 f9a7 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a4c:	2026      	movs	r0, #38	@ 0x26
 8002a4e:	f000 f9be 	bl	8002dce <HAL_NVIC_EnableIRQ>
}
 8002a52:	bf00      	nop
 8002a54:	3770      	adds	r7, #112	@ 0x70
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40021000 	.word	0x40021000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	40004400 	.word	0x40004400

08002a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a6c:	480d      	ldr	r0, [pc, #52]	@ (8002aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a6e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a70:	f7ff fcce 	bl	8002410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a74:	480c      	ldr	r0, [pc, #48]	@ (8002aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a76:	490d      	ldr	r1, [pc, #52]	@ (8002aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a78:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <LoopForever+0xe>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ab8 <LoopForever+0x16>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002a9a:	f005 fd7d 	bl	8008598 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a9e:	f7ff fa7f 	bl	8001fa0 <main>

08002aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8002aa2:	e7fe      	b.n	8002aa2 <LoopForever>
  ldr   r0, =_estack
 8002aa4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aac:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002ab0:	0800a79c 	.word	0x0800a79c
  ldr r2, =_sbss
 8002ab4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002ab8:	2000068c 	.word	0x2000068c

08002abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002abc:	e7fe      	b.n	8002abc <ADC1_2_IRQHandler>

08002abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f000 f95b 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 f80e 	bl	8002af0 <HAL_InitTick>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	71fb      	strb	r3, [r7, #7]
 8002ade:	e001      	b.n	8002ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ae0:	f7ff fb68 	bl	80021b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002afc:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <HAL_InitTick+0x68>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d022      	beq.n	8002b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_InitTick+0x6c>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <HAL_InitTick+0x68>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f966 	bl	8002dea <HAL_SYSTICK_Config>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10f      	bne.n	8002b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	d809      	bhi.n	8002b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b32:	f000 f932 	bl	8002d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <HAL_InitTick+0x70>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e007      	b.n	8002b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e004      	b.n	8002b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	e001      	b.n	8002b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	20000004 	.word	0x20000004
 8002b60:	20000008 	.word	0x20000008

08002b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_IncTick+0x1c>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <HAL_IncTick+0x20>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a03      	ldr	r2, [pc, #12]	@ (8002b80 <HAL_IncTick+0x1c>)
 8002b74:	6013      	str	r3, [r2, #0]
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	2000053c 	.word	0x2000053c
 8002b84:	2000000c 	.word	0x2000000c

08002b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <HAL_GetTick+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000053c 	.word	0x2000053c

08002ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff ffee 	bl	8002b88 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d004      	beq.n	8002bc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_Delay+0x40>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bc4:	bf00      	nop
 8002bc6:	f7ff ffdf 	bl	8002b88 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d8f7      	bhi.n	8002bc6 <HAL_Delay+0x26>
  {
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000000c 	.word	0x2000000c

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4907      	ldr	r1, [pc, #28]	@ (8002c80 <__NVIC_EnableIRQ+0x38>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0a      	blt.n	8002cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	490c      	ldr	r1, [pc, #48]	@ (8002cd0 <__NVIC_SetPriority+0x4c>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cac:	e00a      	b.n	8002cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4908      	ldr	r1, [pc, #32]	@ (8002cd4 <__NVIC_SetPriority+0x50>)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	761a      	strb	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	bf28      	it	cs
 8002cf6:	2304      	movcs	r3, #4
 8002cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d902      	bls.n	8002d08 <NVIC_EncodePriority+0x30>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3b03      	subs	r3, #3
 8002d06:	e000      	b.n	8002d0a <NVIC_EncodePriority+0x32>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	4313      	orrs	r3, r2
         );
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	@ 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d50:	d301      	bcc.n	8002d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00f      	b.n	8002d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d56:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <SysTick_Config+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5e:	210f      	movs	r1, #15
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f7ff ff8e 	bl	8002c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <SysTick_Config+0x40>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6e:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <SysTick_Config+0x40>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff29 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002da8:	f7ff ff40 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002dac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	6978      	ldr	r0, [r7, #20]
 8002db4:	f7ff ff90 	bl	8002cd8 <NVIC_EncodePriority>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff5f 	bl	8002c84 <__NVIC_SetPriority>
}
 8002dc6:	bf00      	nop
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff33 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ffa4 	bl	8002d40 <SysTick_Config>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d005      	beq.n	8002e26 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e037      	b.n	8002e96 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 020e 	bic.w	r2, r2, #14
 8002e34:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e44:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f003 021f 	and.w	r2, r3, #31
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	2101      	movs	r1, #1
 8002e64:	fa01 f202 	lsl.w	r2, r1, r2
 8002e68:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e72:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e8a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e94:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d00d      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e047      	b.n	8002f78 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 020e 	bic.w	r2, r2, #14
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
    }
  }
  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f92:	e15a      	b.n	800324a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 814c 	beq.w	8003244 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d005      	beq.n	8002fc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d130      	bne.n	8003026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 0201 	and.w	r2, r3, #1
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b03      	cmp	r3, #3
 8003030:	d017      	beq.n	8003062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d123      	bne.n	80030b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	08da      	lsrs	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3208      	adds	r2, #8
 8003076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	220f      	movs	r2, #15
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	6939      	ldr	r1, [r7, #16]
 80030b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0203 	and.w	r2, r3, #3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80a6 	beq.w	8003244 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003268 <HAL_GPIO_Init+0x2e4>)
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003268 <HAL_GPIO_Init+0x2e4>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6613      	str	r3, [r2, #96]	@ 0x60
 8003104:	4b58      	ldr	r3, [pc, #352]	@ (8003268 <HAL_GPIO_Init+0x2e4>)
 8003106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003110:	4a56      	ldr	r2, [pc, #344]	@ (800326c <HAL_GPIO_Init+0x2e8>)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800313a:	d01f      	beq.n	800317c <HAL_GPIO_Init+0x1f8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a4c      	ldr	r2, [pc, #304]	@ (8003270 <HAL_GPIO_Init+0x2ec>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d019      	beq.n	8003178 <HAL_GPIO_Init+0x1f4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a4b      	ldr	r2, [pc, #300]	@ (8003274 <HAL_GPIO_Init+0x2f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <HAL_GPIO_Init+0x1f0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a4a      	ldr	r2, [pc, #296]	@ (8003278 <HAL_GPIO_Init+0x2f4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00d      	beq.n	8003170 <HAL_GPIO_Init+0x1ec>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a49      	ldr	r2, [pc, #292]	@ (800327c <HAL_GPIO_Init+0x2f8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <HAL_GPIO_Init+0x1e8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a48      	ldr	r2, [pc, #288]	@ (8003280 <HAL_GPIO_Init+0x2fc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_GPIO_Init+0x1e4>
 8003164:	2305      	movs	r3, #5
 8003166:	e00a      	b.n	800317e <HAL_GPIO_Init+0x1fa>
 8003168:	2306      	movs	r3, #6
 800316a:	e008      	b.n	800317e <HAL_GPIO_Init+0x1fa>
 800316c:	2304      	movs	r3, #4
 800316e:	e006      	b.n	800317e <HAL_GPIO_Init+0x1fa>
 8003170:	2303      	movs	r3, #3
 8003172:	e004      	b.n	800317e <HAL_GPIO_Init+0x1fa>
 8003174:	2302      	movs	r3, #2
 8003176:	e002      	b.n	800317e <HAL_GPIO_Init+0x1fa>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_GPIO_Init+0x1fa>
 800317c:	2300      	movs	r3, #0
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	f002 0203 	and.w	r2, r2, #3
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	4093      	lsls	r3, r2
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800318e:	4937      	ldr	r1, [pc, #220]	@ (800326c <HAL_GPIO_Init+0x2e8>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800319c:	4b39      	ldr	r3, [pc, #228]	@ (8003284 <HAL_GPIO_Init+0x300>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031c0:	4a30      	ldr	r2, [pc, #192]	@ (8003284 <HAL_GPIO_Init+0x300>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003284 <HAL_GPIO_Init+0x300>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ea:	4a26      	ldr	r2, [pc, #152]	@ (8003284 <HAL_GPIO_Init+0x300>)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031f0:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_GPIO_Init+0x300>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003214:	4a1b      	ldr	r2, [pc, #108]	@ (8003284 <HAL_GPIO_Init+0x300>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800321a:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <HAL_GPIO_Init+0x300>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800323e:	4a11      	ldr	r2, [pc, #68]	@ (8003284 <HAL_GPIO_Init+0x300>)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f ae9d 	bne.w	8002f94 <HAL_GPIO_Init+0x10>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40021000 	.word	0x40021000
 800326c:	40010000 	.word	0x40010000
 8003270:	48000400 	.word	0x48000400
 8003274:	48000800 	.word	0x48000800
 8003278:	48000c00 	.word	0x48000c00
 800327c:	48001000 	.word	0x48001000
 8003280:	48001400 	.word	0x48001400
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e001      	b.n	80032aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
 80032c4:	4613      	mov	r3, r2
 80032c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032c8:	787b      	ldrb	r3, [r7, #1]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	43d9      	mvns	r1, r3
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	400b      	ands	r3, r1
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d141      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800332a:	4b4b      	ldr	r3, [pc, #300]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003336:	d131      	bne.n	800339c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003338:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800333e:	4a46      	ldr	r2, [pc, #280]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003348:	4b43      	ldr	r3, [pc, #268]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003350:	4a41      	ldr	r2, [pc, #260]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003356:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003358:	4b40      	ldr	r3, [pc, #256]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2232      	movs	r2, #50	@ 0x32
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	4a3f      	ldr	r2, [pc, #252]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	0c9b      	lsrs	r3, r3, #18
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800336e:	e002      	b.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3b01      	subs	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003376:	4b38      	ldr	r3, [pc, #224]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003382:	d102      	bne.n	800338a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f2      	bne.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800338a:	4b33      	ldr	r3, [pc, #204]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003396:	d158      	bne.n	800344a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e057      	b.n	800344c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800339c:	4b2e      	ldr	r3, [pc, #184]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033ac:	e04d      	b.n	800344a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b4:	d141      	bne.n	800343a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033b6:	4b28      	ldr	r3, [pc, #160]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c2:	d131      	bne.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033c4:	4b24      	ldr	r3, [pc, #144]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ca:	4a23      	ldr	r2, [pc, #140]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d4:	4b20      	ldr	r3, [pc, #128]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033e4:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2232      	movs	r2, #50	@ 0x32
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	0c9b      	lsrs	r3, r3, #18
 80033f6:	3301      	adds	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033fa:	e002      	b.n	8003402 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3b01      	subs	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340e:	d102      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f2      	bne.n	80033fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003422:	d112      	bne.n	800344a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e011      	b.n	800344c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003438:	e007      	b.n	800344a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003442:	4a05      	ldr	r2, [pc, #20]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003448:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40007000 	.word	0x40007000
 800345c:	20000004 	.word	0x20000004
 8003460:	431bde83 	.word	0x431bde83

08003464 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800346e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003472:	6093      	str	r3, [r2, #8]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40007000 	.word	0x40007000

08003484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e2fe      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d075      	beq.n	800358e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a2:	4b97      	ldr	r3, [pc, #604]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ac:	4b94      	ldr	r3, [pc, #592]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	d102      	bne.n	80034c2 <HAL_RCC_OscConfig+0x3e>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d002      	beq.n	80034c8 <HAL_RCC_OscConfig+0x44>
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d10b      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d05b      	beq.n	800358c <HAL_RCC_OscConfig+0x108>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d157      	bne.n	800358c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e2d9      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e8:	d106      	bne.n	80034f8 <HAL_RCC_OscConfig+0x74>
 80034ea:	4b85      	ldr	r3, [pc, #532]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a84      	ldr	r2, [pc, #528]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e01d      	b.n	8003534 <HAL_RCC_OscConfig+0xb0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x98>
 8003502:	4b7f      	ldr	r3, [pc, #508]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7e      	ldr	r2, [pc, #504]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b7c      	ldr	r3, [pc, #496]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7b      	ldr	r2, [pc, #492]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0xb0>
 800351c:	4b78      	ldr	r3, [pc, #480]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a77      	ldr	r2, [pc, #476]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b75      	ldr	r3, [pc, #468]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a74      	ldr	r2, [pc, #464]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800352e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7ff fb24 	bl	8002b88 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7ff fb20 	bl	8002b88 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	@ 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e29e      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003556:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0xc0>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7ff fb10 	bl	8002b88 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356c:	f7ff fb0c 	bl	8002b88 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	@ 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e28a      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800357e:	4b60      	ldr	r3, [pc, #384]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0xe8>
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d075      	beq.n	8003686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359a:	4b59      	ldr	r3, [pc, #356]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a4:	4b56      	ldr	r3, [pc, #344]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d102      	bne.n	80035ba <HAL_RCC_OscConfig+0x136>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_OscConfig+0x13c>
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11f      	bne.n	8003600 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_OscConfig+0x154>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e25d      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d8:	4b49      	ldr	r3, [pc, #292]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	061b      	lsls	r3, r3, #24
 80035e6:	4946      	ldr	r1, [pc, #280]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035ec:	4b45      	ldr	r3, [pc, #276]	@ (8003704 <HAL_RCC_OscConfig+0x280>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fa7d 	bl	8002af0 <HAL_InitTick>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d043      	beq.n	8003684 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e249      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d023      	beq.n	8003650 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b3d      	ldr	r3, [pc, #244]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3c      	ldr	r2, [pc, #240]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7ff fab8 	bl	8002b88 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361c:	f7ff fab4 	bl	8002b88 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e232      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362e:	4b34      	ldr	r3, [pc, #208]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363a:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	061b      	lsls	r3, r3, #24
 8003648:	492d      	ldr	r1, [pc, #180]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800364a:	4313      	orrs	r3, r2
 800364c:	604b      	str	r3, [r1, #4]
 800364e:	e01a      	b.n	8003686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003650:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2a      	ldr	r2, [pc, #168]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003656:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800365a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7ff fa94 	bl	8002b88 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003664:	f7ff fa90 	bl	8002b88 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e20e      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003676:	4b22      	ldr	r3, [pc, #136]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x1e0>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d041      	beq.n	8003716 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01c      	beq.n	80036d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369a:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 800369c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a0:	4a17      	ldr	r2, [pc, #92]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7ff fa6d 	bl	8002b88 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b2:	f7ff fa69 	bl	8002b88 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e1e7      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0ef      	beq.n	80036b2 <HAL_RCC_OscConfig+0x22e>
 80036d2:	e020      	b.n	8003716 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036da:	4a09      	ldr	r2, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7ff fa50 	bl	8002b88 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ea:	e00d      	b.n	8003708 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ec:	f7ff fa4c 	bl	8002b88 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d906      	bls.n	8003708 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e1ca      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003708:	4b8c      	ldr	r3, [pc, #560]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ea      	bne.n	80036ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a6 	beq.w	8003870 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003728:	4b84      	ldr	r3, [pc, #528]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_OscConfig+0x2b4>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x2b6>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	4b7f      	ldr	r3, [pc, #508]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003742:	4a7e      	ldr	r2, [pc, #504]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003748:	6593      	str	r3, [r2, #88]	@ 0x58
 800374a:	4b7c      	ldr	r3, [pc, #496]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003756:	2301      	movs	r3, #1
 8003758:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375a:	4b79      	ldr	r3, [pc, #484]	@ (8003940 <HAL_RCC_OscConfig+0x4bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d118      	bne.n	8003798 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003766:	4b76      	ldr	r3, [pc, #472]	@ (8003940 <HAL_RCC_OscConfig+0x4bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a75      	ldr	r2, [pc, #468]	@ (8003940 <HAL_RCC_OscConfig+0x4bc>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7ff fa09 	bl	8002b88 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377a:	f7ff fa05 	bl	8002b88 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e183      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378c:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <HAL_RCC_OscConfig+0x4bc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d108      	bne.n	80037b2 <HAL_RCC_OscConfig+0x32e>
 80037a0:	4b66      	ldr	r3, [pc, #408]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	4a65      	ldr	r2, [pc, #404]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b0:	e024      	b.n	80037fc <HAL_RCC_OscConfig+0x378>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d110      	bne.n	80037dc <HAL_RCC_OscConfig+0x358>
 80037ba:	4b60      	ldr	r3, [pc, #384]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c0:	4a5e      	ldr	r2, [pc, #376]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ca:	4b5c      	ldr	r3, [pc, #368]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d0:	4a5a      	ldr	r2, [pc, #360]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037da:	e00f      	b.n	80037fc <HAL_RCC_OscConfig+0x378>
 80037dc:	4b57      	ldr	r3, [pc, #348]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	4a56      	ldr	r2, [pc, #344]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ec:	4b53      	ldr	r3, [pc, #332]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	4a52      	ldr	r2, [pc, #328]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7ff f9c0 	bl	8002b88 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7ff f9bc 	bl	8002b88 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e138      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003822:	4b46      	ldr	r3, [pc, #280]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ed      	beq.n	800380c <HAL_RCC_OscConfig+0x388>
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7ff f9a9 	bl	8002b88 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7ff f9a5 	bl	8002b88 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e121      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003850:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ed      	bne.n	800383a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800385e:	7ffb      	ldrb	r3, [r7, #31]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b35      	ldr	r3, [pc, #212]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003868:	4a34      	ldr	r2, [pc, #208]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d03c      	beq.n	80038f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01c      	beq.n	80038be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003884:	4b2d      	ldr	r3, [pc, #180]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 8003886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800388a:	4a2c      	ldr	r2, [pc, #176]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7ff f978 	bl	8002b88 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800389c:	f7ff f974 	bl	8002b88 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0f2      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ae:	4b23      	ldr	r3, [pc, #140]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80038b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ef      	beq.n	800389c <HAL_RCC_OscConfig+0x418>
 80038bc:	e01b      	b.n	80038f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038be:	4b1f      	ldr	r3, [pc, #124]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80038c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038c4:	4a1d      	ldr	r2, [pc, #116]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ce:	f7ff f95b 	bl	8002b88 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038d6:	f7ff f957 	bl	8002b88 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0d5      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038e8:	4b14      	ldr	r3, [pc, #80]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ef      	bne.n	80038d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80c9 	beq.w	8003a92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003900:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b0c      	cmp	r3, #12
 800390a:	f000 8083 	beq.w	8003a14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d15e      	bne.n	80039d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b09      	ldr	r3, [pc, #36]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a08      	ldr	r2, [pc, #32]	@ (800393c <HAL_RCC_OscConfig+0x4b8>)
 800391c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7ff f931 	bl	8002b88 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003928:	e00c      	b.n	8003944 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392a:	f7ff f92d 	bl	8002b88 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d905      	bls.n	8003944 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0ab      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003944:	4b55      	ldr	r3, [pc, #340]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ec      	bne.n	800392a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003950:	4b52      	ldr	r3, [pc, #328]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4b52      	ldr	r3, [pc, #328]	@ (8003aa0 <HAL_RCC_OscConfig+0x61c>)
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6a11      	ldr	r1, [r2, #32]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003960:	3a01      	subs	r2, #1
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	4311      	orrs	r1, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800396a:	0212      	lsls	r2, r2, #8
 800396c:	4311      	orrs	r1, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003972:	0852      	lsrs	r2, r2, #1
 8003974:	3a01      	subs	r2, #1
 8003976:	0552      	lsls	r2, r2, #21
 8003978:	4311      	orrs	r1, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800397e:	0852      	lsrs	r2, r2, #1
 8003980:	3a01      	subs	r2, #1
 8003982:	0652      	lsls	r2, r2, #25
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800398a:	06d2      	lsls	r2, r2, #27
 800398c:	430a      	orrs	r2, r1
 800398e:	4943      	ldr	r1, [pc, #268]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003994:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a40      	ldr	r2, [pc, #256]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 800399a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a0:	4b3e      	ldr	r3, [pc, #248]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a3d      	ldr	r2, [pc, #244]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7ff f8ec 	bl	8002b88 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7ff f8e8 	bl	8002b88 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e066      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c6:	4b35      	ldr	r3, [pc, #212]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x530>
 80039d2:	e05e      	b.n	8003a92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d4:	4b31      	ldr	r3, [pc, #196]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a30      	ldr	r2, [pc, #192]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 80039da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7ff f8d2 	bl	8002b88 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7ff f8ce 	bl	8002b88 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04c      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fa:	4b28      	ldr	r3, [pc, #160]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a06:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	4924      	ldr	r1, [pc, #144]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 8003a0c:	4b25      	ldr	r3, [pc, #148]	@ (8003aa4 <HAL_RCC_OscConfig+0x620>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
 8003a12:	e03e      	b.n	8003a92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e039      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a20:	4b1e      	ldr	r3, [pc, #120]	@ (8003a9c <HAL_RCC_OscConfig+0x618>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 0203 	and.w	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d12c      	bne.n	8003a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d123      	bne.n	8003a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d11b      	bne.n	8003a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d113      	bne.n	8003a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	3b01      	subs	r3, #1
 8003a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	019f800c 	.word	0x019f800c
 8003aa4:	feeefffc 	.word	0xfeeefffc

08003aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e11e      	b.n	8003cfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b91      	ldr	r3, [pc, #580]	@ (8003d08 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d910      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b8e      	ldr	r3, [pc, #568]	@ (8003d08 <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 020f 	bic.w	r2, r3, #15
 8003ad6:	498c      	ldr	r1, [pc, #560]	@ (8003d08 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b8a      	ldr	r3, [pc, #552]	@ (8003d08 <HAL_RCC_ClockConfig+0x260>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e106      	b.n	8003cfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d073      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d129      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b04:	4b81      	ldr	r3, [pc, #516]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0f4      	b.n	8003cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b14:	f000 f99e 	bl	8003e54 <RCC_GetSysClockFreqFromPLLSource>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8003d10 <HAL_RCC_ClockConfig+0x268>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d93f      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b22:	4b7a      	ldr	r3, [pc, #488]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d033      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d12f      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b42:	4b72      	ldr	r3, [pc, #456]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b4a:	4a70      	ldr	r2, [pc, #448]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e024      	b.n	8003ba2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b60:	4b6a      	ldr	r3, [pc, #424]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0c6      	b.n	8003cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b70:	4b66      	ldr	r3, [pc, #408]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0be      	b.n	8003cfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b80:	f000 f8ce 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a61      	ldr	r2, [pc, #388]	@ (8003d10 <HAL_RCC_ClockConfig+0x268>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d909      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b96:	4a5d      	ldr	r2, [pc, #372]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b9e:	2380      	movs	r3, #128	@ 0x80
 8003ba0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4957      	ldr	r1, [pc, #348]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fe ffe8 	bl	8002b88 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fe ffe4 	bl	8002b88 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e095      	b.n	8003cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 020c 	and.w	r2, r3, #12
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1eb      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d023      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bfc:	4b43      	ldr	r3, [pc, #268]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4a42      	ldr	r2, [pc, #264]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003c02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c14:	4b3d      	ldr	r3, [pc, #244]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c24:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4936      	ldr	r1, [pc, #216]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b80      	cmp	r3, #128	@ 0x80
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c3e:	4b33      	ldr	r3, [pc, #204]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4a32      	ldr	r2, [pc, #200]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003c44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d08 <HAL_RCC_ClockConfig+0x260>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d21d      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c58:	4b2b      	ldr	r3, [pc, #172]	@ (8003d08 <HAL_RCC_ClockConfig+0x260>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 020f 	bic.w	r2, r3, #15
 8003c60:	4929      	ldr	r1, [pc, #164]	@ (8003d08 <HAL_RCC_ClockConfig+0x260>)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c68:	f7fe ff8e 	bl	8002b88 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fe ff8a 	bl	8002b88 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e03b      	b.n	8003cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b20      	ldr	r3, [pc, #128]	@ (8003d08 <HAL_RCC_ClockConfig+0x260>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1ed      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4917      	ldr	r1, [pc, #92]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cbe:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	490f      	ldr	r1, [pc, #60]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cd2:	f000 f825 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d0c <HAL_RCC_ClockConfig+0x264>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	490c      	ldr	r1, [pc, #48]	@ (8003d14 <HAL_RCC_ClockConfig+0x26c>)
 8003ce4:	5ccb      	ldrb	r3, [r1, r3]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <HAL_RCC_ClockConfig+0x270>)
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <HAL_RCC_ClockConfig+0x274>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fefa 	bl	8002af0 <HAL_InitTick>
 8003cfc:	4603      	mov	r3, r0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	04c4b400 	.word	0x04c4b400
 8003d14:	0800a334 	.word	0x0800a334
 8003d18:	20000004 	.word	0x20000004
 8003d1c:	20000008 	.word	0x20000008

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d26:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d102      	bne.n	8003d38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d32:	4b2a      	ldr	r3, [pc, #168]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	e047      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d38:	4b27      	ldr	r3, [pc, #156]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d44:	4b26      	ldr	r3, [pc, #152]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	e03e      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d4a:	4b23      	ldr	r3, [pc, #140]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d136      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d56:	4b20      	ldr	r3, [pc, #128]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d60:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d10c      	bne.n	8003d8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d74:	4a1a      	ldr	r2, [pc, #104]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	4a16      	ldr	r2, [pc, #88]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7e:	68d2      	ldr	r2, [r2, #12]
 8003d80:	0a12      	lsrs	r2, r2, #8
 8003d82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	617b      	str	r3, [r7, #20]
      break;
 8003d8c:	e00c      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d8e:	4a13      	ldr	r2, [pc, #76]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	4a10      	ldr	r2, [pc, #64]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d98:	68d2      	ldr	r2, [r2, #12]
 8003d9a:	0a12      	lsrs	r2, r2, #8
 8003d9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
      break;
 8003da6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0e5b      	lsrs	r3, r3, #25
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	3301      	adds	r3, #1
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003dc8:	693b      	ldr	r3, [r7, #16]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	00f42400 	.word	0x00f42400
 8003de0:	007a1200 	.word	0x007a1200

08003de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de8:	4b03      	ldr	r3, [pc, #12]	@ (8003df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000004 	.word	0x20000004

08003dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e00:	f7ff fff0 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4904      	ldr	r1, [pc, #16]	@ (8003e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	0800a344 	.word	0x0800a344

08003e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e2c:	f7ff ffda 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0adb      	lsrs	r3, r3, #11
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4904      	ldr	r1, [pc, #16]	@ (8003e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800a344 	.word	0x0800a344

08003e54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d10c      	bne.n	8003e92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e78:	4a17      	ldr	r2, [pc, #92]	@ (8003ed8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	4a14      	ldr	r2, [pc, #80]	@ (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e82:	68d2      	ldr	r2, [r2, #12]
 8003e84:	0a12      	lsrs	r2, r2, #8
 8003e86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	617b      	str	r3, [r7, #20]
    break;
 8003e90:	e00c      	b.n	8003eac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e92:	4a12      	ldr	r2, [pc, #72]	@ (8003edc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	0a12      	lsrs	r2, r2, #8
 8003ea0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ea4:	fb02 f303 	mul.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
    break;
 8003eaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eac:	4b09      	ldr	r3, [pc, #36]	@ (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	0e5b      	lsrs	r3, r3, #25
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ec6:	687b      	ldr	r3, [r7, #4]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	007a1200 	.word	0x007a1200
 8003edc:	00f42400 	.word	0x00f42400

08003ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ee8:	2300      	movs	r3, #0
 8003eea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eec:	2300      	movs	r3, #0
 8003eee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8098 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b43      	ldr	r3, [pc, #268]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	4b40      	ldr	r3, [pc, #256]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f12:	4a3f      	ldr	r2, [pc, #252]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f26:	2301      	movs	r3, #1
 8003f28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a39      	ldr	r2, [pc, #228]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f36:	f7fe fe27 	bl	8002b88 <HAL_GetTick>
 8003f3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f3c:	e009      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3e:	f7fe fe23 	bl	8002b88 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d902      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f50:	e005      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f52:	4b30      	ldr	r3, [pc, #192]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ef      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d159      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f64:	4b2a      	ldr	r3, [pc, #168]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01e      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d019      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f80:	4b23      	ldr	r3, [pc, #140]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f8c:	4b20      	ldr	r3, [pc, #128]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	4a1f      	ldr	r2, [pc, #124]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fac:	4a18      	ldr	r2, [pc, #96]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fe fde3 	bl	8002b88 <HAL_GetTick>
 8003fc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc4:	e00b      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fe fddf 	bl	8002b88 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d902      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	74fb      	strb	r3, [r7, #19]
            break;
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fde:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ec      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff2:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	4903      	ldr	r1, [pc, #12]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004008:	e008      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	74bb      	strb	r3, [r7, #18]
 800400e:	e005      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004010:	40021000 	.word	0x40021000
 8004014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800401c:	7c7b      	ldrb	r3, [r7, #17]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004022:	4ba6      	ldr	r3, [pc, #664]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	4aa5      	ldr	r2, [pc, #660]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800403a:	4ba0      	ldr	r3, [pc, #640]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004040:	f023 0203 	bic.w	r2, r3, #3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	499c      	ldr	r1, [pc, #624]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800405c:	4b97      	ldr	r3, [pc, #604]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f023 020c 	bic.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	4994      	ldr	r1, [pc, #592]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800407e:	4b8f      	ldr	r3, [pc, #572]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004084:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	498b      	ldr	r1, [pc, #556]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040a0:	4b86      	ldr	r3, [pc, #536]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	4983      	ldr	r1, [pc, #524]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c2:	4b7e      	ldr	r3, [pc, #504]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	497a      	ldr	r1, [pc, #488]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e4:	4b75      	ldr	r3, [pc, #468]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	4972      	ldr	r1, [pc, #456]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004106:	4b6d      	ldr	r3, [pc, #436]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4969      	ldr	r1, [pc, #420]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004128:	4b64      	ldr	r3, [pc, #400]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4961      	ldr	r1, [pc, #388]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414a:	4b5c      	ldr	r3, [pc, #368]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	4958      	ldr	r1, [pc, #352]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d015      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416c:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	4950      	ldr	r1, [pc, #320]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800418a:	d105      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800418c:	4b4b      	ldr	r3, [pc, #300]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4a4a      	ldr	r2, [pc, #296]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004196:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d015      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041a4:	4b45      	ldr	r3, [pc, #276]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	4942      	ldr	r1, [pc, #264]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041c2:	d105      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c4:	4b3d      	ldr	r3, [pc, #244]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4a3c      	ldr	r2, [pc, #240]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d015      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041dc:	4b37      	ldr	r3, [pc, #220]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	4934      	ldr	r1, [pc, #208]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041fa:	d105      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041fc:	4b2f      	ldr	r3, [pc, #188]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a2e      	ldr	r2, [pc, #184]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004206:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d015      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004214:	4b29      	ldr	r3, [pc, #164]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004222:	4926      	ldr	r1, [pc, #152]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004232:	d105      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004234:	4b21      	ldr	r3, [pc, #132]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a20      	ldr	r2, [pc, #128]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800423e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d015      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800424c:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425a:	4918      	ldr	r1, [pc, #96]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800426a:	d105      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800426c:	4b13      	ldr	r3, [pc, #76]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004276:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004284:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004292:	490a      	ldr	r1, [pc, #40]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042a2:	d105      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a04      	ldr	r2, [pc, #16]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000

080042c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e049      	b.n	8004366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fe f9ee 	bl	80026c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f000 fc08 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d001      	beq.n	8004388 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e042      	b.n	800440e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a21      	ldr	r2, [pc, #132]	@ (800441c <HAL_TIM_Base_Start+0xac>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d018      	beq.n	80043cc <HAL_TIM_Base_Start+0x5c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a2:	d013      	beq.n	80043cc <HAL_TIM_Base_Start+0x5c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004420 <HAL_TIM_Base_Start+0xb0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_TIM_Base_Start+0x5c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004424 <HAL_TIM_Base_Start+0xb4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_TIM_Base_Start+0x5c>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004428 <HAL_TIM_Base_Start+0xb8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_TIM_Base_Start+0x5c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a19      	ldr	r2, [pc, #100]	@ (800442c <HAL_TIM_Base_Start+0xbc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d115      	bne.n	80043f8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	4b17      	ldr	r3, [pc, #92]	@ (8004430 <HAL_TIM_Base_Start+0xc0>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d015      	beq.n	800440a <HAL_TIM_Base_Start+0x9a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e4:	d011      	beq.n	800440a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	e008      	b.n	800440a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e000      	b.n	800440c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40013400 	.word	0x40013400
 800442c:	40014000 	.word	0x40014000
 8004430:	00010007 	.word	0x00010007

08004434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e049      	b.n	80044da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f841 	bl	80044e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f000 fb4e 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <HAL_TIM_PWM_Start+0x24>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	e03c      	b.n	8004596 <HAL_TIM_PWM_Start+0x9e>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d109      	bne.n	8004536 <HAL_TIM_PWM_Start+0x3e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	bf14      	ite	ne
 800452e:	2301      	movne	r3, #1
 8004530:	2300      	moveq	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	e02f      	b.n	8004596 <HAL_TIM_PWM_Start+0x9e>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d109      	bne.n	8004550 <HAL_TIM_PWM_Start+0x58>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	bf14      	ite	ne
 8004548:	2301      	movne	r3, #1
 800454a:	2300      	moveq	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e022      	b.n	8004596 <HAL_TIM_PWM_Start+0x9e>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b0c      	cmp	r3, #12
 8004554:	d109      	bne.n	800456a <HAL_TIM_PWM_Start+0x72>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	e015      	b.n	8004596 <HAL_TIM_PWM_Start+0x9e>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b10      	cmp	r3, #16
 800456e:	d109      	bne.n	8004584 <HAL_TIM_PWM_Start+0x8c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e008      	b.n	8004596 <HAL_TIM_PWM_Start+0x9e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e097      	b.n	80046ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start+0xb6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045ac:	e023      	b.n	80045f6 <HAL_TIM_PWM_Start+0xfe>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start+0xc6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045bc:	e01b      	b.n	80045f6 <HAL_TIM_PWM_Start+0xfe>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start+0xd6>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045cc:	e013      	b.n	80045f6 <HAL_TIM_PWM_Start+0xfe>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Start+0xe6>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045dc:	e00b      	b.n	80045f6 <HAL_TIM_PWM_Start+0xfe>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_PWM_Start+0xf6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ec:	e003      	b.n	80045f6 <HAL_TIM_PWM_Start+0xfe>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2201      	movs	r2, #1
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 feb6 	bl	8005370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a33      	ldr	r2, [pc, #204]	@ (80046d8 <HAL_TIM_PWM_Start+0x1e0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_TIM_PWM_Start+0x13e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a32      	ldr	r2, [pc, #200]	@ (80046dc <HAL_TIM_PWM_Start+0x1e4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_TIM_PWM_Start+0x13e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a30      	ldr	r2, [pc, #192]	@ (80046e0 <HAL_TIM_PWM_Start+0x1e8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_TIM_PWM_Start+0x13e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2f      	ldr	r2, [pc, #188]	@ (80046e4 <HAL_TIM_PWM_Start+0x1ec>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_TIM_PWM_Start+0x13e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2d      	ldr	r2, [pc, #180]	@ (80046e8 <HAL_TIM_PWM_Start+0x1f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d101      	bne.n	800463a <HAL_TIM_PWM_Start+0x142>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <HAL_TIM_PWM_Start+0x144>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800464e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a20      	ldr	r2, [pc, #128]	@ (80046d8 <HAL_TIM_PWM_Start+0x1e0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d018      	beq.n	800468c <HAL_TIM_PWM_Start+0x194>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004662:	d013      	beq.n	800468c <HAL_TIM_PWM_Start+0x194>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a20      	ldr	r2, [pc, #128]	@ (80046ec <HAL_TIM_PWM_Start+0x1f4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_TIM_PWM_Start+0x194>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1f      	ldr	r2, [pc, #124]	@ (80046f0 <HAL_TIM_PWM_Start+0x1f8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_TIM_PWM_Start+0x194>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a17      	ldr	r2, [pc, #92]	@ (80046dc <HAL_TIM_PWM_Start+0x1e4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_TIM_PWM_Start+0x194>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a16      	ldr	r2, [pc, #88]	@ (80046e0 <HAL_TIM_PWM_Start+0x1e8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d115      	bne.n	80046b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	4b18      	ldr	r3, [pc, #96]	@ (80046f4 <HAL_TIM_PWM_Start+0x1fc>)
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b06      	cmp	r3, #6
 800469c:	d015      	beq.n	80046ca <HAL_TIM_PWM_Start+0x1d2>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a4:	d011      	beq.n	80046ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e008      	b.n	80046ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e000      	b.n	80046cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40013400 	.word	0x40013400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	00010007 	.word	0x00010007

080046f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004712:	2302      	movs	r3, #2
 8004714:	e0ff      	b.n	8004916 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b14      	cmp	r3, #20
 8004722:	f200 80f0 	bhi.w	8004906 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004726:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004781 	.word	0x08004781
 8004730:	08004907 	.word	0x08004907
 8004734:	08004907 	.word	0x08004907
 8004738:	08004907 	.word	0x08004907
 800473c:	080047c1 	.word	0x080047c1
 8004740:	08004907 	.word	0x08004907
 8004744:	08004907 	.word	0x08004907
 8004748:	08004907 	.word	0x08004907
 800474c:	08004803 	.word	0x08004803
 8004750:	08004907 	.word	0x08004907
 8004754:	08004907 	.word	0x08004907
 8004758:	08004907 	.word	0x08004907
 800475c:	08004843 	.word	0x08004843
 8004760:	08004907 	.word	0x08004907
 8004764:	08004907 	.word	0x08004907
 8004768:	08004907 	.word	0x08004907
 800476c:	08004885 	.word	0x08004885
 8004770:	08004907 	.word	0x08004907
 8004774:	08004907 	.word	0x08004907
 8004778:	08004907 	.word	0x08004907
 800477c:	080048c5 	.word	0x080048c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fa60 	bl	8004c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0208 	orr.w	r2, r2, #8
 800479a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0204 	bic.w	r2, r2, #4
 80047aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6999      	ldr	r1, [r3, #24]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	619a      	str	r2, [r3, #24]
      break;
 80047be:	e0a5      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fad0 	bl	8004d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	021a      	lsls	r2, r3, #8
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	619a      	str	r2, [r3, #24]
      break;
 8004800:	e084      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fb39 	bl	8004e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0208 	orr.w	r2, r2, #8
 800481c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0204 	bic.w	r2, r2, #4
 800482c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69d9      	ldr	r1, [r3, #28]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	61da      	str	r2, [r3, #28]
      break;
 8004840:	e064      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fba1 	bl	8004f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800485c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800486c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	021a      	lsls	r2, r3, #8
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	61da      	str	r2, [r3, #28]
      break;
 8004882:	e043      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fc0a 	bl	80050a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0208 	orr.w	r2, r2, #8
 800489e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0204 	bic.w	r2, r2, #4
 80048ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048c2:	e023      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fc4e 	bl	800516c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	021a      	lsls	r2, r3, #8
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004904:	e002      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
      break;
 800490a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop

08004920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_TIM_ConfigClockSource+0x1c>
 8004938:	2302      	movs	r3, #2
 800493a:	e0de      	b.n	8004afa <HAL_TIM_ConfigClockSource+0x1da>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800495a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800495e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a63      	ldr	r2, [pc, #396]	@ (8004b04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	f000 80a9 	beq.w	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 800497c:	4a61      	ldr	r2, [pc, #388]	@ (8004b04 <HAL_TIM_ConfigClockSource+0x1e4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	f200 80ae 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004984:	4a60      	ldr	r2, [pc, #384]	@ (8004b08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	f000 80a1 	beq.w	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 800498c:	4a5e      	ldr	r2, [pc, #376]	@ (8004b08 <HAL_TIM_ConfigClockSource+0x1e8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	f200 80a6 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004994:	4a5d      	ldr	r2, [pc, #372]	@ (8004b0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004996:	4293      	cmp	r3, r2
 8004998:	f000 8099 	beq.w	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 800499c:	4a5b      	ldr	r2, [pc, #364]	@ (8004b0c <HAL_TIM_ConfigClockSource+0x1ec>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	f200 809e 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 80049a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004b10 <HAL_TIM_ConfigClockSource+0x1f0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	f000 8091 	beq.w	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 80049ac:	4a58      	ldr	r2, [pc, #352]	@ (8004b10 <HAL_TIM_ConfigClockSource+0x1f0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	f200 8096 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 80049b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049b8:	f000 8089 	beq.w	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 80049bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049c0:	f200 808e 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c8:	d03e      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0x128>
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ce:	f200 8087 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d6:	f000 8086 	beq.w	8004ae6 <HAL_TIM_ConfigClockSource+0x1c6>
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049de:	d87f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 80049e0:	2b70      	cmp	r3, #112	@ 0x70
 80049e2:	d01a      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xfa>
 80049e4:	2b70      	cmp	r3, #112	@ 0x70
 80049e6:	d87b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 80049e8:	2b60      	cmp	r3, #96	@ 0x60
 80049ea:	d050      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x16e>
 80049ec:	2b60      	cmp	r3, #96	@ 0x60
 80049ee:	d877      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 80049f0:	2b50      	cmp	r3, #80	@ 0x50
 80049f2:	d03c      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x14e>
 80049f4:	2b50      	cmp	r3, #80	@ 0x50
 80049f6:	d873      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	d058      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x18e>
 80049fc:	2b40      	cmp	r3, #64	@ 0x40
 80049fe:	d86f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a00:	2b30      	cmp	r3, #48	@ 0x30
 8004a02:	d064      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 8004a04:	2b30      	cmp	r3, #48	@ 0x30
 8004a06:	d86b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d060      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d867      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d05a      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x1ae>
 8004a18:	e062      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a2a:	f000 fc81 	bl	8005330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	609a      	str	r2, [r3, #8]
      break;
 8004a46:	e04f      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a58:	f000 fc6a 	bl	8005330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a6a:	609a      	str	r2, [r3, #8]
      break;
 8004a6c:	e03c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f000 fbdc 	bl	8005238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2150      	movs	r1, #80	@ 0x50
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fc35 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e02c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fbfb 	bl	8005296 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2160      	movs	r1, #96	@ 0x60
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fc25 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e01c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fbbc 	bl	8005238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2140      	movs	r1, #64	@ 0x40
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fc15 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e00c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f000 fc0c 	bl	80052f6 <TIM_ITRx_SetConfig>
      break;
 8004ade:	e003      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae4:	e000      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	00100070 	.word	0x00100070
 8004b08:	00100040 	.word	0x00100040
 8004b0c:	00100030 	.word	0x00100030
 8004b10:	00100020 	.word	0x00100020

08004b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a42      	ldr	r2, [pc, #264]	@ (8004c30 <TIM_Base_SetConfig+0x11c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00f      	beq.n	8004b4c <TIM_Base_SetConfig+0x38>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b32:	d00b      	beq.n	8004b4c <TIM_Base_SetConfig+0x38>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a3f      	ldr	r2, [pc, #252]	@ (8004c34 <TIM_Base_SetConfig+0x120>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d007      	beq.n	8004b4c <TIM_Base_SetConfig+0x38>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c38 <TIM_Base_SetConfig+0x124>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <TIM_Base_SetConfig+0x38>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a3d      	ldr	r2, [pc, #244]	@ (8004c3c <TIM_Base_SetConfig+0x128>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d108      	bne.n	8004b5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a33      	ldr	r2, [pc, #204]	@ (8004c30 <TIM_Base_SetConfig+0x11c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01b      	beq.n	8004b9e <TIM_Base_SetConfig+0x8a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6c:	d017      	beq.n	8004b9e <TIM_Base_SetConfig+0x8a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a30      	ldr	r2, [pc, #192]	@ (8004c34 <TIM_Base_SetConfig+0x120>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <TIM_Base_SetConfig+0x8a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a2f      	ldr	r2, [pc, #188]	@ (8004c38 <TIM_Base_SetConfig+0x124>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00f      	beq.n	8004b9e <TIM_Base_SetConfig+0x8a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a2e      	ldr	r2, [pc, #184]	@ (8004c3c <TIM_Base_SetConfig+0x128>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <TIM_Base_SetConfig+0x8a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a2d      	ldr	r2, [pc, #180]	@ (8004c40 <TIM_Base_SetConfig+0x12c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <TIM_Base_SetConfig+0x8a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a2c      	ldr	r2, [pc, #176]	@ (8004c44 <TIM_Base_SetConfig+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2b      	ldr	r2, [pc, #172]	@ (8004c48 <TIM_Base_SetConfig+0x134>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a16      	ldr	r2, [pc, #88]	@ (8004c30 <TIM_Base_SetConfig+0x11c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00f      	beq.n	8004bfc <TIM_Base_SetConfig+0xe8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a17      	ldr	r2, [pc, #92]	@ (8004c3c <TIM_Base_SetConfig+0x128>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00b      	beq.n	8004bfc <TIM_Base_SetConfig+0xe8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a16      	ldr	r2, [pc, #88]	@ (8004c40 <TIM_Base_SetConfig+0x12c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <TIM_Base_SetConfig+0xe8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a15      	ldr	r2, [pc, #84]	@ (8004c44 <TIM_Base_SetConfig+0x130>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0xe8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	@ (8004c48 <TIM_Base_SetConfig+0x134>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d103      	bne.n	8004c04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d105      	bne.n	8004c22 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	611a      	str	r2, [r3, #16]
  }
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40013400 	.word	0x40013400
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40014400 	.word	0x40014400
 8004c48:	40014800 	.word	0x40014800

08004c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f023 0201 	bic.w	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f023 0302 	bic.w	r3, r3, #2
 8004c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d58 <TIM_OC1_SetConfig+0x10c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00f      	beq.n	8004ccc <TIM_OC1_SetConfig+0x80>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a2b      	ldr	r2, [pc, #172]	@ (8004d5c <TIM_OC1_SetConfig+0x110>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_OC1_SetConfig+0x80>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d60 <TIM_OC1_SetConfig+0x114>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_OC1_SetConfig+0x80>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a29      	ldr	r2, [pc, #164]	@ (8004d64 <TIM_OC1_SetConfig+0x118>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC1_SetConfig+0x80>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a28      	ldr	r2, [pc, #160]	@ (8004d68 <TIM_OC1_SetConfig+0x11c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10c      	bne.n	8004ce6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0308 	bic.w	r3, r3, #8
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 0304 	bic.w	r3, r3, #4
 8004ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d58 <TIM_OC1_SetConfig+0x10c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00f      	beq.n	8004d0e <TIM_OC1_SetConfig+0xc2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d5c <TIM_OC1_SetConfig+0x110>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00b      	beq.n	8004d0e <TIM_OC1_SetConfig+0xc2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a19      	ldr	r2, [pc, #100]	@ (8004d60 <TIM_OC1_SetConfig+0x114>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <TIM_OC1_SetConfig+0xc2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <TIM_OC1_SetConfig+0x118>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_OC1_SetConfig+0xc2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a17      	ldr	r2, [pc, #92]	@ (8004d68 <TIM_OC1_SetConfig+0x11c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d111      	bne.n	8004d32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40013400 	.word	0x40013400
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40014400 	.word	0x40014400
 8004d68:	40014800 	.word	0x40014800

08004d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f023 0210 	bic.w	r2, r3, #16
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0320 	bic.w	r3, r3, #32
 8004dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <TIM_OC2_SetConfig+0x100>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC2_SetConfig+0x6c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <TIM_OC2_SetConfig+0x104>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10d      	bne.n	8004df4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <TIM_OC2_SetConfig+0x100>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00f      	beq.n	8004e1c <TIM_OC2_SetConfig+0xb0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8004e70 <TIM_OC2_SetConfig+0x104>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_OC2_SetConfig+0xb0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a1b      	ldr	r2, [pc, #108]	@ (8004e74 <TIM_OC2_SetConfig+0x108>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_OC2_SetConfig+0xb0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e78 <TIM_OC2_SetConfig+0x10c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC2_SetConfig+0xb0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a19      	ldr	r2, [pc, #100]	@ (8004e7c <TIM_OC2_SetConfig+0x110>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d113      	bne.n	8004e44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40013400 	.word	0x40013400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	40014400 	.word	0x40014400
 8004e7c:	40014800 	.word	0x40014800

08004e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a27      	ldr	r2, [pc, #156]	@ (8004f7c <TIM_OC3_SetConfig+0xfc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_OC3_SetConfig+0x6a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	@ (8004f80 <TIM_OC3_SetConfig+0x100>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10d      	bne.n	8004f06 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a1c      	ldr	r2, [pc, #112]	@ (8004f7c <TIM_OC3_SetConfig+0xfc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00f      	beq.n	8004f2e <TIM_OC3_SetConfig+0xae>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1b      	ldr	r2, [pc, #108]	@ (8004f80 <TIM_OC3_SetConfig+0x100>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00b      	beq.n	8004f2e <TIM_OC3_SetConfig+0xae>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a1a      	ldr	r2, [pc, #104]	@ (8004f84 <TIM_OC3_SetConfig+0x104>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <TIM_OC3_SetConfig+0xae>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a19      	ldr	r2, [pc, #100]	@ (8004f88 <TIM_OC3_SetConfig+0x108>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_OC3_SetConfig+0xae>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <TIM_OC3_SetConfig+0x10c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d113      	bne.n	8004f56 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	621a      	str	r2, [r3, #32]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40013400 	.word	0x40013400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800

08004f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a28      	ldr	r2, [pc, #160]	@ (8005090 <TIM_OC4_SetConfig+0x100>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_OC4_SetConfig+0x6c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a27      	ldr	r2, [pc, #156]	@ (8005094 <TIM_OC4_SetConfig+0x104>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d10d      	bne.n	8005018 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	031b      	lsls	r3, r3, #12
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005016:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1d      	ldr	r2, [pc, #116]	@ (8005090 <TIM_OC4_SetConfig+0x100>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00f      	beq.n	8005040 <TIM_OC4_SetConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a1c      	ldr	r2, [pc, #112]	@ (8005094 <TIM_OC4_SetConfig+0x104>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00b      	beq.n	8005040 <TIM_OC4_SetConfig+0xb0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <TIM_OC4_SetConfig+0x108>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_OC4_SetConfig+0xb0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a1a      	ldr	r2, [pc, #104]	@ (800509c <TIM_OC4_SetConfig+0x10c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_OC4_SetConfig+0xb0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a19      	ldr	r2, [pc, #100]	@ (80050a0 <TIM_OC4_SetConfig+0x110>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d113      	bne.n	8005068 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005046:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800504e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800

080050a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80050e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a17      	ldr	r2, [pc, #92]	@ (8005158 <TIM_OC5_SetConfig+0xb4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00f      	beq.n	800511e <TIM_OC5_SetConfig+0x7a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a16      	ldr	r2, [pc, #88]	@ (800515c <TIM_OC5_SetConfig+0xb8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_OC5_SetConfig+0x7a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a15      	ldr	r2, [pc, #84]	@ (8005160 <TIM_OC5_SetConfig+0xbc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <TIM_OC5_SetConfig+0x7a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a14      	ldr	r2, [pc, #80]	@ (8005164 <TIM_OC5_SetConfig+0xc0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_OC5_SetConfig+0x7a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a13      	ldr	r2, [pc, #76]	@ (8005168 <TIM_OC5_SetConfig+0xc4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d109      	bne.n	8005132 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005124:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	051b      	lsls	r3, r3, #20
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <TIM_OC6_SetConfig+0xb8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00f      	beq.n	80051e8 <TIM_OC6_SetConfig+0x7c>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	@ (8005228 <TIM_OC6_SetConfig+0xbc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00b      	beq.n	80051e8 <TIM_OC6_SetConfig+0x7c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a16      	ldr	r2, [pc, #88]	@ (800522c <TIM_OC6_SetConfig+0xc0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d007      	beq.n	80051e8 <TIM_OC6_SetConfig+0x7c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <TIM_OC6_SetConfig+0xc4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_OC6_SetConfig+0x7c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a14      	ldr	r2, [pc, #80]	@ (8005234 <TIM_OC6_SetConfig+0xc8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d109      	bne.n	80051fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	029b      	lsls	r3, r3, #10
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40013400 	.word	0x40013400
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800

08005238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0201 	bic.w	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f023 030a 	bic.w	r3, r3, #10
 8005274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005296:	b480      	push	{r7}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f023 0210 	bic.w	r2, r3, #16
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	031b      	lsls	r3, r3, #12
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800530c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	f043 0307 	orr.w	r3, r3, #7
 800531c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800534a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	431a      	orrs	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2201      	movs	r2, #1
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1a      	ldr	r2, [r3, #32]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	43db      	mvns	r3, r3
 8005392:	401a      	ands	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e065      	b.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	@ (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2b      	ldr	r2, [pc, #172]	@ (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800540e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d018      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544a:	d013      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a18      	ldr	r2, [pc, #96]	@ (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a17      	ldr	r2, [pc, #92]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a12      	ldr	r2, [pc, #72]	@ (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a13      	ldr	r2, [pc, #76]	@ (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800547a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	4313      	orrs	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40014000 	.word	0x40014000

080054c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e042      	b.n	8005558 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fd fa19 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2224      	movs	r2, #36	@ 0x24
 80054ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fea2 	bl	8006254 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fbd3 	bl	8005cbc <UART_SetConfig>
 8005516:	4603      	mov	r3, r0
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e01b      	b.n	8005558 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800552e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800553e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 ff21 	bl	8006398 <UART_CheckIdleState>
 8005556:	4603      	mov	r3, r0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	@ 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005574:	2b20      	cmp	r3, #32
 8005576:	d137      	bne.n	80055e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_UART_Receive_IT+0x24>
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e030      	b.n	80055ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <HAL_UART_Receive_IT+0x94>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d01f      	beq.n	80055d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d018      	beq.n	80055d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	613b      	str	r3, [r7, #16]
   return(result);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	461a      	mov	r2, r3
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fff2 	bl	80065c8 <UART_Start_Receive_IT>
 80055e4:	4603      	mov	r3, r0
 80055e6:	e000      	b.n	80055ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055e8:	2302      	movs	r3, #2
  }
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3728      	adds	r7, #40	@ 0x28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40008000 	.word	0x40008000

080055f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b0ba      	sub	sp, #232	@ 0xe8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800561e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005622:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005626:	4013      	ands	r3, r2
 8005628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800562c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11b      	bne.n	800566c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d015      	beq.n	800566c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800564c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8300 	beq.w	8005c62 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
      }
      return;
 800566a:	e2fa      	b.n	8005c62 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800566c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8123 	beq.w	80058bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005676:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800567a:	4b8d      	ldr	r3, [pc, #564]	@ (80058b0 <HAL_UART_IRQHandler+0x2b8>)
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005682:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005686:	4b8b      	ldr	r3, [pc, #556]	@ (80058b4 <HAL_UART_IRQHandler+0x2bc>)
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8116 	beq.w	80058bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d011      	beq.n	80056c0 <HAL_UART_IRQHandler+0xc8>
 800569c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2201      	movs	r2, #1
 80056ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b6:	f043 0201 	orr.w	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d011      	beq.n	80056f0 <HAL_UART_IRQHandler+0xf8>
 80056cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2202      	movs	r2, #2
 80056de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e6:	f043 0204 	orr.w	r2, r3, #4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d011      	beq.n	8005720 <HAL_UART_IRQHandler+0x128>
 80056fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00b      	beq.n	8005720 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2204      	movs	r2, #4
 800570e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005716:	f043 0202 	orr.w	r2, r3, #2
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800572c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005738:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800573c:	4b5c      	ldr	r3, [pc, #368]	@ (80058b0 <HAL_UART_IRQHandler+0x2b8>)
 800573e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2208      	movs	r2, #8
 800574a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005752:	f043 0208 	orr.w	r2, r3, #8
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005764:	2b00      	cmp	r3, #0
 8005766:	d012      	beq.n	800578e <HAL_UART_IRQHandler+0x196>
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800576c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00c      	beq.n	800578e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800577c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8266 	beq.w	8005c66 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d013      	beq.n	80057ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d105      	bne.n	80057be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e2:	2b40      	cmp	r3, #64	@ 0x40
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d054      	beq.n	800589c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f001 f80a 	bl	800680c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005802:	2b40      	cmp	r3, #64	@ 0x40
 8005804:	d146      	bne.n	8005894 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800581c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005832:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800583e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800584a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1d9      	bne.n	8005806 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005858:	2b00      	cmp	r3, #0
 800585a:	d017      	beq.n	800588c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005862:	4a15      	ldr	r2, [pc, #84]	@ (80058b8 <HAL_UART_IRQHandler+0x2c0>)
 8005864:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800586c:	4618      	mov	r0, r3
 800586e:	f7fd fb21 	bl	8002eb4 <HAL_DMA_Abort_IT>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d019      	beq.n	80058ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005886:	4610      	mov	r0, r2
 8005888:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588a:	e00f      	b.n	80058ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f9ff 	bl	8005c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005892:	e00b      	b.n	80058ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f9fb 	bl	8005c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589a:	e007      	b.n	80058ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9f7 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80058aa:	e1dc      	b.n	8005c66 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	bf00      	nop
    return;
 80058ae:	e1da      	b.n	8005c66 <HAL_UART_IRQHandler+0x66e>
 80058b0:	10000001 	.word	0x10000001
 80058b4:	04000120 	.word	0x04000120
 80058b8:	080068d9 	.word	0x080068d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f040 8170 	bne.w	8005ba6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8169 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8162 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2210      	movs	r2, #16
 80058e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f4:	2b40      	cmp	r3, #64	@ 0x40
 80058f6:	f040 80d8 	bne.w	8005aaa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80af 	beq.w	8005a70 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005918:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800591c:	429a      	cmp	r2, r3
 800591e:	f080 80a7 	bcs.w	8005a70 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005928:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 8087 	bne.w	8005a4e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800595c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800596a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800596e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005976:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1da      	bne.n	8005940 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800599a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3308      	adds	r3, #8
 80059aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e1      	bne.n	800598a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e3      	bne.n	80059c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a1c:	f023 0310 	bic.w	r3, r3, #16
 8005a20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e4      	bne.n	8005a0c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fd f9da 	bl	8002e02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f91b 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a6e:	e0fc      	b.n	8005c6a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f040 80f5 	bne.w	8005c6a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	f040 80eb 	bne.w	8005c6a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8fe 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
      return;
 8005aa8:	e0df      	b.n	8005c6a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80d1 	beq.w	8005c6e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80cc 	beq.w	8005c6e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e4      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3308      	adds	r3, #8
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b34:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e1      	bne.n	8005b0c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f023 0310 	bic.w	r3, r3, #16
 8005b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	69b9      	ldr	r1, [r7, #24]
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e4      	bne.n	8005b5c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f880 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ba4:	e063      	b.n	8005c6e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x5d8>
 8005bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005bc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 fbe7 	bl	800739c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bce:	e051      	b.n	8005c74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d014      	beq.n	8005c06 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d03a      	beq.n	8005c72 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
    }
    return;
 8005c04:	e035      	b.n	8005c72 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <HAL_UART_IRQHandler+0x62e>
 8005c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fe70 	bl	8006904 <UART_EndTransmit_IT>
    return;
 8005c24:	e026      	b.n	8005c74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_UART_IRQHandler+0x64e>
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 fbc0 	bl	80073c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c44:	e016      	b.n	8005c74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d010      	beq.n	8005c74 <HAL_UART_IRQHandler+0x67c>
 8005c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da0c      	bge.n	8005c74 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 fba8 	bl	80073b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c60:	e008      	b.n	8005c74 <HAL_UART_IRQHandler+0x67c>
      return;
 8005c62:	bf00      	nop
 8005c64:	e006      	b.n	8005c74 <HAL_UART_IRQHandler+0x67c>
    return;
 8005c66:	bf00      	nop
 8005c68:	e004      	b.n	8005c74 <HAL_UART_IRQHandler+0x67c>
      return;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_UART_IRQHandler+0x67c>
      return;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_UART_IRQHandler+0x67c>
    return;
 8005c72:	bf00      	nop
  }
}
 8005c74:	37e8      	adds	r7, #232	@ 0xe8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop

08005c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b08c      	sub	sp, #48	@ 0x30
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4bab      	ldr	r3, [pc, #684]	@ (8005f98 <UART_SetConfig+0x2dc>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4aa0      	ldr	r2, [pc, #640]	@ (8005f9c <UART_SetConfig+0x2e0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d24:	4313      	orrs	r3, r2
 8005d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	f023 010f 	bic.w	r1, r3, #15
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a91      	ldr	r2, [pc, #580]	@ (8005fa0 <UART_SetConfig+0x2e4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d125      	bne.n	8005dac <UART_SetConfig+0xf0>
 8005d60:	4b90      	ldr	r3, [pc, #576]	@ (8005fa4 <UART_SetConfig+0x2e8>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d81a      	bhi.n	8005da4 <UART_SetConfig+0xe8>
 8005d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <UART_SetConfig+0xb8>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005d8d 	.word	0x08005d8d
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d8a:	e0d6      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d92:	e0d2      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d9a:	e0ce      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da2:	e0ca      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005daa:	e0c6      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a7d      	ldr	r2, [pc, #500]	@ (8005fa8 <UART_SetConfig+0x2ec>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d138      	bne.n	8005e28 <UART_SetConfig+0x16c>
 8005db6:	4b7b      	ldr	r3, [pc, #492]	@ (8005fa4 <UART_SetConfig+0x2e8>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbc:	f003 030c 	and.w	r3, r3, #12
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	d82d      	bhi.n	8005e20 <UART_SetConfig+0x164>
 8005dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <UART_SetConfig+0x110>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005e01 	.word	0x08005e01
 8005dd0:	08005e21 	.word	0x08005e21
 8005dd4:	08005e21 	.word	0x08005e21
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e11 	.word	0x08005e11
 8005de0:	08005e21 	.word	0x08005e21
 8005de4:	08005e21 	.word	0x08005e21
 8005de8:	08005e21 	.word	0x08005e21
 8005dec:	08005e09 	.word	0x08005e09
 8005df0:	08005e21 	.word	0x08005e21
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	08005e21 	.word	0x08005e21
 8005dfc:	08005e19 	.word	0x08005e19
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e06:	e098      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0e:	e094      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e10:	2304      	movs	r3, #4
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	e090      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1e:	e08c      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e20:	2310      	movs	r3, #16
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e26:	e088      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a5f      	ldr	r2, [pc, #380]	@ (8005fac <UART_SetConfig+0x2f0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d125      	bne.n	8005e7e <UART_SetConfig+0x1c2>
 8005e32:	4b5c      	ldr	r3, [pc, #368]	@ (8005fa4 <UART_SetConfig+0x2e8>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e3c:	2b30      	cmp	r3, #48	@ 0x30
 8005e3e:	d016      	beq.n	8005e6e <UART_SetConfig+0x1b2>
 8005e40:	2b30      	cmp	r3, #48	@ 0x30
 8005e42:	d818      	bhi.n	8005e76 <UART_SetConfig+0x1ba>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d00a      	beq.n	8005e5e <UART_SetConfig+0x1a2>
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d814      	bhi.n	8005e76 <UART_SetConfig+0x1ba>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <UART_SetConfig+0x19a>
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d008      	beq.n	8005e66 <UART_SetConfig+0x1aa>
 8005e54:	e00f      	b.n	8005e76 <UART_SetConfig+0x1ba>
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5c:	e06d      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e64:	e069      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e66:	2304      	movs	r3, #4
 8005e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6c:	e065      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e6e:	2308      	movs	r3, #8
 8005e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e74:	e061      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e76:	2310      	movs	r3, #16
 8005e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7c:	e05d      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a4b      	ldr	r2, [pc, #300]	@ (8005fb0 <UART_SetConfig+0x2f4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d125      	bne.n	8005ed4 <UART_SetConfig+0x218>
 8005e88:	4b46      	ldr	r3, [pc, #280]	@ (8005fa4 <UART_SetConfig+0x2e8>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e94:	d016      	beq.n	8005ec4 <UART_SetConfig+0x208>
 8005e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e98:	d818      	bhi.n	8005ecc <UART_SetConfig+0x210>
 8005e9a:	2b80      	cmp	r3, #128	@ 0x80
 8005e9c:	d00a      	beq.n	8005eb4 <UART_SetConfig+0x1f8>
 8005e9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ea0:	d814      	bhi.n	8005ecc <UART_SetConfig+0x210>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <UART_SetConfig+0x1f0>
 8005ea6:	2b40      	cmp	r3, #64	@ 0x40
 8005ea8:	d008      	beq.n	8005ebc <UART_SetConfig+0x200>
 8005eaa:	e00f      	b.n	8005ecc <UART_SetConfig+0x210>
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb2:	e042      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eba:	e03e      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec2:	e03a      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eca:	e036      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed2:	e032      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <UART_SetConfig+0x2e0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d12a      	bne.n	8005f34 <UART_SetConfig+0x278>
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <UART_SetConfig+0x2e8>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ee8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005eec:	d01a      	beq.n	8005f24 <UART_SetConfig+0x268>
 8005eee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ef2:	d81b      	bhi.n	8005f2c <UART_SetConfig+0x270>
 8005ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ef8:	d00c      	beq.n	8005f14 <UART_SetConfig+0x258>
 8005efa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005efe:	d815      	bhi.n	8005f2c <UART_SetConfig+0x270>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <UART_SetConfig+0x250>
 8005f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f08:	d008      	beq.n	8005f1c <UART_SetConfig+0x260>
 8005f0a:	e00f      	b.n	8005f2c <UART_SetConfig+0x270>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f12:	e012      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005f14:	2302      	movs	r3, #2
 8005f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1a:	e00e      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f22:	e00a      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005f24:	2308      	movs	r3, #8
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2a:	e006      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f32:	e002      	b.n	8005f3a <UART_SetConfig+0x27e>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a17      	ldr	r2, [pc, #92]	@ (8005f9c <UART_SetConfig+0x2e0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	f040 80a8 	bne.w	8006096 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d834      	bhi.n	8005fb8 <UART_SetConfig+0x2fc>
 8005f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f54 <UART_SetConfig+0x298>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005fb9 	.word	0x08005fb9
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005fb9 	.word	0x08005fb9
 8005f64:	08005f87 	.word	0x08005f87
 8005f68:	08005fb9 	.word	0x08005fb9
 8005f6c:	08005fb9 	.word	0x08005fb9
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005f8f 	.word	0x08005f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7fd ff40 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 8005f7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f7e:	e021      	b.n	8005fc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f80:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <UART_SetConfig+0x2f8>)
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f84:	e01e      	b.n	8005fc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f86:	f7fd fecb 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8005f8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f8c:	e01a      	b.n	8005fc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f94:	e016      	b.n	8005fc4 <UART_SetConfig+0x308>
 8005f96:	bf00      	nop
 8005f98:	cfff69f3 	.word	0xcfff69f3
 8005f9c:	40008000 	.word	0x40008000
 8005fa0:	40013800 	.word	0x40013800
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40004400 	.word	0x40004400
 8005fac:	40004800 	.word	0x40004800
 8005fb0:	40004c00 	.word	0x40004c00
 8005fb4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 812a 	beq.w	8006220 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	4a9e      	ldr	r2, [pc, #632]	@ (800624c <UART_SetConfig+0x590>)
 8005fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	4413      	add	r3, r2
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d305      	bcc.n	8005ffc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d903      	bls.n	8006004 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006002:	e10d      	b.n	8006220 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	2200      	movs	r2, #0
 8006008:	60bb      	str	r3, [r7, #8]
 800600a:	60fa      	str	r2, [r7, #12]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	4a8e      	ldr	r2, [pc, #568]	@ (800624c <UART_SetConfig+0x590>)
 8006012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006016:	b29b      	uxth	r3, r3
 8006018:	2200      	movs	r2, #0
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006026:	f7fa fe51 	bl	8000ccc <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4610      	mov	r0, r2
 8006030:	4619      	mov	r1, r3
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	020b      	lsls	r3, r1, #8
 800603c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006040:	0202      	lsls	r2, r0, #8
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	6849      	ldr	r1, [r1, #4]
 8006046:	0849      	lsrs	r1, r1, #1
 8006048:	2000      	movs	r0, #0
 800604a:	460c      	mov	r4, r1
 800604c:	4605      	mov	r5, r0
 800604e:	eb12 0804 	adds.w	r8, r2, r4
 8006052:	eb43 0905 	adc.w	r9, r3, r5
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	469a      	mov	sl, r3
 800605e:	4693      	mov	fp, r2
 8006060:	4652      	mov	r2, sl
 8006062:	465b      	mov	r3, fp
 8006064:	4640      	mov	r0, r8
 8006066:	4649      	mov	r1, r9
 8006068:	f7fa fe30 	bl	8000ccc <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4613      	mov	r3, r2
 8006072:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800607a:	d308      	bcc.n	800608e <UART_SetConfig+0x3d2>
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006082:	d204      	bcs.n	800608e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a3a      	ldr	r2, [r7, #32]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	e0c8      	b.n	8006220 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006094:	e0c4      	b.n	8006220 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800609e:	d167      	bne.n	8006170 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80060a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d828      	bhi.n	80060fa <UART_SetConfig+0x43e>
 80060a8:	a201      	add	r2, pc, #4	@ (adr r2, 80060b0 <UART_SetConfig+0x3f4>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060fb 	.word	0x080060fb
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fd fe92 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 80060d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060da:	e014      	b.n	8006106 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fd fea4 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 80060e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060e2:	e010      	b.n	8006106 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006250 <UART_SetConfig+0x594>)
 80060e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060e8:	e00d      	b.n	8006106 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fd fe19 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 80060ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060f0:	e009      	b.n	8006106 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060f8:	e005      	b.n	8006106 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 8089 	beq.w	8006220 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006112:	4a4e      	ldr	r2, [pc, #312]	@ (800624c <UART_SetConfig+0x590>)
 8006114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006118:	461a      	mov	r2, r3
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006120:	005a      	lsls	r2, r3, #1
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	441a      	add	r2, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006132:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d916      	bls.n	8006168 <UART_SetConfig+0x4ac>
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006140:	d212      	bcs.n	8006168 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f023 030f 	bic.w	r3, r3, #15
 800614a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	b29a      	uxth	r2, r3
 8006158:	8bfb      	ldrh	r3, [r7, #30]
 800615a:	4313      	orrs	r3, r2
 800615c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	8bfa      	ldrh	r2, [r7, #30]
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	e05b      	b.n	8006220 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800616e:	e057      	b.n	8006220 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006170:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006174:	2b08      	cmp	r3, #8
 8006176:	d828      	bhi.n	80061ca <UART_SetConfig+0x50e>
 8006178:	a201      	add	r2, pc, #4	@ (adr r2, 8006180 <UART_SetConfig+0x4c4>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	080061a5 	.word	0x080061a5
 8006184:	080061ad 	.word	0x080061ad
 8006188:	080061b5 	.word	0x080061b5
 800618c:	080061cb 	.word	0x080061cb
 8006190:	080061bb 	.word	0x080061bb
 8006194:	080061cb 	.word	0x080061cb
 8006198:	080061cb 	.word	0x080061cb
 800619c:	080061cb 	.word	0x080061cb
 80061a0:	080061c3 	.word	0x080061c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a4:	f7fd fe2a 	bl	8003dfc <HAL_RCC_GetPCLK1Freq>
 80061a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061aa:	e014      	b.n	80061d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ac:	f7fd fe3c 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 80061b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061b2:	e010      	b.n	80061d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b4:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <UART_SetConfig+0x594>)
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061b8:	e00d      	b.n	80061d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ba:	f7fd fdb1 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 80061be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061c0:	e009      	b.n	80061d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061c8:	e005      	b.n	80061d6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80061d4:	bf00      	nop
    }

    if (pclk != 0U)
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d021      	beq.n	8006220 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	4a1a      	ldr	r2, [pc, #104]	@ (800624c <UART_SetConfig+0x590>)
 80061e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e6:	461a      	mov	r2, r3
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	441a      	add	r2, r3
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d909      	bls.n	800621a <UART_SetConfig+0x55e>
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800620c:	d205      	bcs.n	800621a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	b29a      	uxth	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60da      	str	r2, [r3, #12]
 8006218:	e002      	b.n	8006220 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2201      	movs	r2, #1
 8006224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2201      	movs	r2, #1
 800622c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2200      	movs	r2, #0
 8006234:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2200      	movs	r2, #0
 800623a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800623c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006240:	4618      	mov	r0, r3
 8006242:	3730      	adds	r7, #48	@ 0x30
 8006244:	46bd      	mov	sp, r7
 8006246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800624a:	bf00      	nop
 800624c:	0800a34c 	.word	0x0800a34c
 8006250:	00f42400 	.word	0x00f42400

08006254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006260:	f003 0308 	and.w	r3, r3, #8
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01a      	beq.n	800636a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006352:	d10a      	bne.n	800636a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	605a      	str	r2, [r3, #4]
  }
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b098      	sub	sp, #96	@ 0x60
 800639c:	af02      	add	r7, sp, #8
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063a8:	f7fc fbee 	bl	8002b88 <HAL_GetTick>
 80063ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d12f      	bne.n	800641c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c4:	2200      	movs	r2, #0
 80063c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f88e 	bl	80064ec <UART_WaitOnFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d022      	beq.n	800641c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e063      	b.n	80064e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b04      	cmp	r3, #4
 8006428:	d149      	bne.n	80064be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800642a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006432:	2200      	movs	r2, #0
 8006434:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f857 	bl	80064ec <UART_WaitOnFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d03c      	beq.n	80064be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	623b      	str	r3, [r7, #32]
   return(result);
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006462:	633b      	str	r3, [r7, #48]	@ 0x30
 8006464:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e6      	bne.n	8006444 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	60fb      	str	r3, [r7, #12]
   return(result);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3308      	adds	r3, #8
 8006494:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006496:	61fa      	str	r2, [r7, #28]
 8006498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	69b9      	ldr	r1, [r7, #24]
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	617b      	str	r3, [r7, #20]
   return(result);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e5      	bne.n	8006476 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e012      	b.n	80064e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3758      	adds	r7, #88	@ 0x58
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fc:	e04f      	b.n	800659e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d04b      	beq.n	800659e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006506:	f7fc fb3f 	bl	8002b88 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	429a      	cmp	r2, r3
 8006514:	d302      	bcc.n	800651c <UART_WaitOnFlagUntilTimeout+0x30>
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e04e      	b.n	80065be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d037      	beq.n	800659e <UART_WaitOnFlagUntilTimeout+0xb2>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b80      	cmp	r3, #128	@ 0x80
 8006532:	d034      	beq.n	800659e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b40      	cmp	r3, #64	@ 0x40
 8006538:	d031      	beq.n	800659e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b08      	cmp	r3, #8
 8006546:	d110      	bne.n	800656a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2208      	movs	r2, #8
 800654e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f95b 	bl	800680c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2208      	movs	r2, #8
 800655a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e029      	b.n	80065be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006578:	d111      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f941 	bl	800680c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e00f      	b.n	80065be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4013      	ands	r3, r2
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	bf0c      	ite	eq
 80065ae:	2301      	moveq	r3, #1
 80065b0:	2300      	movne	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d0a0      	beq.n	80064fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b0a3      	sub	sp, #140	@ 0x8c
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fa:	d10e      	bne.n	800661a <UART_Start_Receive_IT+0x52>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d105      	bne.n	8006610 <UART_Start_Receive_IT+0x48>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800660a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800660e:	e02d      	b.n	800666c <UART_Start_Receive_IT+0xa4>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	22ff      	movs	r2, #255	@ 0xff
 8006614:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006618:	e028      	b.n	800666c <UART_Start_Receive_IT+0xa4>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10d      	bne.n	800663e <UART_Start_Receive_IT+0x76>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <UART_Start_Receive_IT+0x6c>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	22ff      	movs	r2, #255	@ 0xff
 800662e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006632:	e01b      	b.n	800666c <UART_Start_Receive_IT+0xa4>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	227f      	movs	r2, #127	@ 0x7f
 8006638:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800663c:	e016      	b.n	800666c <UART_Start_Receive_IT+0xa4>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006646:	d10d      	bne.n	8006664 <UART_Start_Receive_IT+0x9c>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <UART_Start_Receive_IT+0x92>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	227f      	movs	r2, #127	@ 0x7f
 8006654:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006658:	e008      	b.n	800666c <UART_Start_Receive_IT+0xa4>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	223f      	movs	r2, #63	@ 0x3f
 800665e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006662:	e003      	b.n	800666c <UART_Start_Receive_IT+0xa4>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2222      	movs	r2, #34	@ 0x22
 8006678:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800668c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80066a0:	673a      	str	r2, [r7, #112]	@ 0x70
 80066a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80066a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80066ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e3      	bne.n	800667c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066bc:	d14f      	bne.n	800675e <UART_Start_Receive_IT+0x196>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80066c4:	88fa      	ldrh	r2, [r7, #6]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d349      	bcc.n	800675e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d2:	d107      	bne.n	80066e4 <UART_Start_Receive_IT+0x11c>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a47      	ldr	r2, [pc, #284]	@ (80067fc <UART_Start_Receive_IT+0x234>)
 80066e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80066e2:	e002      	b.n	80066ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a46      	ldr	r2, [pc, #280]	@ (8006800 <UART_Start_Receive_IT+0x238>)
 80066e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d01a      	beq.n	8006728 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006706:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006714:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006716:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800671a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e4      	bne.n	80066f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3308      	adds	r3, #8
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800673e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3308      	adds	r3, #8
 8006746:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006748:	64ba      	str	r2, [r7, #72]	@ 0x48
 800674a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800674e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e5      	bne.n	8006728 <UART_Start_Receive_IT+0x160>
 800675c:	e046      	b.n	80067ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006766:	d107      	bne.n	8006778 <UART_Start_Receive_IT+0x1b0>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d103      	bne.n	8006778 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a24      	ldr	r2, [pc, #144]	@ (8006804 <UART_Start_Receive_IT+0x23c>)
 8006774:	675a      	str	r2, [r3, #116]	@ 0x74
 8006776:	e002      	b.n	800677e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a23      	ldr	r2, [pc, #140]	@ (8006808 <UART_Start_Receive_IT+0x240>)
 800677c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d019      	beq.n	80067ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800679a:	677b      	str	r3, [r7, #116]	@ 0x74
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	461a      	mov	r2, r3
 80067a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e6      	bne.n	8006786 <UART_Start_Receive_IT+0x1be>
 80067b8:	e018      	b.n	80067ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	613b      	str	r3, [r7, #16]
   return(result);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f043 0320 	orr.w	r3, r3, #32
 80067ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067d8:	623b      	str	r3, [r7, #32]
 80067da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	6a3a      	ldr	r2, [r7, #32]
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e6      	bne.n	80067ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	378c      	adds	r7, #140	@ 0x8c
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	08007031 	.word	0x08007031
 8006800:	08006ccd 	.word	0x08006ccd
 8006804:	08006b15 	.word	0x08006b15
 8006808:	0800695d 	.word	0x0800695d

0800680c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b095      	sub	sp, #84	@ 0x54
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006828:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006832:	643b      	str	r3, [r7, #64]	@ 0x40
 8006834:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006838:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e6      	bne.n	8006814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	61fb      	str	r3, [r7, #28]
   return(result);
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800686a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800686c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e3      	bne.n	8006846 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006882:	2b01      	cmp	r3, #1
 8006884:	d118      	bne.n	80068b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	60bb      	str	r3, [r7, #8]
   return(result);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f023 0310 	bic.w	r3, r3, #16
 800689a:	647b      	str	r3, [r7, #68]	@ 0x44
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6979      	ldr	r1, [r7, #20]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	613b      	str	r3, [r7, #16]
   return(result);
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e6      	bne.n	8006886 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068cc:	bf00      	nop
 80068ce:	3754      	adds	r7, #84	@ 0x54
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff f9ca 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	60bb      	str	r3, [r7, #8]
   return(result);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006920:	61fb      	str	r3, [r7, #28]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	613b      	str	r3, [r7, #16]
   return(result);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e6      	bne.n	800690c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff f995 	bl	8005c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006952:	bf00      	nop
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b09c      	sub	sp, #112	@ 0x70
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800696a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006974:	2b22      	cmp	r3, #34	@ 0x22
 8006976:	f040 80be 	bne.w	8006af6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006984:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006988:	b2d9      	uxtb	r1, r3
 800698a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800698e:	b2da      	uxtb	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006994:	400a      	ands	r2, r1
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f040 80a1 	bne.w	8006b06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e6      	bne.n	80069c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a33      	ldr	r2, [pc, #204]	@ (8006b10 <UART_RxISR_8BIT+0x1b4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d01f      	beq.n	8006a88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d018      	beq.n	8006a88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	623b      	str	r3, [r7, #32]
   return(result);
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e6      	bne.n	8006a56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d12e      	bne.n	8006aee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0310 	bic.w	r3, r3, #16
 8006aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d103      	bne.n	8006ade <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2210      	movs	r2, #16
 8006adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff f8dc 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aec:	e00b      	b.n	8006b06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fb fb2a 	bl	8002148 <HAL_UART_RxCpltCallback>
}
 8006af4:	e007      	b.n	8006b06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 0208 	orr.w	r2, r2, #8
 8006b04:	619a      	str	r2, [r3, #24]
}
 8006b06:	bf00      	nop
 8006b08:	3770      	adds	r7, #112	@ 0x70
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	40008000 	.word	0x40008000

08006b14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b09c      	sub	sp, #112	@ 0x70
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b2c:	2b22      	cmp	r3, #34	@ 0x22
 8006b2e:	f040 80be 	bne.w	8006cae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006b46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b56:	1c9a      	adds	r2, r3, #2
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 80a1 	bne.w	8006cbe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e6      	bne.n	8006b7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bce:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a33      	ldr	r2, [pc, #204]	@ (8006cc8 <UART_RxISR_16BIT+0x1b4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01f      	beq.n	8006c40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d018      	beq.n	8006c40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e6      	bne.n	8006c0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d12e      	bne.n	8006ca6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f023 0310 	bic.w	r3, r3, #16
 8006c62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6979      	ldr	r1, [r7, #20]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d103      	bne.n	8006c96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2210      	movs	r2, #16
 8006c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff f800 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ca4:	e00b      	b.n	8006cbe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fb fa4e 	bl	8002148 <HAL_UART_RxCpltCallback>
}
 8006cac:	e007      	b.n	8006cbe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0208 	orr.w	r2, r2, #8
 8006cbc:	619a      	str	r2, [r3, #24]
}
 8006cbe:	bf00      	nop
 8006cc0:	3770      	adds	r7, #112	@ 0x70
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40008000 	.word	0x40008000

08006ccc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b0ac      	sub	sp, #176	@ 0xb0
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cda:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d02:	2b22      	cmp	r3, #34	@ 0x22
 8006d04:	f040 8183 	bne.w	800700e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d0e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d12:	e126      	b.n	8006f62 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006d22:	b2d9      	uxtb	r1, r3
 8006d24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2e:	400a      	ands	r2, r1
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d053      	beq.n	8006e0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d011      	beq.n	8006d96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2201      	movs	r2, #1
 8006d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8c:	f043 0201 	orr.w	r2, r3, #1
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d011      	beq.n	8006dc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2202      	movs	r2, #2
 8006db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbc:	f043 0204 	orr.w	r2, r3, #4
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d011      	beq.n	8006df6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00b      	beq.n	8006df6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2204      	movs	r2, #4
 8006de4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dec:	f043 0202 	orr.w	r2, r3, #2
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d006      	beq.n	8006e0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe ff45 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80a3 	bne.w	8006f62 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e40:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006e44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006e4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e4      	bne.n	8006e1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e7a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006e7c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006e80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006e88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e1      	bne.n	8006e52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a60      	ldr	r2, [pc, #384]	@ (8007028 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d021      	beq.n	8006ef0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01a      	beq.n	8006ef0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006edc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ede:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ee2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e4      	bne.n	8006eba <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d130      	bne.n	8006f5a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	f023 0310 	bic.w	r3, r3, #16
 8006f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e4      	bne.n	8006efe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d103      	bne.n	8006f4a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2210      	movs	r2, #16
 8006f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fe fea6 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006f58:	e00e      	b.n	8006f78 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fb f8f4 	bl	8002148 <HAL_UART_RxCpltCallback>
        break;
 8006f60:	e00a      	b.n	8006f78 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f62:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d006      	beq.n	8006f78 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f47f aece 	bne.w	8006d14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f7e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d049      	beq.n	800701e <UART_RxISR_8BIT_FIFOEN+0x352>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f90:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d242      	bcs.n	800701e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006fbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e3      	bne.n	8006f98 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a16      	ldr	r2, [pc, #88]	@ (800702c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006fd4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f043 0320 	orr.w	r3, r3, #32
 8006fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6979      	ldr	r1, [r7, #20]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	613b      	str	r3, [r7, #16]
   return(result);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e4      	bne.n	8006fd6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800700c:	e007      	b.n	800701e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	699a      	ldr	r2, [r3, #24]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0208 	orr.w	r2, r2, #8
 800701c:	619a      	str	r2, [r3, #24]
}
 800701e:	bf00      	nop
 8007020:	37b0      	adds	r7, #176	@ 0xb0
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40008000 	.word	0x40008000
 800702c:	0800695d 	.word	0x0800695d

08007030 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b0ae      	sub	sp, #184	@ 0xb8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800703e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007066:	2b22      	cmp	r3, #34	@ 0x22
 8007068:	f040 8187 	bne.w	800737a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007072:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007076:	e12a      	b.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800708a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800708e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007092:	4013      	ands	r3, r2
 8007094:	b29a      	uxth	r2, r3
 8007096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800709a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a0:	1c9a      	adds	r2, r3, #2
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d053      	beq.n	8007176 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d011      	beq.n	80070fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80070da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00b      	beq.n	80070fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2201      	movs	r2, #1
 80070ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f4:	f043 0201 	orr.w	r2, r3, #1
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d011      	beq.n	800712e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800710a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2202      	movs	r2, #2
 800711c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007124:	f043 0204 	orr.w	r2, r3, #4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800712e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d011      	beq.n	800715e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800713a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00b      	beq.n	800715e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2204      	movs	r2, #4
 800714c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007154:	f043 0202 	orr.w	r2, r3, #2
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007164:	2b00      	cmp	r3, #0
 8007166:	d006      	beq.n	8007176 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fe fd91 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 80a5 	bne.w	80072ce <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007198:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e2      	bne.n	8007184 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80071e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e1      	bne.n	80071be <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a60      	ldr	r2, [pc, #384]	@ (8007394 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d021      	beq.n	800725c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01a      	beq.n	800725c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007236:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800723a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007248:	65bb      	str	r3, [r7, #88]	@ 0x58
 800724a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800724e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e4      	bne.n	8007226 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d130      	bne.n	80072c6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727a:	f023 0310 	bic.w	r3, r3, #16
 800727e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800728c:	647b      	str	r3, [r7, #68]	@ 0x44
 800728e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800729a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e4      	bne.n	800726a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f003 0310 	and.w	r3, r3, #16
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d103      	bne.n	80072b6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2210      	movs	r2, #16
 80072b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fe fcf0 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80072c4:	e00e      	b.n	80072e4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fa ff3e 	bl	8002148 <HAL_UART_RxCpltCallback>
        break;
 80072cc:	e00a      	b.n	80072e4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072ce:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d006      	beq.n	80072e4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80072d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f47f aeca 	bne.w	8007078 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072ea:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d049      	beq.n	800738a <UART_RxISR_16BIT_FIFOEN+0x35a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072fc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007300:	429a      	cmp	r2, r3
 8007302:	d242      	bcs.n	800738a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3308      	adds	r3, #8
 800730a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	623b      	str	r3, [r7, #32]
   return(result);
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800731a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007328:	633a      	str	r2, [r7, #48]	@ 0x30
 800732a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800732e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e3      	bne.n	8007304 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a16      	ldr	r2, [pc, #88]	@ (8007398 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007340:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f043 0320 	orr.w	r3, r3, #32
 8007356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	617b      	str	r3, [r7, #20]
   return(result);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e4      	bne.n	8007342 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007378:	e007      	b.n	800738a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699a      	ldr	r2, [r3, #24]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0208 	orr.w	r2, r2, #8
 8007388:	619a      	str	r2, [r3, #24]
}
 800738a:	bf00      	nop
 800738c:	37b8      	adds	r7, #184	@ 0xb8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40008000 	.word	0x40008000
 8007398:	08006b15 	.word	0x08006b15

0800739c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_UARTEx_DisableFifoMode+0x16>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e027      	b.n	800743e <HAL_UARTEx_DisableFifoMode+0x66>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2224      	movs	r2, #36	@ 0x24
 80073fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0201 	bic.w	r2, r2, #1
 8007414:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800741c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800745a:	2b01      	cmp	r3, #1
 800745c:	d101      	bne.n	8007462 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800745e:	2302      	movs	r3, #2
 8007460:	e02d      	b.n	80074be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2224      	movs	r2, #36	@ 0x24
 800746e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f850 	bl	8007544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074da:	2302      	movs	r3, #2
 80074dc:	e02d      	b.n	800753a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2224      	movs	r2, #36	@ 0x24
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0201 	bic.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f812 	bl	8007544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007550:	2b00      	cmp	r3, #0
 8007552:	d108      	bne.n	8007566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007564:	e031      	b.n	80075ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007566:	2308      	movs	r3, #8
 8007568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800756a:	2308      	movs	r3, #8
 800756c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	0e5b      	lsrs	r3, r3, #25
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	0f5b      	lsrs	r3, r3, #29
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	7b3a      	ldrb	r2, [r7, #12]
 8007592:	4911      	ldr	r1, [pc, #68]	@ (80075d8 <UARTEx_SetNbDataToProcess+0x94>)
 8007594:	5c8a      	ldrb	r2, [r1, r2]
 8007596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800759a:	7b3a      	ldrb	r2, [r7, #12]
 800759c:	490f      	ldr	r1, [pc, #60]	@ (80075dc <UARTEx_SetNbDataToProcess+0x98>)
 800759e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	7b7a      	ldrb	r2, [r7, #13]
 80075b0:	4909      	ldr	r1, [pc, #36]	@ (80075d8 <UARTEx_SetNbDataToProcess+0x94>)
 80075b2:	5c8a      	ldrb	r2, [r1, r2]
 80075b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075b8:	7b7a      	ldrb	r2, [r7, #13]
 80075ba:	4908      	ldr	r1, [pc, #32]	@ (80075dc <UARTEx_SetNbDataToProcess+0x98>)
 80075bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075be:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	0800a364 	.word	0x0800a364
 80075dc:	0800a36c 	.word	0x0800a36c

080075e0 <atof>:
 80075e0:	2100      	movs	r1, #0
 80075e2:	f000 be05 	b.w	80081f0 <strtod>

080075e6 <sulp>:
 80075e6:	b570      	push	{r4, r5, r6, lr}
 80075e8:	4604      	mov	r4, r0
 80075ea:	460d      	mov	r5, r1
 80075ec:	ec45 4b10 	vmov	d0, r4, r5
 80075f0:	4616      	mov	r6, r2
 80075f2:	f001 ffef 	bl	80095d4 <__ulp>
 80075f6:	ec51 0b10 	vmov	r0, r1, d0
 80075fa:	b17e      	cbz	r6, 800761c <sulp+0x36>
 80075fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007600:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007604:	2b00      	cmp	r3, #0
 8007606:	dd09      	ble.n	800761c <sulp+0x36>
 8007608:	051b      	lsls	r3, r3, #20
 800760a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800760e:	2400      	movs	r4, #0
 8007610:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007614:	4622      	mov	r2, r4
 8007616:	462b      	mov	r3, r5
 8007618:	f7f9 f826 	bl	8000668 <__aeabi_dmul>
 800761c:	ec41 0b10 	vmov	d0, r0, r1
 8007620:	bd70      	pop	{r4, r5, r6, pc}
 8007622:	0000      	movs	r0, r0
 8007624:	0000      	movs	r0, r0
	...

08007628 <_strtod_l>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	b09f      	sub	sp, #124	@ 0x7c
 800762e:	460c      	mov	r4, r1
 8007630:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007632:	2200      	movs	r2, #0
 8007634:	921a      	str	r2, [sp, #104]	@ 0x68
 8007636:	9005      	str	r0, [sp, #20]
 8007638:	f04f 0a00 	mov.w	sl, #0
 800763c:	f04f 0b00 	mov.w	fp, #0
 8007640:	460a      	mov	r2, r1
 8007642:	9219      	str	r2, [sp, #100]	@ 0x64
 8007644:	7811      	ldrb	r1, [r2, #0]
 8007646:	292b      	cmp	r1, #43	@ 0x2b
 8007648:	d04a      	beq.n	80076e0 <_strtod_l+0xb8>
 800764a:	d838      	bhi.n	80076be <_strtod_l+0x96>
 800764c:	290d      	cmp	r1, #13
 800764e:	d832      	bhi.n	80076b6 <_strtod_l+0x8e>
 8007650:	2908      	cmp	r1, #8
 8007652:	d832      	bhi.n	80076ba <_strtod_l+0x92>
 8007654:	2900      	cmp	r1, #0
 8007656:	d03b      	beq.n	80076d0 <_strtod_l+0xa8>
 8007658:	2200      	movs	r2, #0
 800765a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800765c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800765e:	782a      	ldrb	r2, [r5, #0]
 8007660:	2a30      	cmp	r2, #48	@ 0x30
 8007662:	f040 80b3 	bne.w	80077cc <_strtod_l+0x1a4>
 8007666:	786a      	ldrb	r2, [r5, #1]
 8007668:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800766c:	2a58      	cmp	r2, #88	@ 0x58
 800766e:	d16e      	bne.n	800774e <_strtod_l+0x126>
 8007670:	9302      	str	r3, [sp, #8]
 8007672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	ab1a      	add	r3, sp, #104	@ 0x68
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	4a8e      	ldr	r2, [pc, #568]	@ (80078b4 <_strtod_l+0x28c>)
 800767c:	9805      	ldr	r0, [sp, #20]
 800767e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007680:	a919      	add	r1, sp, #100	@ 0x64
 8007682:	f001 f899 	bl	80087b8 <__gethex>
 8007686:	f010 060f 	ands.w	r6, r0, #15
 800768a:	4604      	mov	r4, r0
 800768c:	d005      	beq.n	800769a <_strtod_l+0x72>
 800768e:	2e06      	cmp	r6, #6
 8007690:	d128      	bne.n	80076e4 <_strtod_l+0xbc>
 8007692:	3501      	adds	r5, #1
 8007694:	2300      	movs	r3, #0
 8007696:	9519      	str	r5, [sp, #100]	@ 0x64
 8007698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800769a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800769c:	2b00      	cmp	r3, #0
 800769e:	f040 858e 	bne.w	80081be <_strtod_l+0xb96>
 80076a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a4:	b1cb      	cbz	r3, 80076da <_strtod_l+0xb2>
 80076a6:	4652      	mov	r2, sl
 80076a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80076ac:	ec43 2b10 	vmov	d0, r2, r3
 80076b0:	b01f      	add	sp, #124	@ 0x7c
 80076b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b6:	2920      	cmp	r1, #32
 80076b8:	d1ce      	bne.n	8007658 <_strtod_l+0x30>
 80076ba:	3201      	adds	r2, #1
 80076bc:	e7c1      	b.n	8007642 <_strtod_l+0x1a>
 80076be:	292d      	cmp	r1, #45	@ 0x2d
 80076c0:	d1ca      	bne.n	8007658 <_strtod_l+0x30>
 80076c2:	2101      	movs	r1, #1
 80076c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80076c6:	1c51      	adds	r1, r2, #1
 80076c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80076ca:	7852      	ldrb	r2, [r2, #1]
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	d1c5      	bne.n	800765c <_strtod_l+0x34>
 80076d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f040 8570 	bne.w	80081ba <_strtod_l+0xb92>
 80076da:	4652      	mov	r2, sl
 80076dc:	465b      	mov	r3, fp
 80076de:	e7e5      	b.n	80076ac <_strtod_l+0x84>
 80076e0:	2100      	movs	r1, #0
 80076e2:	e7ef      	b.n	80076c4 <_strtod_l+0x9c>
 80076e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80076e6:	b13a      	cbz	r2, 80076f8 <_strtod_l+0xd0>
 80076e8:	2135      	movs	r1, #53	@ 0x35
 80076ea:	a81c      	add	r0, sp, #112	@ 0x70
 80076ec:	f002 f86c 	bl	80097c8 <__copybits>
 80076f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076f2:	9805      	ldr	r0, [sp, #20]
 80076f4:	f001 fc3a 	bl	8008f6c <_Bfree>
 80076f8:	3e01      	subs	r6, #1
 80076fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80076fc:	2e04      	cmp	r6, #4
 80076fe:	d806      	bhi.n	800770e <_strtod_l+0xe6>
 8007700:	e8df f006 	tbb	[pc, r6]
 8007704:	201d0314 	.word	0x201d0314
 8007708:	14          	.byte	0x14
 8007709:	00          	.byte	0x00
 800770a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800770e:	05e1      	lsls	r1, r4, #23
 8007710:	bf48      	it	mi
 8007712:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007716:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800771a:	0d1b      	lsrs	r3, r3, #20
 800771c:	051b      	lsls	r3, r3, #20
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1bb      	bne.n	800769a <_strtod_l+0x72>
 8007722:	f000 ff33 	bl	800858c <__errno>
 8007726:	2322      	movs	r3, #34	@ 0x22
 8007728:	6003      	str	r3, [r0, #0]
 800772a:	e7b6      	b.n	800769a <_strtod_l+0x72>
 800772c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007730:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007734:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007738:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800773c:	e7e7      	b.n	800770e <_strtod_l+0xe6>
 800773e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80078bc <_strtod_l+0x294>
 8007742:	e7e4      	b.n	800770e <_strtod_l+0xe6>
 8007744:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007748:	f04f 3aff 	mov.w	sl, #4294967295
 800774c:	e7df      	b.n	800770e <_strtod_l+0xe6>
 800774e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	9219      	str	r2, [sp, #100]	@ 0x64
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	2b30      	cmp	r3, #48	@ 0x30
 8007758:	d0f9      	beq.n	800774e <_strtod_l+0x126>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d09d      	beq.n	800769a <_strtod_l+0x72>
 800775e:	2301      	movs	r3, #1
 8007760:	9309      	str	r3, [sp, #36]	@ 0x24
 8007762:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007764:	930c      	str	r3, [sp, #48]	@ 0x30
 8007766:	2300      	movs	r3, #0
 8007768:	9308      	str	r3, [sp, #32]
 800776a:	930a      	str	r3, [sp, #40]	@ 0x28
 800776c:	461f      	mov	r7, r3
 800776e:	220a      	movs	r2, #10
 8007770:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007772:	7805      	ldrb	r5, [r0, #0]
 8007774:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007778:	b2d9      	uxtb	r1, r3
 800777a:	2909      	cmp	r1, #9
 800777c:	d928      	bls.n	80077d0 <_strtod_l+0x1a8>
 800777e:	494e      	ldr	r1, [pc, #312]	@ (80078b8 <_strtod_l+0x290>)
 8007780:	2201      	movs	r2, #1
 8007782:	f000 fe4e 	bl	8008422 <strncmp>
 8007786:	2800      	cmp	r0, #0
 8007788:	d032      	beq.n	80077f0 <_strtod_l+0x1c8>
 800778a:	2000      	movs	r0, #0
 800778c:	462a      	mov	r2, r5
 800778e:	4681      	mov	r9, r0
 8007790:	463d      	mov	r5, r7
 8007792:	4603      	mov	r3, r0
 8007794:	2a65      	cmp	r2, #101	@ 0x65
 8007796:	d001      	beq.n	800779c <_strtod_l+0x174>
 8007798:	2a45      	cmp	r2, #69	@ 0x45
 800779a:	d114      	bne.n	80077c6 <_strtod_l+0x19e>
 800779c:	b91d      	cbnz	r5, 80077a6 <_strtod_l+0x17e>
 800779e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077a0:	4302      	orrs	r2, r0
 80077a2:	d095      	beq.n	80076d0 <_strtod_l+0xa8>
 80077a4:	2500      	movs	r5, #0
 80077a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80077a8:	1c62      	adds	r2, r4, #1
 80077aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80077ac:	7862      	ldrb	r2, [r4, #1]
 80077ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80077b0:	d077      	beq.n	80078a2 <_strtod_l+0x27a>
 80077b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80077b4:	d07b      	beq.n	80078ae <_strtod_l+0x286>
 80077b6:	f04f 0c00 	mov.w	ip, #0
 80077ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80077be:	2909      	cmp	r1, #9
 80077c0:	f240 8082 	bls.w	80078c8 <_strtod_l+0x2a0>
 80077c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80077c6:	f04f 0800 	mov.w	r8, #0
 80077ca:	e0a2      	b.n	8007912 <_strtod_l+0x2ea>
 80077cc:	2300      	movs	r3, #0
 80077ce:	e7c7      	b.n	8007760 <_strtod_l+0x138>
 80077d0:	2f08      	cmp	r7, #8
 80077d2:	bfd5      	itete	le
 80077d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80077d6:	9908      	ldrgt	r1, [sp, #32]
 80077d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80077dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80077e0:	f100 0001 	add.w	r0, r0, #1
 80077e4:	bfd4      	ite	le
 80077e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80077e8:	9308      	strgt	r3, [sp, #32]
 80077ea:	3701      	adds	r7, #1
 80077ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80077ee:	e7bf      	b.n	8007770 <_strtod_l+0x148>
 80077f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80077f6:	785a      	ldrb	r2, [r3, #1]
 80077f8:	b37f      	cbz	r7, 800785a <_strtod_l+0x232>
 80077fa:	4681      	mov	r9, r0
 80077fc:	463d      	mov	r5, r7
 80077fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007802:	2b09      	cmp	r3, #9
 8007804:	d912      	bls.n	800782c <_strtod_l+0x204>
 8007806:	2301      	movs	r3, #1
 8007808:	e7c4      	b.n	8007794 <_strtod_l+0x16c>
 800780a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007810:	785a      	ldrb	r2, [r3, #1]
 8007812:	3001      	adds	r0, #1
 8007814:	2a30      	cmp	r2, #48	@ 0x30
 8007816:	d0f8      	beq.n	800780a <_strtod_l+0x1e2>
 8007818:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800781c:	2b08      	cmp	r3, #8
 800781e:	f200 84d3 	bhi.w	80081c8 <_strtod_l+0xba0>
 8007822:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007824:	930c      	str	r3, [sp, #48]	@ 0x30
 8007826:	4681      	mov	r9, r0
 8007828:	2000      	movs	r0, #0
 800782a:	4605      	mov	r5, r0
 800782c:	3a30      	subs	r2, #48	@ 0x30
 800782e:	f100 0301 	add.w	r3, r0, #1
 8007832:	d02a      	beq.n	800788a <_strtod_l+0x262>
 8007834:	4499      	add	r9, r3
 8007836:	eb00 0c05 	add.w	ip, r0, r5
 800783a:	462b      	mov	r3, r5
 800783c:	210a      	movs	r1, #10
 800783e:	4563      	cmp	r3, ip
 8007840:	d10d      	bne.n	800785e <_strtod_l+0x236>
 8007842:	1c69      	adds	r1, r5, #1
 8007844:	4401      	add	r1, r0
 8007846:	4428      	add	r0, r5
 8007848:	2808      	cmp	r0, #8
 800784a:	dc16      	bgt.n	800787a <_strtod_l+0x252>
 800784c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800784e:	230a      	movs	r3, #10
 8007850:	fb03 2300 	mla	r3, r3, r0, r2
 8007854:	930a      	str	r3, [sp, #40]	@ 0x28
 8007856:	2300      	movs	r3, #0
 8007858:	e018      	b.n	800788c <_strtod_l+0x264>
 800785a:	4638      	mov	r0, r7
 800785c:	e7da      	b.n	8007814 <_strtod_l+0x1ec>
 800785e:	2b08      	cmp	r3, #8
 8007860:	f103 0301 	add.w	r3, r3, #1
 8007864:	dc03      	bgt.n	800786e <_strtod_l+0x246>
 8007866:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007868:	434e      	muls	r6, r1
 800786a:	960a      	str	r6, [sp, #40]	@ 0x28
 800786c:	e7e7      	b.n	800783e <_strtod_l+0x216>
 800786e:	2b10      	cmp	r3, #16
 8007870:	bfde      	ittt	le
 8007872:	9e08      	ldrle	r6, [sp, #32]
 8007874:	434e      	mulle	r6, r1
 8007876:	9608      	strle	r6, [sp, #32]
 8007878:	e7e1      	b.n	800783e <_strtod_l+0x216>
 800787a:	280f      	cmp	r0, #15
 800787c:	dceb      	bgt.n	8007856 <_strtod_l+0x22e>
 800787e:	9808      	ldr	r0, [sp, #32]
 8007880:	230a      	movs	r3, #10
 8007882:	fb03 2300 	mla	r3, r3, r0, r2
 8007886:	9308      	str	r3, [sp, #32]
 8007888:	e7e5      	b.n	8007856 <_strtod_l+0x22e>
 800788a:	4629      	mov	r1, r5
 800788c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800788e:	1c50      	adds	r0, r2, #1
 8007890:	9019      	str	r0, [sp, #100]	@ 0x64
 8007892:	7852      	ldrb	r2, [r2, #1]
 8007894:	4618      	mov	r0, r3
 8007896:	460d      	mov	r5, r1
 8007898:	e7b1      	b.n	80077fe <_strtod_l+0x1d6>
 800789a:	f04f 0900 	mov.w	r9, #0
 800789e:	2301      	movs	r3, #1
 80078a0:	e77d      	b.n	800779e <_strtod_l+0x176>
 80078a2:	f04f 0c00 	mov.w	ip, #0
 80078a6:	1ca2      	adds	r2, r4, #2
 80078a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80078aa:	78a2      	ldrb	r2, [r4, #2]
 80078ac:	e785      	b.n	80077ba <_strtod_l+0x192>
 80078ae:	f04f 0c01 	mov.w	ip, #1
 80078b2:	e7f8      	b.n	80078a6 <_strtod_l+0x27e>
 80078b4:	0800a398 	.word	0x0800a398
 80078b8:	0800a374 	.word	0x0800a374
 80078bc:	7ff00000 	.word	0x7ff00000
 80078c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078c2:	1c51      	adds	r1, r2, #1
 80078c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80078c6:	7852      	ldrb	r2, [r2, #1]
 80078c8:	2a30      	cmp	r2, #48	@ 0x30
 80078ca:	d0f9      	beq.n	80078c0 <_strtod_l+0x298>
 80078cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80078d0:	2908      	cmp	r1, #8
 80078d2:	f63f af78 	bhi.w	80077c6 <_strtod_l+0x19e>
 80078d6:	3a30      	subs	r2, #48	@ 0x30
 80078d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80078da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80078de:	f04f 080a 	mov.w	r8, #10
 80078e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078e4:	1c56      	adds	r6, r2, #1
 80078e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80078e8:	7852      	ldrb	r2, [r2, #1]
 80078ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80078ee:	f1be 0f09 	cmp.w	lr, #9
 80078f2:	d939      	bls.n	8007968 <_strtod_l+0x340>
 80078f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80078f6:	1a76      	subs	r6, r6, r1
 80078f8:	2e08      	cmp	r6, #8
 80078fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80078fe:	dc03      	bgt.n	8007908 <_strtod_l+0x2e0>
 8007900:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007902:	4588      	cmp	r8, r1
 8007904:	bfa8      	it	ge
 8007906:	4688      	movge	r8, r1
 8007908:	f1bc 0f00 	cmp.w	ip, #0
 800790c:	d001      	beq.n	8007912 <_strtod_l+0x2ea>
 800790e:	f1c8 0800 	rsb	r8, r8, #0
 8007912:	2d00      	cmp	r5, #0
 8007914:	d14e      	bne.n	80079b4 <_strtod_l+0x38c>
 8007916:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007918:	4308      	orrs	r0, r1
 800791a:	f47f aebe 	bne.w	800769a <_strtod_l+0x72>
 800791e:	2b00      	cmp	r3, #0
 8007920:	f47f aed6 	bne.w	80076d0 <_strtod_l+0xa8>
 8007924:	2a69      	cmp	r2, #105	@ 0x69
 8007926:	d028      	beq.n	800797a <_strtod_l+0x352>
 8007928:	dc25      	bgt.n	8007976 <_strtod_l+0x34e>
 800792a:	2a49      	cmp	r2, #73	@ 0x49
 800792c:	d025      	beq.n	800797a <_strtod_l+0x352>
 800792e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007930:	f47f aece 	bne.w	80076d0 <_strtod_l+0xa8>
 8007934:	499b      	ldr	r1, [pc, #620]	@ (8007ba4 <_strtod_l+0x57c>)
 8007936:	a819      	add	r0, sp, #100	@ 0x64
 8007938:	f001 f960 	bl	8008bfc <__match>
 800793c:	2800      	cmp	r0, #0
 800793e:	f43f aec7 	beq.w	80076d0 <_strtod_l+0xa8>
 8007942:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b28      	cmp	r3, #40	@ 0x28
 8007948:	d12e      	bne.n	80079a8 <_strtod_l+0x380>
 800794a:	4997      	ldr	r1, [pc, #604]	@ (8007ba8 <_strtod_l+0x580>)
 800794c:	aa1c      	add	r2, sp, #112	@ 0x70
 800794e:	a819      	add	r0, sp, #100	@ 0x64
 8007950:	f001 f968 	bl	8008c24 <__hexnan>
 8007954:	2805      	cmp	r0, #5
 8007956:	d127      	bne.n	80079a8 <_strtod_l+0x380>
 8007958:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800795a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800795e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007962:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007966:	e698      	b.n	800769a <_strtod_l+0x72>
 8007968:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800796a:	fb08 2101 	mla	r1, r8, r1, r2
 800796e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007972:	920e      	str	r2, [sp, #56]	@ 0x38
 8007974:	e7b5      	b.n	80078e2 <_strtod_l+0x2ba>
 8007976:	2a6e      	cmp	r2, #110	@ 0x6e
 8007978:	e7da      	b.n	8007930 <_strtod_l+0x308>
 800797a:	498c      	ldr	r1, [pc, #560]	@ (8007bac <_strtod_l+0x584>)
 800797c:	a819      	add	r0, sp, #100	@ 0x64
 800797e:	f001 f93d 	bl	8008bfc <__match>
 8007982:	2800      	cmp	r0, #0
 8007984:	f43f aea4 	beq.w	80076d0 <_strtod_l+0xa8>
 8007988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800798a:	4989      	ldr	r1, [pc, #548]	@ (8007bb0 <_strtod_l+0x588>)
 800798c:	3b01      	subs	r3, #1
 800798e:	a819      	add	r0, sp, #100	@ 0x64
 8007990:	9319      	str	r3, [sp, #100]	@ 0x64
 8007992:	f001 f933 	bl	8008bfc <__match>
 8007996:	b910      	cbnz	r0, 800799e <_strtod_l+0x376>
 8007998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800799a:	3301      	adds	r3, #1
 800799c:	9319      	str	r3, [sp, #100]	@ 0x64
 800799e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007bc0 <_strtod_l+0x598>
 80079a2:	f04f 0a00 	mov.w	sl, #0
 80079a6:	e678      	b.n	800769a <_strtod_l+0x72>
 80079a8:	4882      	ldr	r0, [pc, #520]	@ (8007bb4 <_strtod_l+0x58c>)
 80079aa:	f000 fe2d 	bl	8008608 <nan>
 80079ae:	ec5b ab10 	vmov	sl, fp, d0
 80079b2:	e672      	b.n	800769a <_strtod_l+0x72>
 80079b4:	eba8 0309 	sub.w	r3, r8, r9
 80079b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80079bc:	2f00      	cmp	r7, #0
 80079be:	bf08      	it	eq
 80079c0:	462f      	moveq	r7, r5
 80079c2:	2d10      	cmp	r5, #16
 80079c4:	462c      	mov	r4, r5
 80079c6:	bfa8      	it	ge
 80079c8:	2410      	movge	r4, #16
 80079ca:	f7f8 fdd3 	bl	8000574 <__aeabi_ui2d>
 80079ce:	2d09      	cmp	r5, #9
 80079d0:	4682      	mov	sl, r0
 80079d2:	468b      	mov	fp, r1
 80079d4:	dc13      	bgt.n	80079fe <_strtod_l+0x3d6>
 80079d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f43f ae5e 	beq.w	800769a <_strtod_l+0x72>
 80079de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e0:	dd78      	ble.n	8007ad4 <_strtod_l+0x4ac>
 80079e2:	2b16      	cmp	r3, #22
 80079e4:	dc5f      	bgt.n	8007aa6 <_strtod_l+0x47e>
 80079e6:	4974      	ldr	r1, [pc, #464]	@ (8007bb8 <_strtod_l+0x590>)
 80079e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f0:	4652      	mov	r2, sl
 80079f2:	465b      	mov	r3, fp
 80079f4:	f7f8 fe38 	bl	8000668 <__aeabi_dmul>
 80079f8:	4682      	mov	sl, r0
 80079fa:	468b      	mov	fp, r1
 80079fc:	e64d      	b.n	800769a <_strtod_l+0x72>
 80079fe:	4b6e      	ldr	r3, [pc, #440]	@ (8007bb8 <_strtod_l+0x590>)
 8007a00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007a08:	f7f8 fe2e 	bl	8000668 <__aeabi_dmul>
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	9808      	ldr	r0, [sp, #32]
 8007a10:	468b      	mov	fp, r1
 8007a12:	f7f8 fdaf 	bl	8000574 <__aeabi_ui2d>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	4659      	mov	r1, fp
 8007a1e:	f7f8 fc6d 	bl	80002fc <__adddf3>
 8007a22:	2d0f      	cmp	r5, #15
 8007a24:	4682      	mov	sl, r0
 8007a26:	468b      	mov	fp, r1
 8007a28:	ddd5      	ble.n	80079d6 <_strtod_l+0x3ae>
 8007a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a2c:	1b2c      	subs	r4, r5, r4
 8007a2e:	441c      	add	r4, r3
 8007a30:	2c00      	cmp	r4, #0
 8007a32:	f340 8096 	ble.w	8007b62 <_strtod_l+0x53a>
 8007a36:	f014 030f 	ands.w	r3, r4, #15
 8007a3a:	d00a      	beq.n	8007a52 <_strtod_l+0x42a>
 8007a3c:	495e      	ldr	r1, [pc, #376]	@ (8007bb8 <_strtod_l+0x590>)
 8007a3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a42:	4652      	mov	r2, sl
 8007a44:	465b      	mov	r3, fp
 8007a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a4a:	f7f8 fe0d 	bl	8000668 <__aeabi_dmul>
 8007a4e:	4682      	mov	sl, r0
 8007a50:	468b      	mov	fp, r1
 8007a52:	f034 040f 	bics.w	r4, r4, #15
 8007a56:	d073      	beq.n	8007b40 <_strtod_l+0x518>
 8007a58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007a5c:	dd48      	ble.n	8007af0 <_strtod_l+0x4c8>
 8007a5e:	2400      	movs	r4, #0
 8007a60:	46a0      	mov	r8, r4
 8007a62:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a64:	46a1      	mov	r9, r4
 8007a66:	9a05      	ldr	r2, [sp, #20]
 8007a68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007bc0 <_strtod_l+0x598>
 8007a6c:	2322      	movs	r3, #34	@ 0x22
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	f04f 0a00 	mov.w	sl, #0
 8007a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f43f ae0f 	beq.w	800769a <_strtod_l+0x72>
 8007a7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a7e:	9805      	ldr	r0, [sp, #20]
 8007a80:	f001 fa74 	bl	8008f6c <_Bfree>
 8007a84:	9805      	ldr	r0, [sp, #20]
 8007a86:	4649      	mov	r1, r9
 8007a88:	f001 fa70 	bl	8008f6c <_Bfree>
 8007a8c:	9805      	ldr	r0, [sp, #20]
 8007a8e:	4641      	mov	r1, r8
 8007a90:	f001 fa6c 	bl	8008f6c <_Bfree>
 8007a94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a96:	9805      	ldr	r0, [sp, #20]
 8007a98:	f001 fa68 	bl	8008f6c <_Bfree>
 8007a9c:	9805      	ldr	r0, [sp, #20]
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	f001 fa64 	bl	8008f6c <_Bfree>
 8007aa4:	e5f9      	b.n	800769a <_strtod_l+0x72>
 8007aa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aa8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007aac:	4293      	cmp	r3, r2
 8007aae:	dbbc      	blt.n	8007a2a <_strtod_l+0x402>
 8007ab0:	4c41      	ldr	r4, [pc, #260]	@ (8007bb8 <_strtod_l+0x590>)
 8007ab2:	f1c5 050f 	rsb	r5, r5, #15
 8007ab6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007aba:	4652      	mov	r2, sl
 8007abc:	465b      	mov	r3, fp
 8007abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ac2:	f7f8 fdd1 	bl	8000668 <__aeabi_dmul>
 8007ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac8:	1b5d      	subs	r5, r3, r5
 8007aca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ace:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ad2:	e78f      	b.n	80079f4 <_strtod_l+0x3cc>
 8007ad4:	3316      	adds	r3, #22
 8007ad6:	dba8      	blt.n	8007a2a <_strtod_l+0x402>
 8007ad8:	4b37      	ldr	r3, [pc, #220]	@ (8007bb8 <_strtod_l+0x590>)
 8007ada:	eba9 0808 	sub.w	r8, r9, r8
 8007ade:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007ae2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	4659      	mov	r1, fp
 8007aea:	f7f8 fee7 	bl	80008bc <__aeabi_ddiv>
 8007aee:	e783      	b.n	80079f8 <_strtod_l+0x3d0>
 8007af0:	4b32      	ldr	r3, [pc, #200]	@ (8007bbc <_strtod_l+0x594>)
 8007af2:	9308      	str	r3, [sp, #32]
 8007af4:	2300      	movs	r3, #0
 8007af6:	1124      	asrs	r4, r4, #4
 8007af8:	4650      	mov	r0, sl
 8007afa:	4659      	mov	r1, fp
 8007afc:	461e      	mov	r6, r3
 8007afe:	2c01      	cmp	r4, #1
 8007b00:	dc21      	bgt.n	8007b46 <_strtod_l+0x51e>
 8007b02:	b10b      	cbz	r3, 8007b08 <_strtod_l+0x4e0>
 8007b04:	4682      	mov	sl, r0
 8007b06:	468b      	mov	fp, r1
 8007b08:	492c      	ldr	r1, [pc, #176]	@ (8007bbc <_strtod_l+0x594>)
 8007b0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007b12:	4652      	mov	r2, sl
 8007b14:	465b      	mov	r3, fp
 8007b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b1a:	f7f8 fda5 	bl	8000668 <__aeabi_dmul>
 8007b1e:	4b28      	ldr	r3, [pc, #160]	@ (8007bc0 <_strtod_l+0x598>)
 8007b20:	460a      	mov	r2, r1
 8007b22:	400b      	ands	r3, r1
 8007b24:	4927      	ldr	r1, [pc, #156]	@ (8007bc4 <_strtod_l+0x59c>)
 8007b26:	428b      	cmp	r3, r1
 8007b28:	4682      	mov	sl, r0
 8007b2a:	d898      	bhi.n	8007a5e <_strtod_l+0x436>
 8007b2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007b30:	428b      	cmp	r3, r1
 8007b32:	bf86      	itte	hi
 8007b34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007bc8 <_strtod_l+0x5a0>
 8007b38:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007b40:	2300      	movs	r3, #0
 8007b42:	9308      	str	r3, [sp, #32]
 8007b44:	e07a      	b.n	8007c3c <_strtod_l+0x614>
 8007b46:	07e2      	lsls	r2, r4, #31
 8007b48:	d505      	bpl.n	8007b56 <_strtod_l+0x52e>
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	f7f8 fd8a 	bl	8000668 <__aeabi_dmul>
 8007b54:	2301      	movs	r3, #1
 8007b56:	9a08      	ldr	r2, [sp, #32]
 8007b58:	3208      	adds	r2, #8
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	1064      	asrs	r4, r4, #1
 8007b5e:	9208      	str	r2, [sp, #32]
 8007b60:	e7cd      	b.n	8007afe <_strtod_l+0x4d6>
 8007b62:	d0ed      	beq.n	8007b40 <_strtod_l+0x518>
 8007b64:	4264      	negs	r4, r4
 8007b66:	f014 020f 	ands.w	r2, r4, #15
 8007b6a:	d00a      	beq.n	8007b82 <_strtod_l+0x55a>
 8007b6c:	4b12      	ldr	r3, [pc, #72]	@ (8007bb8 <_strtod_l+0x590>)
 8007b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b72:	4650      	mov	r0, sl
 8007b74:	4659      	mov	r1, fp
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f7f8 fe9f 	bl	80008bc <__aeabi_ddiv>
 8007b7e:	4682      	mov	sl, r0
 8007b80:	468b      	mov	fp, r1
 8007b82:	1124      	asrs	r4, r4, #4
 8007b84:	d0dc      	beq.n	8007b40 <_strtod_l+0x518>
 8007b86:	2c1f      	cmp	r4, #31
 8007b88:	dd20      	ble.n	8007bcc <_strtod_l+0x5a4>
 8007b8a:	2400      	movs	r4, #0
 8007b8c:	46a0      	mov	r8, r4
 8007b8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b90:	46a1      	mov	r9, r4
 8007b92:	9a05      	ldr	r2, [sp, #20]
 8007b94:	2322      	movs	r3, #34	@ 0x22
 8007b96:	f04f 0a00 	mov.w	sl, #0
 8007b9a:	f04f 0b00 	mov.w	fp, #0
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e768      	b.n	8007a74 <_strtod_l+0x44c>
 8007ba2:	bf00      	nop
 8007ba4:	0800a37f 	.word	0x0800a37f
 8007ba8:	0800a384 	.word	0x0800a384
 8007bac:	0800a376 	.word	0x0800a376
 8007bb0:	0800a379 	.word	0x0800a379
 8007bb4:	0800a48c 	.word	0x0800a48c
 8007bb8:	0800a590 	.word	0x0800a590
 8007bbc:	0800a568 	.word	0x0800a568
 8007bc0:	7ff00000 	.word	0x7ff00000
 8007bc4:	7ca00000 	.word	0x7ca00000
 8007bc8:	7fefffff 	.word	0x7fefffff
 8007bcc:	f014 0310 	ands.w	r3, r4, #16
 8007bd0:	bf18      	it	ne
 8007bd2:	236a      	movne	r3, #106	@ 0x6a
 8007bd4:	4ea9      	ldr	r6, [pc, #676]	@ (8007e7c <_strtod_l+0x854>)
 8007bd6:	9308      	str	r3, [sp, #32]
 8007bd8:	4650      	mov	r0, sl
 8007bda:	4659      	mov	r1, fp
 8007bdc:	2300      	movs	r3, #0
 8007bde:	07e2      	lsls	r2, r4, #31
 8007be0:	d504      	bpl.n	8007bec <_strtod_l+0x5c4>
 8007be2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007be6:	f7f8 fd3f 	bl	8000668 <__aeabi_dmul>
 8007bea:	2301      	movs	r3, #1
 8007bec:	1064      	asrs	r4, r4, #1
 8007bee:	f106 0608 	add.w	r6, r6, #8
 8007bf2:	d1f4      	bne.n	8007bde <_strtod_l+0x5b6>
 8007bf4:	b10b      	cbz	r3, 8007bfa <_strtod_l+0x5d2>
 8007bf6:	4682      	mov	sl, r0
 8007bf8:	468b      	mov	fp, r1
 8007bfa:	9b08      	ldr	r3, [sp, #32]
 8007bfc:	b1b3      	cbz	r3, 8007c2c <_strtod_l+0x604>
 8007bfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	4659      	mov	r1, fp
 8007c0a:	dd0f      	ble.n	8007c2c <_strtod_l+0x604>
 8007c0c:	2b1f      	cmp	r3, #31
 8007c0e:	dd55      	ble.n	8007cbc <_strtod_l+0x694>
 8007c10:	2b34      	cmp	r3, #52	@ 0x34
 8007c12:	bfde      	ittt	le
 8007c14:	f04f 33ff 	movle.w	r3, #4294967295
 8007c18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007c1c:	4093      	lslle	r3, r2
 8007c1e:	f04f 0a00 	mov.w	sl, #0
 8007c22:	bfcc      	ite	gt
 8007c24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007c28:	ea03 0b01 	andle.w	fp, r3, r1
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4650      	mov	r0, sl
 8007c32:	4659      	mov	r1, fp
 8007c34:	f7f8 ff80 	bl	8000b38 <__aeabi_dcmpeq>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d1a6      	bne.n	8007b8a <_strtod_l+0x562>
 8007c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007c42:	9805      	ldr	r0, [sp, #20]
 8007c44:	462b      	mov	r3, r5
 8007c46:	463a      	mov	r2, r7
 8007c48:	f001 f9f8 	bl	800903c <__s2b>
 8007c4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f af05 	beq.w	8007a5e <_strtod_l+0x436>
 8007c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c56:	2a00      	cmp	r2, #0
 8007c58:	eba9 0308 	sub.w	r3, r9, r8
 8007c5c:	bfa8      	it	ge
 8007c5e:	2300      	movge	r3, #0
 8007c60:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c62:	2400      	movs	r4, #0
 8007c64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c68:	9316      	str	r3, [sp, #88]	@ 0x58
 8007c6a:	46a0      	mov	r8, r4
 8007c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c6e:	9805      	ldr	r0, [sp, #20]
 8007c70:	6859      	ldr	r1, [r3, #4]
 8007c72:	f001 f93b 	bl	8008eec <_Balloc>
 8007c76:	4681      	mov	r9, r0
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f43f aef4 	beq.w	8007a66 <_strtod_l+0x43e>
 8007c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	3202      	adds	r2, #2
 8007c84:	f103 010c 	add.w	r1, r3, #12
 8007c88:	0092      	lsls	r2, r2, #2
 8007c8a:	300c      	adds	r0, #12
 8007c8c:	f000 fcab 	bl	80085e6 <memcpy>
 8007c90:	ec4b ab10 	vmov	d0, sl, fp
 8007c94:	9805      	ldr	r0, [sp, #20]
 8007c96:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c98:	a91b      	add	r1, sp, #108	@ 0x6c
 8007c9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007c9e:	f001 fd09 	bl	80096b4 <__d2b>
 8007ca2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f43f aede 	beq.w	8007a66 <_strtod_l+0x43e>
 8007caa:	9805      	ldr	r0, [sp, #20]
 8007cac:	2101      	movs	r1, #1
 8007cae:	f001 fa5b 	bl	8009168 <__i2b>
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	b948      	cbnz	r0, 8007cca <_strtod_l+0x6a2>
 8007cb6:	f04f 0800 	mov.w	r8, #0
 8007cba:	e6d4      	b.n	8007a66 <_strtod_l+0x43e>
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc4:	ea03 0a0a 	and.w	sl, r3, sl
 8007cc8:	e7b0      	b.n	8007c2c <_strtod_l+0x604>
 8007cca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007ccc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	bfab      	itete	ge
 8007cd2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007cd4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007cd6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007cd8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007cda:	bfac      	ite	ge
 8007cdc:	18ef      	addge	r7, r5, r3
 8007cde:	1b5e      	sublt	r6, r3, r5
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	1aed      	subs	r5, r5, r3
 8007ce4:	4415      	add	r5, r2
 8007ce6:	4b66      	ldr	r3, [pc, #408]	@ (8007e80 <_strtod_l+0x858>)
 8007ce8:	3d01      	subs	r5, #1
 8007cea:	429d      	cmp	r5, r3
 8007cec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007cf0:	da50      	bge.n	8007d94 <_strtod_l+0x76c>
 8007cf2:	1b5b      	subs	r3, r3, r5
 8007cf4:	2b1f      	cmp	r3, #31
 8007cf6:	eba2 0203 	sub.w	r2, r2, r3
 8007cfa:	f04f 0101 	mov.w	r1, #1
 8007cfe:	dc3d      	bgt.n	8007d7c <_strtod_l+0x754>
 8007d00:	fa01 f303 	lsl.w	r3, r1, r3
 8007d04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d06:	2300      	movs	r3, #0
 8007d08:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d0a:	18bd      	adds	r5, r7, r2
 8007d0c:	9b08      	ldr	r3, [sp, #32]
 8007d0e:	42af      	cmp	r7, r5
 8007d10:	4416      	add	r6, r2
 8007d12:	441e      	add	r6, r3
 8007d14:	463b      	mov	r3, r7
 8007d16:	bfa8      	it	ge
 8007d18:	462b      	movge	r3, r5
 8007d1a:	42b3      	cmp	r3, r6
 8007d1c:	bfa8      	it	ge
 8007d1e:	4633      	movge	r3, r6
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bfc2      	ittt	gt
 8007d24:	1aed      	subgt	r5, r5, r3
 8007d26:	1af6      	subgt	r6, r6, r3
 8007d28:	1aff      	subgt	r7, r7, r3
 8007d2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dd16      	ble.n	8007d5e <_strtod_l+0x736>
 8007d30:	4641      	mov	r1, r8
 8007d32:	9805      	ldr	r0, [sp, #20]
 8007d34:	461a      	mov	r2, r3
 8007d36:	f001 fad7 	bl	80092e8 <__pow5mult>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d0ba      	beq.n	8007cb6 <_strtod_l+0x68e>
 8007d40:	4601      	mov	r1, r0
 8007d42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d44:	9805      	ldr	r0, [sp, #20]
 8007d46:	f001 fa25 	bl	8009194 <__multiply>
 8007d4a:	900e      	str	r0, [sp, #56]	@ 0x38
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	f43f ae8a 	beq.w	8007a66 <_strtod_l+0x43e>
 8007d52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d54:	9805      	ldr	r0, [sp, #20]
 8007d56:	f001 f909 	bl	8008f6c <_Bfree>
 8007d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	dc1d      	bgt.n	8007d9e <_strtod_l+0x776>
 8007d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dd23      	ble.n	8007db0 <_strtod_l+0x788>
 8007d68:	4649      	mov	r1, r9
 8007d6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d6c:	9805      	ldr	r0, [sp, #20]
 8007d6e:	f001 fabb 	bl	80092e8 <__pow5mult>
 8007d72:	4681      	mov	r9, r0
 8007d74:	b9e0      	cbnz	r0, 8007db0 <_strtod_l+0x788>
 8007d76:	f04f 0900 	mov.w	r9, #0
 8007d7a:	e674      	b.n	8007a66 <_strtod_l+0x43e>
 8007d7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007d80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007d84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007d88:	35e2      	adds	r5, #226	@ 0xe2
 8007d8a:	fa01 f305 	lsl.w	r3, r1, r5
 8007d8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d90:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007d92:	e7ba      	b.n	8007d0a <_strtod_l+0x6e2>
 8007d94:	2300      	movs	r3, #0
 8007d96:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d98:	2301      	movs	r3, #1
 8007d9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d9c:	e7b5      	b.n	8007d0a <_strtod_l+0x6e2>
 8007d9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007da0:	9805      	ldr	r0, [sp, #20]
 8007da2:	462a      	mov	r2, r5
 8007da4:	f001 fafa 	bl	800939c <__lshift>
 8007da8:	901a      	str	r0, [sp, #104]	@ 0x68
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d1d9      	bne.n	8007d62 <_strtod_l+0x73a>
 8007dae:	e65a      	b.n	8007a66 <_strtod_l+0x43e>
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	dd07      	ble.n	8007dc4 <_strtod_l+0x79c>
 8007db4:	4649      	mov	r1, r9
 8007db6:	9805      	ldr	r0, [sp, #20]
 8007db8:	4632      	mov	r2, r6
 8007dba:	f001 faef 	bl	800939c <__lshift>
 8007dbe:	4681      	mov	r9, r0
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d0d8      	beq.n	8007d76 <_strtod_l+0x74e>
 8007dc4:	2f00      	cmp	r7, #0
 8007dc6:	dd08      	ble.n	8007dda <_strtod_l+0x7b2>
 8007dc8:	4641      	mov	r1, r8
 8007dca:	9805      	ldr	r0, [sp, #20]
 8007dcc:	463a      	mov	r2, r7
 8007dce:	f001 fae5 	bl	800939c <__lshift>
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f43f ae46 	beq.w	8007a66 <_strtod_l+0x43e>
 8007dda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ddc:	9805      	ldr	r0, [sp, #20]
 8007dde:	464a      	mov	r2, r9
 8007de0:	f001 fb64 	bl	80094ac <__mdiff>
 8007de4:	4604      	mov	r4, r0
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f ae3d 	beq.w	8007a66 <_strtod_l+0x43e>
 8007dec:	68c3      	ldr	r3, [r0, #12]
 8007dee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007df0:	2300      	movs	r3, #0
 8007df2:	60c3      	str	r3, [r0, #12]
 8007df4:	4641      	mov	r1, r8
 8007df6:	f001 fb3d 	bl	8009474 <__mcmp>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	da46      	bge.n	8007e8c <_strtod_l+0x864>
 8007dfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e00:	ea53 030a 	orrs.w	r3, r3, sl
 8007e04:	d16c      	bne.n	8007ee0 <_strtod_l+0x8b8>
 8007e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d168      	bne.n	8007ee0 <_strtod_l+0x8b8>
 8007e0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e12:	0d1b      	lsrs	r3, r3, #20
 8007e14:	051b      	lsls	r3, r3, #20
 8007e16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e1a:	d961      	bls.n	8007ee0 <_strtod_l+0x8b8>
 8007e1c:	6963      	ldr	r3, [r4, #20]
 8007e1e:	b913      	cbnz	r3, 8007e26 <_strtod_l+0x7fe>
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	dd5c      	ble.n	8007ee0 <_strtod_l+0x8b8>
 8007e26:	4621      	mov	r1, r4
 8007e28:	2201      	movs	r2, #1
 8007e2a:	9805      	ldr	r0, [sp, #20]
 8007e2c:	f001 fab6 	bl	800939c <__lshift>
 8007e30:	4641      	mov	r1, r8
 8007e32:	4604      	mov	r4, r0
 8007e34:	f001 fb1e 	bl	8009474 <__mcmp>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dd51      	ble.n	8007ee0 <_strtod_l+0x8b8>
 8007e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e40:	9a08      	ldr	r2, [sp, #32]
 8007e42:	0d1b      	lsrs	r3, r3, #20
 8007e44:	051b      	lsls	r3, r3, #20
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	d06b      	beq.n	8007f22 <_strtod_l+0x8fa>
 8007e4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e4e:	d868      	bhi.n	8007f22 <_strtod_l+0x8fa>
 8007e50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e54:	f67f ae9d 	bls.w	8007b92 <_strtod_l+0x56a>
 8007e58:	4b0a      	ldr	r3, [pc, #40]	@ (8007e84 <_strtod_l+0x85c>)
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	4659      	mov	r1, fp
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f7f8 fc02 	bl	8000668 <__aeabi_dmul>
 8007e64:	4b08      	ldr	r3, [pc, #32]	@ (8007e88 <_strtod_l+0x860>)
 8007e66:	400b      	ands	r3, r1
 8007e68:	4682      	mov	sl, r0
 8007e6a:	468b      	mov	fp, r1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f47f ae05 	bne.w	8007a7c <_strtod_l+0x454>
 8007e72:	9a05      	ldr	r2, [sp, #20]
 8007e74:	2322      	movs	r3, #34	@ 0x22
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	e600      	b.n	8007a7c <_strtod_l+0x454>
 8007e7a:	bf00      	nop
 8007e7c:	0800a3b0 	.word	0x0800a3b0
 8007e80:	fffffc02 	.word	0xfffffc02
 8007e84:	39500000 	.word	0x39500000
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007e90:	d165      	bne.n	8007f5e <_strtod_l+0x936>
 8007e92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e98:	b35a      	cbz	r2, 8007ef2 <_strtod_l+0x8ca>
 8007e9a:	4a9f      	ldr	r2, [pc, #636]	@ (8008118 <_strtod_l+0xaf0>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d12b      	bne.n	8007ef8 <_strtod_l+0x8d0>
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	4651      	mov	r1, sl
 8007ea4:	b303      	cbz	r3, 8007ee8 <_strtod_l+0x8c0>
 8007ea6:	4b9d      	ldr	r3, [pc, #628]	@ (800811c <_strtod_l+0xaf4>)
 8007ea8:	465a      	mov	r2, fp
 8007eaa:	4013      	ands	r3, r2
 8007eac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb4:	d81b      	bhi.n	8007eee <_strtod_l+0x8c6>
 8007eb6:	0d1b      	lsrs	r3, r3, #20
 8007eb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	d119      	bne.n	8007ef8 <_strtod_l+0x8d0>
 8007ec4:	4b96      	ldr	r3, [pc, #600]	@ (8008120 <_strtod_l+0xaf8>)
 8007ec6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d102      	bne.n	8007ed2 <_strtod_l+0x8aa>
 8007ecc:	3101      	adds	r1, #1
 8007ece:	f43f adca 	beq.w	8007a66 <_strtod_l+0x43e>
 8007ed2:	4b92      	ldr	r3, [pc, #584]	@ (800811c <_strtod_l+0xaf4>)
 8007ed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ed6:	401a      	ands	r2, r3
 8007ed8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007edc:	f04f 0a00 	mov.w	sl, #0
 8007ee0:	9b08      	ldr	r3, [sp, #32]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1b8      	bne.n	8007e58 <_strtod_l+0x830>
 8007ee6:	e5c9      	b.n	8007a7c <_strtod_l+0x454>
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eec:	e7e8      	b.n	8007ec0 <_strtod_l+0x898>
 8007eee:	4613      	mov	r3, r2
 8007ef0:	e7e6      	b.n	8007ec0 <_strtod_l+0x898>
 8007ef2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ef6:	d0a1      	beq.n	8007e3c <_strtod_l+0x814>
 8007ef8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007efa:	b1db      	cbz	r3, 8007f34 <_strtod_l+0x90c>
 8007efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007efe:	4213      	tst	r3, r2
 8007f00:	d0ee      	beq.n	8007ee0 <_strtod_l+0x8b8>
 8007f02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f04:	9a08      	ldr	r2, [sp, #32]
 8007f06:	4650      	mov	r0, sl
 8007f08:	4659      	mov	r1, fp
 8007f0a:	b1bb      	cbz	r3, 8007f3c <_strtod_l+0x914>
 8007f0c:	f7ff fb6b 	bl	80075e6 <sulp>
 8007f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f14:	ec53 2b10 	vmov	r2, r3, d0
 8007f18:	f7f8 f9f0 	bl	80002fc <__adddf3>
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	468b      	mov	fp, r1
 8007f20:	e7de      	b.n	8007ee0 <_strtod_l+0x8b8>
 8007f22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007f26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f2e:	f04f 3aff 	mov.w	sl, #4294967295
 8007f32:	e7d5      	b.n	8007ee0 <_strtod_l+0x8b8>
 8007f34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f36:	ea13 0f0a 	tst.w	r3, sl
 8007f3a:	e7e1      	b.n	8007f00 <_strtod_l+0x8d8>
 8007f3c:	f7ff fb53 	bl	80075e6 <sulp>
 8007f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f44:	ec53 2b10 	vmov	r2, r3, d0
 8007f48:	f7f8 f9d6 	bl	80002f8 <__aeabi_dsub>
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4682      	mov	sl, r0
 8007f52:	468b      	mov	fp, r1
 8007f54:	f7f8 fdf0 	bl	8000b38 <__aeabi_dcmpeq>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d0c1      	beq.n	8007ee0 <_strtod_l+0x8b8>
 8007f5c:	e619      	b.n	8007b92 <_strtod_l+0x56a>
 8007f5e:	4641      	mov	r1, r8
 8007f60:	4620      	mov	r0, r4
 8007f62:	f001 fbff 	bl	8009764 <__ratio>
 8007f66:	ec57 6b10 	vmov	r6, r7, d0
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 fdf4 	bl	8000b60 <__aeabi_dcmple>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d06f      	beq.n	800805c <_strtod_l+0xa34>
 8007f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d17a      	bne.n	8008078 <_strtod_l+0xa50>
 8007f82:	f1ba 0f00 	cmp.w	sl, #0
 8007f86:	d158      	bne.n	800803a <_strtod_l+0xa12>
 8007f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d15a      	bne.n	8008048 <_strtod_l+0xa20>
 8007f92:	4b64      	ldr	r3, [pc, #400]	@ (8008124 <_strtod_l+0xafc>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	4630      	mov	r0, r6
 8007f98:	4639      	mov	r1, r7
 8007f9a:	f7f8 fdd7 	bl	8000b4c <__aeabi_dcmplt>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d159      	bne.n	8008056 <_strtod_l+0xa2e>
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	4b60      	ldr	r3, [pc, #384]	@ (8008128 <_strtod_l+0xb00>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f7f8 fb5d 	bl	8000668 <__aeabi_dmul>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007fb6:	9606      	str	r6, [sp, #24]
 8007fb8:	9307      	str	r3, [sp, #28]
 8007fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fbe:	4d57      	ldr	r5, [pc, #348]	@ (800811c <_strtod_l+0xaf4>)
 8007fc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fc6:	401d      	ands	r5, r3
 8007fc8:	4b58      	ldr	r3, [pc, #352]	@ (800812c <_strtod_l+0xb04>)
 8007fca:	429d      	cmp	r5, r3
 8007fcc:	f040 80b2 	bne.w	8008134 <_strtod_l+0xb0c>
 8007fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007fd6:	ec4b ab10 	vmov	d0, sl, fp
 8007fda:	f001 fafb 	bl	80095d4 <__ulp>
 8007fde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fe2:	ec51 0b10 	vmov	r0, r1, d0
 8007fe6:	f7f8 fb3f 	bl	8000668 <__aeabi_dmul>
 8007fea:	4652      	mov	r2, sl
 8007fec:	465b      	mov	r3, fp
 8007fee:	f7f8 f985 	bl	80002fc <__adddf3>
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4949      	ldr	r1, [pc, #292]	@ (800811c <_strtod_l+0xaf4>)
 8007ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8008130 <_strtod_l+0xb08>)
 8007ff8:	4019      	ands	r1, r3
 8007ffa:	4291      	cmp	r1, r2
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	d942      	bls.n	8008086 <_strtod_l+0xa5e>
 8008000:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008002:	4b47      	ldr	r3, [pc, #284]	@ (8008120 <_strtod_l+0xaf8>)
 8008004:	429a      	cmp	r2, r3
 8008006:	d103      	bne.n	8008010 <_strtod_l+0x9e8>
 8008008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800800a:	3301      	adds	r3, #1
 800800c:	f43f ad2b 	beq.w	8007a66 <_strtod_l+0x43e>
 8008010:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008120 <_strtod_l+0xaf8>
 8008014:	f04f 3aff 	mov.w	sl, #4294967295
 8008018:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800801a:	9805      	ldr	r0, [sp, #20]
 800801c:	f000 ffa6 	bl	8008f6c <_Bfree>
 8008020:	9805      	ldr	r0, [sp, #20]
 8008022:	4649      	mov	r1, r9
 8008024:	f000 ffa2 	bl	8008f6c <_Bfree>
 8008028:	9805      	ldr	r0, [sp, #20]
 800802a:	4641      	mov	r1, r8
 800802c:	f000 ff9e 	bl	8008f6c <_Bfree>
 8008030:	9805      	ldr	r0, [sp, #20]
 8008032:	4621      	mov	r1, r4
 8008034:	f000 ff9a 	bl	8008f6c <_Bfree>
 8008038:	e618      	b.n	8007c6c <_strtod_l+0x644>
 800803a:	f1ba 0f01 	cmp.w	sl, #1
 800803e:	d103      	bne.n	8008048 <_strtod_l+0xa20>
 8008040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008042:	2b00      	cmp	r3, #0
 8008044:	f43f ada5 	beq.w	8007b92 <_strtod_l+0x56a>
 8008048:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80080f8 <_strtod_l+0xad0>
 800804c:	4f35      	ldr	r7, [pc, #212]	@ (8008124 <_strtod_l+0xafc>)
 800804e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008052:	2600      	movs	r6, #0
 8008054:	e7b1      	b.n	8007fba <_strtod_l+0x992>
 8008056:	4f34      	ldr	r7, [pc, #208]	@ (8008128 <_strtod_l+0xb00>)
 8008058:	2600      	movs	r6, #0
 800805a:	e7aa      	b.n	8007fb2 <_strtod_l+0x98a>
 800805c:	4b32      	ldr	r3, [pc, #200]	@ (8008128 <_strtod_l+0xb00>)
 800805e:	4630      	mov	r0, r6
 8008060:	4639      	mov	r1, r7
 8008062:	2200      	movs	r2, #0
 8008064:	f7f8 fb00 	bl	8000668 <__aeabi_dmul>
 8008068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800806a:	4606      	mov	r6, r0
 800806c:	460f      	mov	r7, r1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d09f      	beq.n	8007fb2 <_strtod_l+0x98a>
 8008072:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008076:	e7a0      	b.n	8007fba <_strtod_l+0x992>
 8008078:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008100 <_strtod_l+0xad8>
 800807c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008080:	ec57 6b17 	vmov	r6, r7, d7
 8008084:	e799      	b.n	8007fba <_strtod_l+0x992>
 8008086:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1c1      	bne.n	8008018 <_strtod_l+0x9f0>
 8008094:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008098:	0d1b      	lsrs	r3, r3, #20
 800809a:	051b      	lsls	r3, r3, #20
 800809c:	429d      	cmp	r5, r3
 800809e:	d1bb      	bne.n	8008018 <_strtod_l+0x9f0>
 80080a0:	4630      	mov	r0, r6
 80080a2:	4639      	mov	r1, r7
 80080a4:	f7f8 fe2a 	bl	8000cfc <__aeabi_d2lz>
 80080a8:	f7f8 fab0 	bl	800060c <__aeabi_l2d>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 f920 	bl	80002f8 <__aeabi_dsub>
 80080b8:	460b      	mov	r3, r1
 80080ba:	4602      	mov	r2, r0
 80080bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80080c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80080c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080c6:	ea46 060a 	orr.w	r6, r6, sl
 80080ca:	431e      	orrs	r6, r3
 80080cc:	d06f      	beq.n	80081ae <_strtod_l+0xb86>
 80080ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8008108 <_strtod_l+0xae0>)
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	f7f8 fd3a 	bl	8000b4c <__aeabi_dcmplt>
 80080d8:	2800      	cmp	r0, #0
 80080da:	f47f accf 	bne.w	8007a7c <_strtod_l+0x454>
 80080de:	a30c      	add	r3, pc, #48	@ (adr r3, 8008110 <_strtod_l+0xae8>)
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080e8:	f7f8 fd4e 	bl	8000b88 <__aeabi_dcmpgt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d093      	beq.n	8008018 <_strtod_l+0x9f0>
 80080f0:	e4c4      	b.n	8007a7c <_strtod_l+0x454>
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	00000000 	.word	0x00000000
 80080fc:	bff00000 	.word	0xbff00000
 8008100:	00000000 	.word	0x00000000
 8008104:	3ff00000 	.word	0x3ff00000
 8008108:	94a03595 	.word	0x94a03595
 800810c:	3fdfffff 	.word	0x3fdfffff
 8008110:	35afe535 	.word	0x35afe535
 8008114:	3fe00000 	.word	0x3fe00000
 8008118:	000fffff 	.word	0x000fffff
 800811c:	7ff00000 	.word	0x7ff00000
 8008120:	7fefffff 	.word	0x7fefffff
 8008124:	3ff00000 	.word	0x3ff00000
 8008128:	3fe00000 	.word	0x3fe00000
 800812c:	7fe00000 	.word	0x7fe00000
 8008130:	7c9fffff 	.word	0x7c9fffff
 8008134:	9b08      	ldr	r3, [sp, #32]
 8008136:	b323      	cbz	r3, 8008182 <_strtod_l+0xb5a>
 8008138:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800813c:	d821      	bhi.n	8008182 <_strtod_l+0xb5a>
 800813e:	a328      	add	r3, pc, #160	@ (adr r3, 80081e0 <_strtod_l+0xbb8>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	4630      	mov	r0, r6
 8008146:	4639      	mov	r1, r7
 8008148:	f7f8 fd0a 	bl	8000b60 <__aeabi_dcmple>
 800814c:	b1a0      	cbz	r0, 8008178 <_strtod_l+0xb50>
 800814e:	4639      	mov	r1, r7
 8008150:	4630      	mov	r0, r6
 8008152:	f7f8 fd4b 	bl	8000bec <__aeabi_d2uiz>
 8008156:	2801      	cmp	r0, #1
 8008158:	bf38      	it	cc
 800815a:	2001      	movcc	r0, #1
 800815c:	f7f8 fa0a 	bl	8000574 <__aeabi_ui2d>
 8008160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008162:	4606      	mov	r6, r0
 8008164:	460f      	mov	r7, r1
 8008166:	b9fb      	cbnz	r3, 80081a8 <_strtod_l+0xb80>
 8008168:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800816c:	9014      	str	r0, [sp, #80]	@ 0x50
 800816e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008170:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008174:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008178:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800817a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800817e:	1b5b      	subs	r3, r3, r5
 8008180:	9311      	str	r3, [sp, #68]	@ 0x44
 8008182:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008186:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800818a:	f001 fa23 	bl	80095d4 <__ulp>
 800818e:	4650      	mov	r0, sl
 8008190:	ec53 2b10 	vmov	r2, r3, d0
 8008194:	4659      	mov	r1, fp
 8008196:	f7f8 fa67 	bl	8000668 <__aeabi_dmul>
 800819a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800819e:	f7f8 f8ad 	bl	80002fc <__adddf3>
 80081a2:	4682      	mov	sl, r0
 80081a4:	468b      	mov	fp, r1
 80081a6:	e770      	b.n	800808a <_strtod_l+0xa62>
 80081a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80081ac:	e7e0      	b.n	8008170 <_strtod_l+0xb48>
 80081ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80081e8 <_strtod_l+0xbc0>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 fcca 	bl	8000b4c <__aeabi_dcmplt>
 80081b8:	e798      	b.n	80080ec <_strtod_l+0xac4>
 80081ba:	2300      	movs	r3, #0
 80081bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80081c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	f7ff ba6d 	b.w	80076a2 <_strtod_l+0x7a>
 80081c8:	2a65      	cmp	r2, #101	@ 0x65
 80081ca:	f43f ab66 	beq.w	800789a <_strtod_l+0x272>
 80081ce:	2a45      	cmp	r2, #69	@ 0x45
 80081d0:	f43f ab63 	beq.w	800789a <_strtod_l+0x272>
 80081d4:	2301      	movs	r3, #1
 80081d6:	f7ff bb9e 	b.w	8007916 <_strtod_l+0x2ee>
 80081da:	bf00      	nop
 80081dc:	f3af 8000 	nop.w
 80081e0:	ffc00000 	.word	0xffc00000
 80081e4:	41dfffff 	.word	0x41dfffff
 80081e8:	94a03595 	.word	0x94a03595
 80081ec:	3fcfffff 	.word	0x3fcfffff

080081f0 <strtod>:
 80081f0:	460a      	mov	r2, r1
 80081f2:	4601      	mov	r1, r0
 80081f4:	4802      	ldr	r0, [pc, #8]	@ (8008200 <strtod+0x10>)
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <strtod+0x14>)
 80081f8:	6800      	ldr	r0, [r0, #0]
 80081fa:	f7ff ba15 	b.w	8007628 <_strtod_l>
 80081fe:	bf00      	nop
 8008200:	20000188 	.word	0x20000188
 8008204:	2000001c 	.word	0x2000001c

08008208 <std>:
 8008208:	2300      	movs	r3, #0
 800820a:	b510      	push	{r4, lr}
 800820c:	4604      	mov	r4, r0
 800820e:	e9c0 3300 	strd	r3, r3, [r0]
 8008212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008216:	6083      	str	r3, [r0, #8]
 8008218:	8181      	strh	r1, [r0, #12]
 800821a:	6643      	str	r3, [r0, #100]	@ 0x64
 800821c:	81c2      	strh	r2, [r0, #14]
 800821e:	6183      	str	r3, [r0, #24]
 8008220:	4619      	mov	r1, r3
 8008222:	2208      	movs	r2, #8
 8008224:	305c      	adds	r0, #92	@ 0x5c
 8008226:	f000 f8f4 	bl	8008412 <memset>
 800822a:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <std+0x58>)
 800822c:	6263      	str	r3, [r4, #36]	@ 0x24
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <std+0x5c>)
 8008230:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008232:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <std+0x60>)
 8008234:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008236:	4b0d      	ldr	r3, [pc, #52]	@ (800826c <std+0x64>)
 8008238:	6323      	str	r3, [r4, #48]	@ 0x30
 800823a:	4b0d      	ldr	r3, [pc, #52]	@ (8008270 <std+0x68>)
 800823c:	6224      	str	r4, [r4, #32]
 800823e:	429c      	cmp	r4, r3
 8008240:	d006      	beq.n	8008250 <std+0x48>
 8008242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008246:	4294      	cmp	r4, r2
 8008248:	d002      	beq.n	8008250 <std+0x48>
 800824a:	33d0      	adds	r3, #208	@ 0xd0
 800824c:	429c      	cmp	r4, r3
 800824e:	d105      	bne.n	800825c <std+0x54>
 8008250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008258:	f000 b9c2 	b.w	80085e0 <__retarget_lock_init_recursive>
 800825c:	bd10      	pop	{r4, pc}
 800825e:	bf00      	nop
 8008260:	0800838d 	.word	0x0800838d
 8008264:	080083af 	.word	0x080083af
 8008268:	080083e7 	.word	0x080083e7
 800826c:	0800840b 	.word	0x0800840b
 8008270:	20000540 	.word	0x20000540

08008274 <stdio_exit_handler>:
 8008274:	4a02      	ldr	r2, [pc, #8]	@ (8008280 <stdio_exit_handler+0xc>)
 8008276:	4903      	ldr	r1, [pc, #12]	@ (8008284 <stdio_exit_handler+0x10>)
 8008278:	4803      	ldr	r0, [pc, #12]	@ (8008288 <stdio_exit_handler+0x14>)
 800827a:	f000 b869 	b.w	8008350 <_fwalk_sglue>
 800827e:	bf00      	nop
 8008280:	20000010 	.word	0x20000010
 8008284:	08009975 	.word	0x08009975
 8008288:	2000018c 	.word	0x2000018c

0800828c <cleanup_stdio>:
 800828c:	6841      	ldr	r1, [r0, #4]
 800828e:	4b0c      	ldr	r3, [pc, #48]	@ (80082c0 <cleanup_stdio+0x34>)
 8008290:	4299      	cmp	r1, r3
 8008292:	b510      	push	{r4, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	d001      	beq.n	800829c <cleanup_stdio+0x10>
 8008298:	f001 fb6c 	bl	8009974 <_fflush_r>
 800829c:	68a1      	ldr	r1, [r4, #8]
 800829e:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <cleanup_stdio+0x38>)
 80082a0:	4299      	cmp	r1, r3
 80082a2:	d002      	beq.n	80082aa <cleanup_stdio+0x1e>
 80082a4:	4620      	mov	r0, r4
 80082a6:	f001 fb65 	bl	8009974 <_fflush_r>
 80082aa:	68e1      	ldr	r1, [r4, #12]
 80082ac:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <cleanup_stdio+0x3c>)
 80082ae:	4299      	cmp	r1, r3
 80082b0:	d004      	beq.n	80082bc <cleanup_stdio+0x30>
 80082b2:	4620      	mov	r0, r4
 80082b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b8:	f001 bb5c 	b.w	8009974 <_fflush_r>
 80082bc:	bd10      	pop	{r4, pc}
 80082be:	bf00      	nop
 80082c0:	20000540 	.word	0x20000540
 80082c4:	200005a8 	.word	0x200005a8
 80082c8:	20000610 	.word	0x20000610

080082cc <global_stdio_init.part.0>:
 80082cc:	b510      	push	{r4, lr}
 80082ce:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <global_stdio_init.part.0+0x30>)
 80082d0:	4c0b      	ldr	r4, [pc, #44]	@ (8008300 <global_stdio_init.part.0+0x34>)
 80082d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008304 <global_stdio_init.part.0+0x38>)
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	4620      	mov	r0, r4
 80082d8:	2200      	movs	r2, #0
 80082da:	2104      	movs	r1, #4
 80082dc:	f7ff ff94 	bl	8008208 <std>
 80082e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082e4:	2201      	movs	r2, #1
 80082e6:	2109      	movs	r1, #9
 80082e8:	f7ff ff8e 	bl	8008208 <std>
 80082ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082f0:	2202      	movs	r2, #2
 80082f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f6:	2112      	movs	r1, #18
 80082f8:	f7ff bf86 	b.w	8008208 <std>
 80082fc:	20000678 	.word	0x20000678
 8008300:	20000540 	.word	0x20000540
 8008304:	08008275 	.word	0x08008275

08008308 <__sfp_lock_acquire>:
 8008308:	4801      	ldr	r0, [pc, #4]	@ (8008310 <__sfp_lock_acquire+0x8>)
 800830a:	f000 b96a 	b.w	80085e2 <__retarget_lock_acquire_recursive>
 800830e:	bf00      	nop
 8008310:	20000681 	.word	0x20000681

08008314 <__sfp_lock_release>:
 8008314:	4801      	ldr	r0, [pc, #4]	@ (800831c <__sfp_lock_release+0x8>)
 8008316:	f000 b965 	b.w	80085e4 <__retarget_lock_release_recursive>
 800831a:	bf00      	nop
 800831c:	20000681 	.word	0x20000681

08008320 <__sinit>:
 8008320:	b510      	push	{r4, lr}
 8008322:	4604      	mov	r4, r0
 8008324:	f7ff fff0 	bl	8008308 <__sfp_lock_acquire>
 8008328:	6a23      	ldr	r3, [r4, #32]
 800832a:	b11b      	cbz	r3, 8008334 <__sinit+0x14>
 800832c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008330:	f7ff bff0 	b.w	8008314 <__sfp_lock_release>
 8008334:	4b04      	ldr	r3, [pc, #16]	@ (8008348 <__sinit+0x28>)
 8008336:	6223      	str	r3, [r4, #32]
 8008338:	4b04      	ldr	r3, [pc, #16]	@ (800834c <__sinit+0x2c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1f5      	bne.n	800832c <__sinit+0xc>
 8008340:	f7ff ffc4 	bl	80082cc <global_stdio_init.part.0>
 8008344:	e7f2      	b.n	800832c <__sinit+0xc>
 8008346:	bf00      	nop
 8008348:	0800828d 	.word	0x0800828d
 800834c:	20000678 	.word	0x20000678

08008350 <_fwalk_sglue>:
 8008350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008354:	4607      	mov	r7, r0
 8008356:	4688      	mov	r8, r1
 8008358:	4614      	mov	r4, r2
 800835a:	2600      	movs	r6, #0
 800835c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008360:	f1b9 0901 	subs.w	r9, r9, #1
 8008364:	d505      	bpl.n	8008372 <_fwalk_sglue+0x22>
 8008366:	6824      	ldr	r4, [r4, #0]
 8008368:	2c00      	cmp	r4, #0
 800836a:	d1f7      	bne.n	800835c <_fwalk_sglue+0xc>
 800836c:	4630      	mov	r0, r6
 800836e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008372:	89ab      	ldrh	r3, [r5, #12]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d907      	bls.n	8008388 <_fwalk_sglue+0x38>
 8008378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800837c:	3301      	adds	r3, #1
 800837e:	d003      	beq.n	8008388 <_fwalk_sglue+0x38>
 8008380:	4629      	mov	r1, r5
 8008382:	4638      	mov	r0, r7
 8008384:	47c0      	blx	r8
 8008386:	4306      	orrs	r6, r0
 8008388:	3568      	adds	r5, #104	@ 0x68
 800838a:	e7e9      	b.n	8008360 <_fwalk_sglue+0x10>

0800838c <__sread>:
 800838c:	b510      	push	{r4, lr}
 800838e:	460c      	mov	r4, r1
 8008390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008394:	f000 f8d6 	bl	8008544 <_read_r>
 8008398:	2800      	cmp	r0, #0
 800839a:	bfab      	itete	ge
 800839c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800839e:	89a3      	ldrhlt	r3, [r4, #12]
 80083a0:	181b      	addge	r3, r3, r0
 80083a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083a6:	bfac      	ite	ge
 80083a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083aa:	81a3      	strhlt	r3, [r4, #12]
 80083ac:	bd10      	pop	{r4, pc}

080083ae <__swrite>:
 80083ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b2:	461f      	mov	r7, r3
 80083b4:	898b      	ldrh	r3, [r1, #12]
 80083b6:	05db      	lsls	r3, r3, #23
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	4616      	mov	r6, r2
 80083be:	d505      	bpl.n	80083cc <__swrite+0x1e>
 80083c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c4:	2302      	movs	r3, #2
 80083c6:	2200      	movs	r2, #0
 80083c8:	f000 f8aa 	bl	8008520 <_lseek_r>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083d6:	81a3      	strh	r3, [r4, #12]
 80083d8:	4632      	mov	r2, r6
 80083da:	463b      	mov	r3, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e2:	f000 b8c1 	b.w	8008568 <_write_r>

080083e6 <__sseek>:
 80083e6:	b510      	push	{r4, lr}
 80083e8:	460c      	mov	r4, r1
 80083ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ee:	f000 f897 	bl	8008520 <_lseek_r>
 80083f2:	1c43      	adds	r3, r0, #1
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	bf15      	itete	ne
 80083f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008402:	81a3      	strheq	r3, [r4, #12]
 8008404:	bf18      	it	ne
 8008406:	81a3      	strhne	r3, [r4, #12]
 8008408:	bd10      	pop	{r4, pc}

0800840a <__sclose>:
 800840a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840e:	f000 b877 	b.w	8008500 <_close_r>

08008412 <memset>:
 8008412:	4402      	add	r2, r0
 8008414:	4603      	mov	r3, r0
 8008416:	4293      	cmp	r3, r2
 8008418:	d100      	bne.n	800841c <memset+0xa>
 800841a:	4770      	bx	lr
 800841c:	f803 1b01 	strb.w	r1, [r3], #1
 8008420:	e7f9      	b.n	8008416 <memset+0x4>

08008422 <strncmp>:
 8008422:	b510      	push	{r4, lr}
 8008424:	b16a      	cbz	r2, 8008442 <strncmp+0x20>
 8008426:	3901      	subs	r1, #1
 8008428:	1884      	adds	r4, r0, r2
 800842a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800842e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008432:	429a      	cmp	r2, r3
 8008434:	d103      	bne.n	800843e <strncmp+0x1c>
 8008436:	42a0      	cmp	r0, r4
 8008438:	d001      	beq.n	800843e <strncmp+0x1c>
 800843a:	2a00      	cmp	r2, #0
 800843c:	d1f5      	bne.n	800842a <strncmp+0x8>
 800843e:	1ad0      	subs	r0, r2, r3
 8008440:	bd10      	pop	{r4, pc}
 8008442:	4610      	mov	r0, r2
 8008444:	e7fc      	b.n	8008440 <strncmp+0x1e>
	...

08008448 <strtok>:
 8008448:	4b16      	ldr	r3, [pc, #88]	@ (80084a4 <strtok+0x5c>)
 800844a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844e:	681f      	ldr	r7, [r3, #0]
 8008450:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008452:	4605      	mov	r5, r0
 8008454:	460e      	mov	r6, r1
 8008456:	b9ec      	cbnz	r4, 8008494 <strtok+0x4c>
 8008458:	2050      	movs	r0, #80	@ 0x50
 800845a:	f000 fc7f 	bl	8008d5c <malloc>
 800845e:	4602      	mov	r2, r0
 8008460:	6478      	str	r0, [r7, #68]	@ 0x44
 8008462:	b920      	cbnz	r0, 800846e <strtok+0x26>
 8008464:	4b10      	ldr	r3, [pc, #64]	@ (80084a8 <strtok+0x60>)
 8008466:	4811      	ldr	r0, [pc, #68]	@ (80084ac <strtok+0x64>)
 8008468:	215b      	movs	r1, #91	@ 0x5b
 800846a:	f000 f8d5 	bl	8008618 <__assert_func>
 800846e:	e9c0 4400 	strd	r4, r4, [r0]
 8008472:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008476:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800847a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800847e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008482:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008486:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800848a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800848e:	6184      	str	r4, [r0, #24]
 8008490:	7704      	strb	r4, [r0, #28]
 8008492:	6244      	str	r4, [r0, #36]	@ 0x24
 8008494:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	2301      	movs	r3, #1
 800849c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084a0:	f000 b806 	b.w	80084b0 <__strtok_r>
 80084a4:	20000188 	.word	0x20000188
 80084a8:	0800a3d8 	.word	0x0800a3d8
 80084ac:	0800a3ef 	.word	0x0800a3ef

080084b0 <__strtok_r>:
 80084b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084b2:	4604      	mov	r4, r0
 80084b4:	b908      	cbnz	r0, 80084ba <__strtok_r+0xa>
 80084b6:	6814      	ldr	r4, [r2, #0]
 80084b8:	b144      	cbz	r4, 80084cc <__strtok_r+0x1c>
 80084ba:	4620      	mov	r0, r4
 80084bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80084c0:	460f      	mov	r7, r1
 80084c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80084c6:	b91e      	cbnz	r6, 80084d0 <__strtok_r+0x20>
 80084c8:	b965      	cbnz	r5, 80084e4 <__strtok_r+0x34>
 80084ca:	6015      	str	r5, [r2, #0]
 80084cc:	2000      	movs	r0, #0
 80084ce:	e005      	b.n	80084dc <__strtok_r+0x2c>
 80084d0:	42b5      	cmp	r5, r6
 80084d2:	d1f6      	bne.n	80084c2 <__strtok_r+0x12>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1f0      	bne.n	80084ba <__strtok_r+0xa>
 80084d8:	6014      	str	r4, [r2, #0]
 80084da:	7003      	strb	r3, [r0, #0]
 80084dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084de:	461c      	mov	r4, r3
 80084e0:	e00c      	b.n	80084fc <__strtok_r+0x4c>
 80084e2:	b915      	cbnz	r5, 80084ea <__strtok_r+0x3a>
 80084e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084e8:	460e      	mov	r6, r1
 80084ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 80084ee:	42ab      	cmp	r3, r5
 80084f0:	d1f7      	bne.n	80084e2 <__strtok_r+0x32>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0f3      	beq.n	80084de <__strtok_r+0x2e>
 80084f6:	2300      	movs	r3, #0
 80084f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80084fc:	6014      	str	r4, [r2, #0]
 80084fe:	e7ed      	b.n	80084dc <__strtok_r+0x2c>

08008500 <_close_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4d06      	ldr	r5, [pc, #24]	@ (800851c <_close_r+0x1c>)
 8008504:	2300      	movs	r3, #0
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	f7f9 ff16 	bl	800233c <_close>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_close_r+0x1a>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	b103      	cbz	r3, 800851a <_close_r+0x1a>
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	2000067c 	.word	0x2000067c

08008520 <_lseek_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d07      	ldr	r5, [pc, #28]	@ (8008540 <_lseek_r+0x20>)
 8008524:	4604      	mov	r4, r0
 8008526:	4608      	mov	r0, r1
 8008528:	4611      	mov	r1, r2
 800852a:	2200      	movs	r2, #0
 800852c:	602a      	str	r2, [r5, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	f7f9 ff2b 	bl	800238a <_lseek>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d102      	bne.n	800853e <_lseek_r+0x1e>
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	b103      	cbz	r3, 800853e <_lseek_r+0x1e>
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	2000067c 	.word	0x2000067c

08008544 <_read_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	4d07      	ldr	r5, [pc, #28]	@ (8008564 <_read_r+0x20>)
 8008548:	4604      	mov	r4, r0
 800854a:	4608      	mov	r0, r1
 800854c:	4611      	mov	r1, r2
 800854e:	2200      	movs	r2, #0
 8008550:	602a      	str	r2, [r5, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	f7f9 feb9 	bl	80022ca <_read>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_read_r+0x1e>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_read_r+0x1e>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	2000067c 	.word	0x2000067c

08008568 <_write_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d07      	ldr	r5, [pc, #28]	@ (8008588 <_write_r+0x20>)
 800856c:	4604      	mov	r4, r0
 800856e:	4608      	mov	r0, r1
 8008570:	4611      	mov	r1, r2
 8008572:	2200      	movs	r2, #0
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7f9 fec4 	bl	8002304 <_write>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_write_r+0x1e>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_write_r+0x1e>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	2000067c 	.word	0x2000067c

0800858c <__errno>:
 800858c:	4b01      	ldr	r3, [pc, #4]	@ (8008594 <__errno+0x8>)
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20000188 	.word	0x20000188

08008598 <__libc_init_array>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4d0d      	ldr	r5, [pc, #52]	@ (80085d0 <__libc_init_array+0x38>)
 800859c:	4c0d      	ldr	r4, [pc, #52]	@ (80085d4 <__libc_init_array+0x3c>)
 800859e:	1b64      	subs	r4, r4, r5
 80085a0:	10a4      	asrs	r4, r4, #2
 80085a2:	2600      	movs	r6, #0
 80085a4:	42a6      	cmp	r6, r4
 80085a6:	d109      	bne.n	80085bc <__libc_init_array+0x24>
 80085a8:	4d0b      	ldr	r5, [pc, #44]	@ (80085d8 <__libc_init_array+0x40>)
 80085aa:	4c0c      	ldr	r4, [pc, #48]	@ (80085dc <__libc_init_array+0x44>)
 80085ac:	f001 fe72 	bl	800a294 <_init>
 80085b0:	1b64      	subs	r4, r4, r5
 80085b2:	10a4      	asrs	r4, r4, #2
 80085b4:	2600      	movs	r6, #0
 80085b6:	42a6      	cmp	r6, r4
 80085b8:	d105      	bne.n	80085c6 <__libc_init_array+0x2e>
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c0:	4798      	blx	r3
 80085c2:	3601      	adds	r6, #1
 80085c4:	e7ee      	b.n	80085a4 <__libc_init_array+0xc>
 80085c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ca:	4798      	blx	r3
 80085cc:	3601      	adds	r6, #1
 80085ce:	e7f2      	b.n	80085b6 <__libc_init_array+0x1e>
 80085d0:	0800a794 	.word	0x0800a794
 80085d4:	0800a794 	.word	0x0800a794
 80085d8:	0800a794 	.word	0x0800a794
 80085dc:	0800a798 	.word	0x0800a798

080085e0 <__retarget_lock_init_recursive>:
 80085e0:	4770      	bx	lr

080085e2 <__retarget_lock_acquire_recursive>:
 80085e2:	4770      	bx	lr

080085e4 <__retarget_lock_release_recursive>:
 80085e4:	4770      	bx	lr

080085e6 <memcpy>:
 80085e6:	440a      	add	r2, r1
 80085e8:	4291      	cmp	r1, r2
 80085ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80085ee:	d100      	bne.n	80085f2 <memcpy+0xc>
 80085f0:	4770      	bx	lr
 80085f2:	b510      	push	{r4, lr}
 80085f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085fc:	4291      	cmp	r1, r2
 80085fe:	d1f9      	bne.n	80085f4 <memcpy+0xe>
 8008600:	bd10      	pop	{r4, pc}
 8008602:	0000      	movs	r0, r0
 8008604:	0000      	movs	r0, r0
	...

08008608 <nan>:
 8008608:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008610 <nan+0x8>
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	00000000 	.word	0x00000000
 8008614:	7ff80000 	.word	0x7ff80000

08008618 <__assert_func>:
 8008618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800861a:	4614      	mov	r4, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4b09      	ldr	r3, [pc, #36]	@ (8008644 <__assert_func+0x2c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4605      	mov	r5, r0
 8008624:	68d8      	ldr	r0, [r3, #12]
 8008626:	b954      	cbnz	r4, 800863e <__assert_func+0x26>
 8008628:	4b07      	ldr	r3, [pc, #28]	@ (8008648 <__assert_func+0x30>)
 800862a:	461c      	mov	r4, r3
 800862c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008630:	9100      	str	r1, [sp, #0]
 8008632:	462b      	mov	r3, r5
 8008634:	4905      	ldr	r1, [pc, #20]	@ (800864c <__assert_func+0x34>)
 8008636:	f001 f9c5 	bl	80099c4 <fiprintf>
 800863a:	f001 f9e5 	bl	8009a08 <abort>
 800863e:	4b04      	ldr	r3, [pc, #16]	@ (8008650 <__assert_func+0x38>)
 8008640:	e7f4      	b.n	800862c <__assert_func+0x14>
 8008642:	bf00      	nop
 8008644:	20000188 	.word	0x20000188
 8008648:	0800a48c 	.word	0x0800a48c
 800864c:	0800a45e 	.word	0x0800a45e
 8008650:	0800a451 	.word	0x0800a451

08008654 <_free_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4605      	mov	r5, r0
 8008658:	2900      	cmp	r1, #0
 800865a:	d041      	beq.n	80086e0 <_free_r+0x8c>
 800865c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008660:	1f0c      	subs	r4, r1, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	bfb8      	it	lt
 8008666:	18e4      	addlt	r4, r4, r3
 8008668:	f000 fc34 	bl	8008ed4 <__malloc_lock>
 800866c:	4a1d      	ldr	r2, [pc, #116]	@ (80086e4 <_free_r+0x90>)
 800866e:	6813      	ldr	r3, [r2, #0]
 8008670:	b933      	cbnz	r3, 8008680 <_free_r+0x2c>
 8008672:	6063      	str	r3, [r4, #4]
 8008674:	6014      	str	r4, [r2, #0]
 8008676:	4628      	mov	r0, r5
 8008678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800867c:	f000 bc30 	b.w	8008ee0 <__malloc_unlock>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d908      	bls.n	8008696 <_free_r+0x42>
 8008684:	6820      	ldr	r0, [r4, #0]
 8008686:	1821      	adds	r1, r4, r0
 8008688:	428b      	cmp	r3, r1
 800868a:	bf01      	itttt	eq
 800868c:	6819      	ldreq	r1, [r3, #0]
 800868e:	685b      	ldreq	r3, [r3, #4]
 8008690:	1809      	addeq	r1, r1, r0
 8008692:	6021      	streq	r1, [r4, #0]
 8008694:	e7ed      	b.n	8008672 <_free_r+0x1e>
 8008696:	461a      	mov	r2, r3
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	b10b      	cbz	r3, 80086a0 <_free_r+0x4c>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d9fa      	bls.n	8008696 <_free_r+0x42>
 80086a0:	6811      	ldr	r1, [r2, #0]
 80086a2:	1850      	adds	r0, r2, r1
 80086a4:	42a0      	cmp	r0, r4
 80086a6:	d10b      	bne.n	80086c0 <_free_r+0x6c>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	4401      	add	r1, r0
 80086ac:	1850      	adds	r0, r2, r1
 80086ae:	4283      	cmp	r3, r0
 80086b0:	6011      	str	r1, [r2, #0]
 80086b2:	d1e0      	bne.n	8008676 <_free_r+0x22>
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	6053      	str	r3, [r2, #4]
 80086ba:	4408      	add	r0, r1
 80086bc:	6010      	str	r0, [r2, #0]
 80086be:	e7da      	b.n	8008676 <_free_r+0x22>
 80086c0:	d902      	bls.n	80086c8 <_free_r+0x74>
 80086c2:	230c      	movs	r3, #12
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	e7d6      	b.n	8008676 <_free_r+0x22>
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	1821      	adds	r1, r4, r0
 80086cc:	428b      	cmp	r3, r1
 80086ce:	bf04      	itt	eq
 80086d0:	6819      	ldreq	r1, [r3, #0]
 80086d2:	685b      	ldreq	r3, [r3, #4]
 80086d4:	6063      	str	r3, [r4, #4]
 80086d6:	bf04      	itt	eq
 80086d8:	1809      	addeq	r1, r1, r0
 80086da:	6021      	streq	r1, [r4, #0]
 80086dc:	6054      	str	r4, [r2, #4]
 80086de:	e7ca      	b.n	8008676 <_free_r+0x22>
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
 80086e2:	bf00      	nop
 80086e4:	20000688 	.word	0x20000688

080086e8 <rshift>:
 80086e8:	6903      	ldr	r3, [r0, #16]
 80086ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086f6:	f100 0414 	add.w	r4, r0, #20
 80086fa:	dd45      	ble.n	8008788 <rshift+0xa0>
 80086fc:	f011 011f 	ands.w	r1, r1, #31
 8008700:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008704:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008708:	d10c      	bne.n	8008724 <rshift+0x3c>
 800870a:	f100 0710 	add.w	r7, r0, #16
 800870e:	4629      	mov	r1, r5
 8008710:	42b1      	cmp	r1, r6
 8008712:	d334      	bcc.n	800877e <rshift+0x96>
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	1eea      	subs	r2, r5, #3
 800871a:	4296      	cmp	r6, r2
 800871c:	bf38      	it	cc
 800871e:	2300      	movcc	r3, #0
 8008720:	4423      	add	r3, r4
 8008722:	e015      	b.n	8008750 <rshift+0x68>
 8008724:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008728:	f1c1 0820 	rsb	r8, r1, #32
 800872c:	40cf      	lsrs	r7, r1
 800872e:	f105 0e04 	add.w	lr, r5, #4
 8008732:	46a1      	mov	r9, r4
 8008734:	4576      	cmp	r6, lr
 8008736:	46f4      	mov	ip, lr
 8008738:	d815      	bhi.n	8008766 <rshift+0x7e>
 800873a:	1a9a      	subs	r2, r3, r2
 800873c:	0092      	lsls	r2, r2, #2
 800873e:	3a04      	subs	r2, #4
 8008740:	3501      	adds	r5, #1
 8008742:	42ae      	cmp	r6, r5
 8008744:	bf38      	it	cc
 8008746:	2200      	movcc	r2, #0
 8008748:	18a3      	adds	r3, r4, r2
 800874a:	50a7      	str	r7, [r4, r2]
 800874c:	b107      	cbz	r7, 8008750 <rshift+0x68>
 800874e:	3304      	adds	r3, #4
 8008750:	1b1a      	subs	r2, r3, r4
 8008752:	42a3      	cmp	r3, r4
 8008754:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008758:	bf08      	it	eq
 800875a:	2300      	moveq	r3, #0
 800875c:	6102      	str	r2, [r0, #16]
 800875e:	bf08      	it	eq
 8008760:	6143      	streq	r3, [r0, #20]
 8008762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008766:	f8dc c000 	ldr.w	ip, [ip]
 800876a:	fa0c fc08 	lsl.w	ip, ip, r8
 800876e:	ea4c 0707 	orr.w	r7, ip, r7
 8008772:	f849 7b04 	str.w	r7, [r9], #4
 8008776:	f85e 7b04 	ldr.w	r7, [lr], #4
 800877a:	40cf      	lsrs	r7, r1
 800877c:	e7da      	b.n	8008734 <rshift+0x4c>
 800877e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008782:	f847 cf04 	str.w	ip, [r7, #4]!
 8008786:	e7c3      	b.n	8008710 <rshift+0x28>
 8008788:	4623      	mov	r3, r4
 800878a:	e7e1      	b.n	8008750 <rshift+0x68>

0800878c <__hexdig_fun>:
 800878c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008790:	2b09      	cmp	r3, #9
 8008792:	d802      	bhi.n	800879a <__hexdig_fun+0xe>
 8008794:	3820      	subs	r0, #32
 8008796:	b2c0      	uxtb	r0, r0
 8008798:	4770      	bx	lr
 800879a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800879e:	2b05      	cmp	r3, #5
 80087a0:	d801      	bhi.n	80087a6 <__hexdig_fun+0x1a>
 80087a2:	3847      	subs	r0, #71	@ 0x47
 80087a4:	e7f7      	b.n	8008796 <__hexdig_fun+0xa>
 80087a6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d801      	bhi.n	80087b2 <__hexdig_fun+0x26>
 80087ae:	3827      	subs	r0, #39	@ 0x27
 80087b0:	e7f1      	b.n	8008796 <__hexdig_fun+0xa>
 80087b2:	2000      	movs	r0, #0
 80087b4:	4770      	bx	lr
	...

080087b8 <__gethex>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	b085      	sub	sp, #20
 80087be:	468a      	mov	sl, r1
 80087c0:	9302      	str	r3, [sp, #8]
 80087c2:	680b      	ldr	r3, [r1, #0]
 80087c4:	9001      	str	r0, [sp, #4]
 80087c6:	4690      	mov	r8, r2
 80087c8:	1c9c      	adds	r4, r3, #2
 80087ca:	46a1      	mov	r9, r4
 80087cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80087d0:	2830      	cmp	r0, #48	@ 0x30
 80087d2:	d0fa      	beq.n	80087ca <__gethex+0x12>
 80087d4:	eba9 0303 	sub.w	r3, r9, r3
 80087d8:	f1a3 0b02 	sub.w	fp, r3, #2
 80087dc:	f7ff ffd6 	bl	800878c <__hexdig_fun>
 80087e0:	4605      	mov	r5, r0
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d168      	bne.n	80088b8 <__gethex+0x100>
 80087e6:	49a0      	ldr	r1, [pc, #640]	@ (8008a68 <__gethex+0x2b0>)
 80087e8:	2201      	movs	r2, #1
 80087ea:	4648      	mov	r0, r9
 80087ec:	f7ff fe19 	bl	8008422 <strncmp>
 80087f0:	4607      	mov	r7, r0
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d167      	bne.n	80088c6 <__gethex+0x10e>
 80087f6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80087fa:	4626      	mov	r6, r4
 80087fc:	f7ff ffc6 	bl	800878c <__hexdig_fun>
 8008800:	2800      	cmp	r0, #0
 8008802:	d062      	beq.n	80088ca <__gethex+0x112>
 8008804:	4623      	mov	r3, r4
 8008806:	7818      	ldrb	r0, [r3, #0]
 8008808:	2830      	cmp	r0, #48	@ 0x30
 800880a:	4699      	mov	r9, r3
 800880c:	f103 0301 	add.w	r3, r3, #1
 8008810:	d0f9      	beq.n	8008806 <__gethex+0x4e>
 8008812:	f7ff ffbb 	bl	800878c <__hexdig_fun>
 8008816:	fab0 f580 	clz	r5, r0
 800881a:	096d      	lsrs	r5, r5, #5
 800881c:	f04f 0b01 	mov.w	fp, #1
 8008820:	464a      	mov	r2, r9
 8008822:	4616      	mov	r6, r2
 8008824:	3201      	adds	r2, #1
 8008826:	7830      	ldrb	r0, [r6, #0]
 8008828:	f7ff ffb0 	bl	800878c <__hexdig_fun>
 800882c:	2800      	cmp	r0, #0
 800882e:	d1f8      	bne.n	8008822 <__gethex+0x6a>
 8008830:	498d      	ldr	r1, [pc, #564]	@ (8008a68 <__gethex+0x2b0>)
 8008832:	2201      	movs	r2, #1
 8008834:	4630      	mov	r0, r6
 8008836:	f7ff fdf4 	bl	8008422 <strncmp>
 800883a:	2800      	cmp	r0, #0
 800883c:	d13f      	bne.n	80088be <__gethex+0x106>
 800883e:	b944      	cbnz	r4, 8008852 <__gethex+0x9a>
 8008840:	1c74      	adds	r4, r6, #1
 8008842:	4622      	mov	r2, r4
 8008844:	4616      	mov	r6, r2
 8008846:	3201      	adds	r2, #1
 8008848:	7830      	ldrb	r0, [r6, #0]
 800884a:	f7ff ff9f 	bl	800878c <__hexdig_fun>
 800884e:	2800      	cmp	r0, #0
 8008850:	d1f8      	bne.n	8008844 <__gethex+0x8c>
 8008852:	1ba4      	subs	r4, r4, r6
 8008854:	00a7      	lsls	r7, r4, #2
 8008856:	7833      	ldrb	r3, [r6, #0]
 8008858:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800885c:	2b50      	cmp	r3, #80	@ 0x50
 800885e:	d13e      	bne.n	80088de <__gethex+0x126>
 8008860:	7873      	ldrb	r3, [r6, #1]
 8008862:	2b2b      	cmp	r3, #43	@ 0x2b
 8008864:	d033      	beq.n	80088ce <__gethex+0x116>
 8008866:	2b2d      	cmp	r3, #45	@ 0x2d
 8008868:	d034      	beq.n	80088d4 <__gethex+0x11c>
 800886a:	1c71      	adds	r1, r6, #1
 800886c:	2400      	movs	r4, #0
 800886e:	7808      	ldrb	r0, [r1, #0]
 8008870:	f7ff ff8c 	bl	800878c <__hexdig_fun>
 8008874:	1e43      	subs	r3, r0, #1
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b18      	cmp	r3, #24
 800887a:	d830      	bhi.n	80088de <__gethex+0x126>
 800887c:	f1a0 0210 	sub.w	r2, r0, #16
 8008880:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008884:	f7ff ff82 	bl	800878c <__hexdig_fun>
 8008888:	f100 3cff 	add.w	ip, r0, #4294967295
 800888c:	fa5f fc8c 	uxtb.w	ip, ip
 8008890:	f1bc 0f18 	cmp.w	ip, #24
 8008894:	f04f 030a 	mov.w	r3, #10
 8008898:	d91e      	bls.n	80088d8 <__gethex+0x120>
 800889a:	b104      	cbz	r4, 800889e <__gethex+0xe6>
 800889c:	4252      	negs	r2, r2
 800889e:	4417      	add	r7, r2
 80088a0:	f8ca 1000 	str.w	r1, [sl]
 80088a4:	b1ed      	cbz	r5, 80088e2 <__gethex+0x12a>
 80088a6:	f1bb 0f00 	cmp.w	fp, #0
 80088aa:	bf0c      	ite	eq
 80088ac:	2506      	moveq	r5, #6
 80088ae:	2500      	movne	r5, #0
 80088b0:	4628      	mov	r0, r5
 80088b2:	b005      	add	sp, #20
 80088b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	2500      	movs	r5, #0
 80088ba:	462c      	mov	r4, r5
 80088bc:	e7b0      	b.n	8008820 <__gethex+0x68>
 80088be:	2c00      	cmp	r4, #0
 80088c0:	d1c7      	bne.n	8008852 <__gethex+0x9a>
 80088c2:	4627      	mov	r7, r4
 80088c4:	e7c7      	b.n	8008856 <__gethex+0x9e>
 80088c6:	464e      	mov	r6, r9
 80088c8:	462f      	mov	r7, r5
 80088ca:	2501      	movs	r5, #1
 80088cc:	e7c3      	b.n	8008856 <__gethex+0x9e>
 80088ce:	2400      	movs	r4, #0
 80088d0:	1cb1      	adds	r1, r6, #2
 80088d2:	e7cc      	b.n	800886e <__gethex+0xb6>
 80088d4:	2401      	movs	r4, #1
 80088d6:	e7fb      	b.n	80088d0 <__gethex+0x118>
 80088d8:	fb03 0002 	mla	r0, r3, r2, r0
 80088dc:	e7ce      	b.n	800887c <__gethex+0xc4>
 80088de:	4631      	mov	r1, r6
 80088e0:	e7de      	b.n	80088a0 <__gethex+0xe8>
 80088e2:	eba6 0309 	sub.w	r3, r6, r9
 80088e6:	3b01      	subs	r3, #1
 80088e8:	4629      	mov	r1, r5
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	dc0a      	bgt.n	8008904 <__gethex+0x14c>
 80088ee:	9801      	ldr	r0, [sp, #4]
 80088f0:	f000 fafc 	bl	8008eec <_Balloc>
 80088f4:	4604      	mov	r4, r0
 80088f6:	b940      	cbnz	r0, 800890a <__gethex+0x152>
 80088f8:	4b5c      	ldr	r3, [pc, #368]	@ (8008a6c <__gethex+0x2b4>)
 80088fa:	4602      	mov	r2, r0
 80088fc:	21e4      	movs	r1, #228	@ 0xe4
 80088fe:	485c      	ldr	r0, [pc, #368]	@ (8008a70 <__gethex+0x2b8>)
 8008900:	f7ff fe8a 	bl	8008618 <__assert_func>
 8008904:	3101      	adds	r1, #1
 8008906:	105b      	asrs	r3, r3, #1
 8008908:	e7ef      	b.n	80088ea <__gethex+0x132>
 800890a:	f100 0a14 	add.w	sl, r0, #20
 800890e:	2300      	movs	r3, #0
 8008910:	4655      	mov	r5, sl
 8008912:	469b      	mov	fp, r3
 8008914:	45b1      	cmp	r9, r6
 8008916:	d337      	bcc.n	8008988 <__gethex+0x1d0>
 8008918:	f845 bb04 	str.w	fp, [r5], #4
 800891c:	eba5 050a 	sub.w	r5, r5, sl
 8008920:	10ad      	asrs	r5, r5, #2
 8008922:	6125      	str	r5, [r4, #16]
 8008924:	4658      	mov	r0, fp
 8008926:	f000 fbd3 	bl	80090d0 <__hi0bits>
 800892a:	016d      	lsls	r5, r5, #5
 800892c:	f8d8 6000 	ldr.w	r6, [r8]
 8008930:	1a2d      	subs	r5, r5, r0
 8008932:	42b5      	cmp	r5, r6
 8008934:	dd54      	ble.n	80089e0 <__gethex+0x228>
 8008936:	1bad      	subs	r5, r5, r6
 8008938:	4629      	mov	r1, r5
 800893a:	4620      	mov	r0, r4
 800893c:	f000 ff67 	bl	800980e <__any_on>
 8008940:	4681      	mov	r9, r0
 8008942:	b178      	cbz	r0, 8008964 <__gethex+0x1ac>
 8008944:	1e6b      	subs	r3, r5, #1
 8008946:	1159      	asrs	r1, r3, #5
 8008948:	f003 021f 	and.w	r2, r3, #31
 800894c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008950:	f04f 0901 	mov.w	r9, #1
 8008954:	fa09 f202 	lsl.w	r2, r9, r2
 8008958:	420a      	tst	r2, r1
 800895a:	d003      	beq.n	8008964 <__gethex+0x1ac>
 800895c:	454b      	cmp	r3, r9
 800895e:	dc36      	bgt.n	80089ce <__gethex+0x216>
 8008960:	f04f 0902 	mov.w	r9, #2
 8008964:	4629      	mov	r1, r5
 8008966:	4620      	mov	r0, r4
 8008968:	f7ff febe 	bl	80086e8 <rshift>
 800896c:	442f      	add	r7, r5
 800896e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008972:	42bb      	cmp	r3, r7
 8008974:	da42      	bge.n	80089fc <__gethex+0x244>
 8008976:	9801      	ldr	r0, [sp, #4]
 8008978:	4621      	mov	r1, r4
 800897a:	f000 faf7 	bl	8008f6c <_Bfree>
 800897e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008980:	2300      	movs	r3, #0
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	25a3      	movs	r5, #163	@ 0xa3
 8008986:	e793      	b.n	80088b0 <__gethex+0xf8>
 8008988:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800898c:	2a2e      	cmp	r2, #46	@ 0x2e
 800898e:	d012      	beq.n	80089b6 <__gethex+0x1fe>
 8008990:	2b20      	cmp	r3, #32
 8008992:	d104      	bne.n	800899e <__gethex+0x1e6>
 8008994:	f845 bb04 	str.w	fp, [r5], #4
 8008998:	f04f 0b00 	mov.w	fp, #0
 800899c:	465b      	mov	r3, fp
 800899e:	7830      	ldrb	r0, [r6, #0]
 80089a0:	9303      	str	r3, [sp, #12]
 80089a2:	f7ff fef3 	bl	800878c <__hexdig_fun>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	f000 000f 	and.w	r0, r0, #15
 80089ac:	4098      	lsls	r0, r3
 80089ae:	ea4b 0b00 	orr.w	fp, fp, r0
 80089b2:	3304      	adds	r3, #4
 80089b4:	e7ae      	b.n	8008914 <__gethex+0x15c>
 80089b6:	45b1      	cmp	r9, r6
 80089b8:	d8ea      	bhi.n	8008990 <__gethex+0x1d8>
 80089ba:	492b      	ldr	r1, [pc, #172]	@ (8008a68 <__gethex+0x2b0>)
 80089bc:	9303      	str	r3, [sp, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff fd2e 	bl	8008422 <strncmp>
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d1e1      	bne.n	8008990 <__gethex+0x1d8>
 80089cc:	e7a2      	b.n	8008914 <__gethex+0x15c>
 80089ce:	1ea9      	subs	r1, r5, #2
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 ff1c 	bl	800980e <__any_on>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d0c2      	beq.n	8008960 <__gethex+0x1a8>
 80089da:	f04f 0903 	mov.w	r9, #3
 80089de:	e7c1      	b.n	8008964 <__gethex+0x1ac>
 80089e0:	da09      	bge.n	80089f6 <__gethex+0x23e>
 80089e2:	1b75      	subs	r5, r6, r5
 80089e4:	4621      	mov	r1, r4
 80089e6:	9801      	ldr	r0, [sp, #4]
 80089e8:	462a      	mov	r2, r5
 80089ea:	f000 fcd7 	bl	800939c <__lshift>
 80089ee:	1b7f      	subs	r7, r7, r5
 80089f0:	4604      	mov	r4, r0
 80089f2:	f100 0a14 	add.w	sl, r0, #20
 80089f6:	f04f 0900 	mov.w	r9, #0
 80089fa:	e7b8      	b.n	800896e <__gethex+0x1b6>
 80089fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a00:	42bd      	cmp	r5, r7
 8008a02:	dd6f      	ble.n	8008ae4 <__gethex+0x32c>
 8008a04:	1bed      	subs	r5, r5, r7
 8008a06:	42ae      	cmp	r6, r5
 8008a08:	dc34      	bgt.n	8008a74 <__gethex+0x2bc>
 8008a0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d022      	beq.n	8008a58 <__gethex+0x2a0>
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d024      	beq.n	8008a60 <__gethex+0x2a8>
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d115      	bne.n	8008a46 <__gethex+0x28e>
 8008a1a:	42ae      	cmp	r6, r5
 8008a1c:	d113      	bne.n	8008a46 <__gethex+0x28e>
 8008a1e:	2e01      	cmp	r6, #1
 8008a20:	d10b      	bne.n	8008a3a <__gethex+0x282>
 8008a22:	9a02      	ldr	r2, [sp, #8]
 8008a24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	f8ca 3000 	str.w	r3, [sl]
 8008a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a34:	2562      	movs	r5, #98	@ 0x62
 8008a36:	601c      	str	r4, [r3, #0]
 8008a38:	e73a      	b.n	80088b0 <__gethex+0xf8>
 8008a3a:	1e71      	subs	r1, r6, #1
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 fee6 	bl	800980e <__any_on>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d1ed      	bne.n	8008a22 <__gethex+0x26a>
 8008a46:	9801      	ldr	r0, [sp, #4]
 8008a48:	4621      	mov	r1, r4
 8008a4a:	f000 fa8f 	bl	8008f6c <_Bfree>
 8008a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a50:	2300      	movs	r3, #0
 8008a52:	6013      	str	r3, [r2, #0]
 8008a54:	2550      	movs	r5, #80	@ 0x50
 8008a56:	e72b      	b.n	80088b0 <__gethex+0xf8>
 8008a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1f3      	bne.n	8008a46 <__gethex+0x28e>
 8008a5e:	e7e0      	b.n	8008a22 <__gethex+0x26a>
 8008a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1dd      	bne.n	8008a22 <__gethex+0x26a>
 8008a66:	e7ee      	b.n	8008a46 <__gethex+0x28e>
 8008a68:	0800a374 	.word	0x0800a374
 8008a6c:	0800a48d 	.word	0x0800a48d
 8008a70:	0800a49e 	.word	0x0800a49e
 8008a74:	1e6f      	subs	r7, r5, #1
 8008a76:	f1b9 0f00 	cmp.w	r9, #0
 8008a7a:	d130      	bne.n	8008ade <__gethex+0x326>
 8008a7c:	b127      	cbz	r7, 8008a88 <__gethex+0x2d0>
 8008a7e:	4639      	mov	r1, r7
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fec4 	bl	800980e <__any_on>
 8008a86:	4681      	mov	r9, r0
 8008a88:	117a      	asrs	r2, r7, #5
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a90:	f007 071f 	and.w	r7, r7, #31
 8008a94:	40bb      	lsls	r3, r7
 8008a96:	4213      	tst	r3, r2
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	bf18      	it	ne
 8008a9e:	f049 0902 	orrne.w	r9, r9, #2
 8008aa2:	f7ff fe21 	bl	80086e8 <rshift>
 8008aa6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008aaa:	1b76      	subs	r6, r6, r5
 8008aac:	2502      	movs	r5, #2
 8008aae:	f1b9 0f00 	cmp.w	r9, #0
 8008ab2:	d047      	beq.n	8008b44 <__gethex+0x38c>
 8008ab4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d015      	beq.n	8008ae8 <__gethex+0x330>
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d017      	beq.n	8008af0 <__gethex+0x338>
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d109      	bne.n	8008ad8 <__gethex+0x320>
 8008ac4:	f019 0f02 	tst.w	r9, #2
 8008ac8:	d006      	beq.n	8008ad8 <__gethex+0x320>
 8008aca:	f8da 3000 	ldr.w	r3, [sl]
 8008ace:	ea49 0903 	orr.w	r9, r9, r3
 8008ad2:	f019 0f01 	tst.w	r9, #1
 8008ad6:	d10e      	bne.n	8008af6 <__gethex+0x33e>
 8008ad8:	f045 0510 	orr.w	r5, r5, #16
 8008adc:	e032      	b.n	8008b44 <__gethex+0x38c>
 8008ade:	f04f 0901 	mov.w	r9, #1
 8008ae2:	e7d1      	b.n	8008a88 <__gethex+0x2d0>
 8008ae4:	2501      	movs	r5, #1
 8008ae6:	e7e2      	b.n	8008aae <__gethex+0x2f6>
 8008ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aea:	f1c3 0301 	rsb	r3, r3, #1
 8008aee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0f0      	beq.n	8008ad8 <__gethex+0x320>
 8008af6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008afa:	f104 0314 	add.w	r3, r4, #20
 8008afe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b02:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b06:	f04f 0c00 	mov.w	ip, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b10:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b14:	d01b      	beq.n	8008b4e <__gethex+0x396>
 8008b16:	3201      	adds	r2, #1
 8008b18:	6002      	str	r2, [r0, #0]
 8008b1a:	2d02      	cmp	r5, #2
 8008b1c:	f104 0314 	add.w	r3, r4, #20
 8008b20:	d13c      	bne.n	8008b9c <__gethex+0x3e4>
 8008b22:	f8d8 2000 	ldr.w	r2, [r8]
 8008b26:	3a01      	subs	r2, #1
 8008b28:	42b2      	cmp	r2, r6
 8008b2a:	d109      	bne.n	8008b40 <__gethex+0x388>
 8008b2c:	1171      	asrs	r1, r6, #5
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b34:	f006 061f 	and.w	r6, r6, #31
 8008b38:	fa02 f606 	lsl.w	r6, r2, r6
 8008b3c:	421e      	tst	r6, r3
 8008b3e:	d13a      	bne.n	8008bb6 <__gethex+0x3fe>
 8008b40:	f045 0520 	orr.w	r5, r5, #32
 8008b44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b46:	601c      	str	r4, [r3, #0]
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	601f      	str	r7, [r3, #0]
 8008b4c:	e6b0      	b.n	80088b0 <__gethex+0xf8>
 8008b4e:	4299      	cmp	r1, r3
 8008b50:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b54:	d8d9      	bhi.n	8008b0a <__gethex+0x352>
 8008b56:	68a3      	ldr	r3, [r4, #8]
 8008b58:	459b      	cmp	fp, r3
 8008b5a:	db17      	blt.n	8008b8c <__gethex+0x3d4>
 8008b5c:	6861      	ldr	r1, [r4, #4]
 8008b5e:	9801      	ldr	r0, [sp, #4]
 8008b60:	3101      	adds	r1, #1
 8008b62:	f000 f9c3 	bl	8008eec <_Balloc>
 8008b66:	4681      	mov	r9, r0
 8008b68:	b918      	cbnz	r0, 8008b72 <__gethex+0x3ba>
 8008b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd4 <__gethex+0x41c>)
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	2184      	movs	r1, #132	@ 0x84
 8008b70:	e6c5      	b.n	80088fe <__gethex+0x146>
 8008b72:	6922      	ldr	r2, [r4, #16]
 8008b74:	3202      	adds	r2, #2
 8008b76:	f104 010c 	add.w	r1, r4, #12
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	300c      	adds	r0, #12
 8008b7e:	f7ff fd32 	bl	80085e6 <memcpy>
 8008b82:	4621      	mov	r1, r4
 8008b84:	9801      	ldr	r0, [sp, #4]
 8008b86:	f000 f9f1 	bl	8008f6c <_Bfree>
 8008b8a:	464c      	mov	r4, r9
 8008b8c:	6923      	ldr	r3, [r4, #16]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b94:	6122      	str	r2, [r4, #16]
 8008b96:	2201      	movs	r2, #1
 8008b98:	615a      	str	r2, [r3, #20]
 8008b9a:	e7be      	b.n	8008b1a <__gethex+0x362>
 8008b9c:	6922      	ldr	r2, [r4, #16]
 8008b9e:	455a      	cmp	r2, fp
 8008ba0:	dd0b      	ble.n	8008bba <__gethex+0x402>
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f7ff fd9f 	bl	80086e8 <rshift>
 8008baa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bae:	3701      	adds	r7, #1
 8008bb0:	42bb      	cmp	r3, r7
 8008bb2:	f6ff aee0 	blt.w	8008976 <__gethex+0x1be>
 8008bb6:	2501      	movs	r5, #1
 8008bb8:	e7c2      	b.n	8008b40 <__gethex+0x388>
 8008bba:	f016 061f 	ands.w	r6, r6, #31
 8008bbe:	d0fa      	beq.n	8008bb6 <__gethex+0x3fe>
 8008bc0:	4453      	add	r3, sl
 8008bc2:	f1c6 0620 	rsb	r6, r6, #32
 8008bc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008bca:	f000 fa81 	bl	80090d0 <__hi0bits>
 8008bce:	42b0      	cmp	r0, r6
 8008bd0:	dbe7      	blt.n	8008ba2 <__gethex+0x3ea>
 8008bd2:	e7f0      	b.n	8008bb6 <__gethex+0x3fe>
 8008bd4:	0800a48d 	.word	0x0800a48d

08008bd8 <L_shift>:
 8008bd8:	f1c2 0208 	rsb	r2, r2, #8
 8008bdc:	0092      	lsls	r2, r2, #2
 8008bde:	b570      	push	{r4, r5, r6, lr}
 8008be0:	f1c2 0620 	rsb	r6, r2, #32
 8008be4:	6843      	ldr	r3, [r0, #4]
 8008be6:	6804      	ldr	r4, [r0, #0]
 8008be8:	fa03 f506 	lsl.w	r5, r3, r6
 8008bec:	432c      	orrs	r4, r5
 8008bee:	40d3      	lsrs	r3, r2
 8008bf0:	6004      	str	r4, [r0, #0]
 8008bf2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bf6:	4288      	cmp	r0, r1
 8008bf8:	d3f4      	bcc.n	8008be4 <L_shift+0xc>
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}

08008bfc <__match>:
 8008bfc:	b530      	push	{r4, r5, lr}
 8008bfe:	6803      	ldr	r3, [r0, #0]
 8008c00:	3301      	adds	r3, #1
 8008c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c06:	b914      	cbnz	r4, 8008c0e <__match+0x12>
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	2001      	movs	r0, #1
 8008c0c:	bd30      	pop	{r4, r5, pc}
 8008c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c12:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008c16:	2d19      	cmp	r5, #25
 8008c18:	bf98      	it	ls
 8008c1a:	3220      	addls	r2, #32
 8008c1c:	42a2      	cmp	r2, r4
 8008c1e:	d0f0      	beq.n	8008c02 <__match+0x6>
 8008c20:	2000      	movs	r0, #0
 8008c22:	e7f3      	b.n	8008c0c <__match+0x10>

08008c24 <__hexnan>:
 8008c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	680b      	ldr	r3, [r1, #0]
 8008c2a:	6801      	ldr	r1, [r0, #0]
 8008c2c:	115e      	asrs	r6, r3, #5
 8008c2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c32:	f013 031f 	ands.w	r3, r3, #31
 8008c36:	b087      	sub	sp, #28
 8008c38:	bf18      	it	ne
 8008c3a:	3604      	addne	r6, #4
 8008c3c:	2500      	movs	r5, #0
 8008c3e:	1f37      	subs	r7, r6, #4
 8008c40:	4682      	mov	sl, r0
 8008c42:	4690      	mov	r8, r2
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c4a:	46b9      	mov	r9, r7
 8008c4c:	463c      	mov	r4, r7
 8008c4e:	9502      	str	r5, [sp, #8]
 8008c50:	46ab      	mov	fp, r5
 8008c52:	784a      	ldrb	r2, [r1, #1]
 8008c54:	1c4b      	adds	r3, r1, #1
 8008c56:	9303      	str	r3, [sp, #12]
 8008c58:	b342      	cbz	r2, 8008cac <__hexnan+0x88>
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	9105      	str	r1, [sp, #20]
 8008c5e:	9204      	str	r2, [sp, #16]
 8008c60:	f7ff fd94 	bl	800878c <__hexdig_fun>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d151      	bne.n	8008d0c <__hexnan+0xe8>
 8008c68:	9a04      	ldr	r2, [sp, #16]
 8008c6a:	9905      	ldr	r1, [sp, #20]
 8008c6c:	2a20      	cmp	r2, #32
 8008c6e:	d818      	bhi.n	8008ca2 <__hexnan+0x7e>
 8008c70:	9b02      	ldr	r3, [sp, #8]
 8008c72:	459b      	cmp	fp, r3
 8008c74:	dd13      	ble.n	8008c9e <__hexnan+0x7a>
 8008c76:	454c      	cmp	r4, r9
 8008c78:	d206      	bcs.n	8008c88 <__hexnan+0x64>
 8008c7a:	2d07      	cmp	r5, #7
 8008c7c:	dc04      	bgt.n	8008c88 <__hexnan+0x64>
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4649      	mov	r1, r9
 8008c82:	4620      	mov	r0, r4
 8008c84:	f7ff ffa8 	bl	8008bd8 <L_shift>
 8008c88:	4544      	cmp	r4, r8
 8008c8a:	d952      	bls.n	8008d32 <__hexnan+0x10e>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f1a4 0904 	sub.w	r9, r4, #4
 8008c92:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c96:	f8cd b008 	str.w	fp, [sp, #8]
 8008c9a:	464c      	mov	r4, r9
 8008c9c:	461d      	mov	r5, r3
 8008c9e:	9903      	ldr	r1, [sp, #12]
 8008ca0:	e7d7      	b.n	8008c52 <__hexnan+0x2e>
 8008ca2:	2a29      	cmp	r2, #41	@ 0x29
 8008ca4:	d157      	bne.n	8008d56 <__hexnan+0x132>
 8008ca6:	3102      	adds	r1, #2
 8008ca8:	f8ca 1000 	str.w	r1, [sl]
 8008cac:	f1bb 0f00 	cmp.w	fp, #0
 8008cb0:	d051      	beq.n	8008d56 <__hexnan+0x132>
 8008cb2:	454c      	cmp	r4, r9
 8008cb4:	d206      	bcs.n	8008cc4 <__hexnan+0xa0>
 8008cb6:	2d07      	cmp	r5, #7
 8008cb8:	dc04      	bgt.n	8008cc4 <__hexnan+0xa0>
 8008cba:	462a      	mov	r2, r5
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7ff ff8a 	bl	8008bd8 <L_shift>
 8008cc4:	4544      	cmp	r4, r8
 8008cc6:	d936      	bls.n	8008d36 <__hexnan+0x112>
 8008cc8:	f1a8 0204 	sub.w	r2, r8, #4
 8008ccc:	4623      	mov	r3, r4
 8008cce:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cd2:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cd6:	429f      	cmp	r7, r3
 8008cd8:	d2f9      	bcs.n	8008cce <__hexnan+0xaa>
 8008cda:	1b3b      	subs	r3, r7, r4
 8008cdc:	f023 0303 	bic.w	r3, r3, #3
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	3401      	adds	r4, #1
 8008ce4:	3e03      	subs	r6, #3
 8008ce6:	42b4      	cmp	r4, r6
 8008ce8:	bf88      	it	hi
 8008cea:	2304      	movhi	r3, #4
 8008cec:	4443      	add	r3, r8
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f843 2b04 	str.w	r2, [r3], #4
 8008cf4:	429f      	cmp	r7, r3
 8008cf6:	d2fb      	bcs.n	8008cf0 <__hexnan+0xcc>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	b91b      	cbnz	r3, 8008d04 <__hexnan+0xe0>
 8008cfc:	4547      	cmp	r7, r8
 8008cfe:	d128      	bne.n	8008d52 <__hexnan+0x12e>
 8008d00:	2301      	movs	r3, #1
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	2005      	movs	r0, #5
 8008d06:	b007      	add	sp, #28
 8008d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	2d08      	cmp	r5, #8
 8008d10:	f10b 0b01 	add.w	fp, fp, #1
 8008d14:	dd06      	ble.n	8008d24 <__hexnan+0x100>
 8008d16:	4544      	cmp	r4, r8
 8008d18:	d9c1      	bls.n	8008c9e <__hexnan+0x7a>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d20:	2501      	movs	r5, #1
 8008d22:	3c04      	subs	r4, #4
 8008d24:	6822      	ldr	r2, [r4, #0]
 8008d26:	f000 000f 	and.w	r0, r0, #15
 8008d2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d2e:	6020      	str	r0, [r4, #0]
 8008d30:	e7b5      	b.n	8008c9e <__hexnan+0x7a>
 8008d32:	2508      	movs	r5, #8
 8008d34:	e7b3      	b.n	8008c9e <__hexnan+0x7a>
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0dd      	beq.n	8008cf8 <__hexnan+0xd4>
 8008d3c:	f1c3 0320 	rsb	r3, r3, #32
 8008d40:	f04f 32ff 	mov.w	r2, #4294967295
 8008d44:	40da      	lsrs	r2, r3
 8008d46:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d50:	e7d2      	b.n	8008cf8 <__hexnan+0xd4>
 8008d52:	3f04      	subs	r7, #4
 8008d54:	e7d0      	b.n	8008cf8 <__hexnan+0xd4>
 8008d56:	2004      	movs	r0, #4
 8008d58:	e7d5      	b.n	8008d06 <__hexnan+0xe2>
	...

08008d5c <malloc>:
 8008d5c:	4b02      	ldr	r3, [pc, #8]	@ (8008d68 <malloc+0xc>)
 8008d5e:	4601      	mov	r1, r0
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	f000 b825 	b.w	8008db0 <_malloc_r>
 8008d66:	bf00      	nop
 8008d68:	20000188 	.word	0x20000188

08008d6c <sbrk_aligned>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8008dac <sbrk_aligned+0x40>)
 8008d70:	460c      	mov	r4, r1
 8008d72:	6831      	ldr	r1, [r6, #0]
 8008d74:	4605      	mov	r5, r0
 8008d76:	b911      	cbnz	r1, 8008d7e <sbrk_aligned+0x12>
 8008d78:	f000 fe36 	bl	80099e8 <_sbrk_r>
 8008d7c:	6030      	str	r0, [r6, #0]
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4628      	mov	r0, r5
 8008d82:	f000 fe31 	bl	80099e8 <_sbrk_r>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	d103      	bne.n	8008d92 <sbrk_aligned+0x26>
 8008d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d8e:	4620      	mov	r0, r4
 8008d90:	bd70      	pop	{r4, r5, r6, pc}
 8008d92:	1cc4      	adds	r4, r0, #3
 8008d94:	f024 0403 	bic.w	r4, r4, #3
 8008d98:	42a0      	cmp	r0, r4
 8008d9a:	d0f8      	beq.n	8008d8e <sbrk_aligned+0x22>
 8008d9c:	1a21      	subs	r1, r4, r0
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f000 fe22 	bl	80099e8 <_sbrk_r>
 8008da4:	3001      	adds	r0, #1
 8008da6:	d1f2      	bne.n	8008d8e <sbrk_aligned+0x22>
 8008da8:	e7ef      	b.n	8008d8a <sbrk_aligned+0x1e>
 8008daa:	bf00      	nop
 8008dac:	20000684 	.word	0x20000684

08008db0 <_malloc_r>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	1ccd      	adds	r5, r1, #3
 8008db6:	f025 0503 	bic.w	r5, r5, #3
 8008dba:	3508      	adds	r5, #8
 8008dbc:	2d0c      	cmp	r5, #12
 8008dbe:	bf38      	it	cc
 8008dc0:	250c      	movcc	r5, #12
 8008dc2:	2d00      	cmp	r5, #0
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	db01      	blt.n	8008dcc <_malloc_r+0x1c>
 8008dc8:	42a9      	cmp	r1, r5
 8008dca:	d904      	bls.n	8008dd6 <_malloc_r+0x26>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	6033      	str	r3, [r6, #0]
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008eac <_malloc_r+0xfc>
 8008dda:	f000 f87b 	bl	8008ed4 <__malloc_lock>
 8008dde:	f8d8 3000 	ldr.w	r3, [r8]
 8008de2:	461c      	mov	r4, r3
 8008de4:	bb44      	cbnz	r4, 8008e38 <_malloc_r+0x88>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff ffbf 	bl	8008d6c <sbrk_aligned>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	4604      	mov	r4, r0
 8008df2:	d158      	bne.n	8008ea6 <_malloc_r+0xf6>
 8008df4:	f8d8 4000 	ldr.w	r4, [r8]
 8008df8:	4627      	mov	r7, r4
 8008dfa:	2f00      	cmp	r7, #0
 8008dfc:	d143      	bne.n	8008e86 <_malloc_r+0xd6>
 8008dfe:	2c00      	cmp	r4, #0
 8008e00:	d04b      	beq.n	8008e9a <_malloc_r+0xea>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	4639      	mov	r1, r7
 8008e06:	4630      	mov	r0, r6
 8008e08:	eb04 0903 	add.w	r9, r4, r3
 8008e0c:	f000 fdec 	bl	80099e8 <_sbrk_r>
 8008e10:	4581      	cmp	r9, r0
 8008e12:	d142      	bne.n	8008e9a <_malloc_r+0xea>
 8008e14:	6821      	ldr	r1, [r4, #0]
 8008e16:	1a6d      	subs	r5, r5, r1
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7ff ffa6 	bl	8008d6c <sbrk_aligned>
 8008e20:	3001      	adds	r0, #1
 8008e22:	d03a      	beq.n	8008e9a <_malloc_r+0xea>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	442b      	add	r3, r5
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	bb62      	cbnz	r2, 8008e8c <_malloc_r+0xdc>
 8008e32:	f8c8 7000 	str.w	r7, [r8]
 8008e36:	e00f      	b.n	8008e58 <_malloc_r+0xa8>
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	1b52      	subs	r2, r2, r5
 8008e3c:	d420      	bmi.n	8008e80 <_malloc_r+0xd0>
 8008e3e:	2a0b      	cmp	r2, #11
 8008e40:	d917      	bls.n	8008e72 <_malloc_r+0xc2>
 8008e42:	1961      	adds	r1, r4, r5
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	6025      	str	r5, [r4, #0]
 8008e48:	bf18      	it	ne
 8008e4a:	6059      	strne	r1, [r3, #4]
 8008e4c:	6863      	ldr	r3, [r4, #4]
 8008e4e:	bf08      	it	eq
 8008e50:	f8c8 1000 	streq.w	r1, [r8]
 8008e54:	5162      	str	r2, [r4, r5]
 8008e56:	604b      	str	r3, [r1, #4]
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 f841 	bl	8008ee0 <__malloc_unlock>
 8008e5e:	f104 000b 	add.w	r0, r4, #11
 8008e62:	1d23      	adds	r3, r4, #4
 8008e64:	f020 0007 	bic.w	r0, r0, #7
 8008e68:	1ac2      	subs	r2, r0, r3
 8008e6a:	bf1c      	itt	ne
 8008e6c:	1a1b      	subne	r3, r3, r0
 8008e6e:	50a3      	strne	r3, [r4, r2]
 8008e70:	e7af      	b.n	8008dd2 <_malloc_r+0x22>
 8008e72:	6862      	ldr	r2, [r4, #4]
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	bf0c      	ite	eq
 8008e78:	f8c8 2000 	streq.w	r2, [r8]
 8008e7c:	605a      	strne	r2, [r3, #4]
 8008e7e:	e7eb      	b.n	8008e58 <_malloc_r+0xa8>
 8008e80:	4623      	mov	r3, r4
 8008e82:	6864      	ldr	r4, [r4, #4]
 8008e84:	e7ae      	b.n	8008de4 <_malloc_r+0x34>
 8008e86:	463c      	mov	r4, r7
 8008e88:	687f      	ldr	r7, [r7, #4]
 8008e8a:	e7b6      	b.n	8008dfa <_malloc_r+0x4a>
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	d1fb      	bne.n	8008e8c <_malloc_r+0xdc>
 8008e94:	2300      	movs	r3, #0
 8008e96:	6053      	str	r3, [r2, #4]
 8008e98:	e7de      	b.n	8008e58 <_malloc_r+0xa8>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	6033      	str	r3, [r6, #0]
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f000 f81e 	bl	8008ee0 <__malloc_unlock>
 8008ea4:	e794      	b.n	8008dd0 <_malloc_r+0x20>
 8008ea6:	6005      	str	r5, [r0, #0]
 8008ea8:	e7d6      	b.n	8008e58 <_malloc_r+0xa8>
 8008eaa:	bf00      	nop
 8008eac:	20000688 	.word	0x20000688

08008eb0 <__ascii_mbtowc>:
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	b901      	cbnz	r1, 8008eb6 <__ascii_mbtowc+0x6>
 8008eb4:	a901      	add	r1, sp, #4
 8008eb6:	b142      	cbz	r2, 8008eca <__ascii_mbtowc+0x1a>
 8008eb8:	b14b      	cbz	r3, 8008ece <__ascii_mbtowc+0x1e>
 8008eba:	7813      	ldrb	r3, [r2, #0]
 8008ebc:	600b      	str	r3, [r1, #0]
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	1e10      	subs	r0, r2, #0
 8008ec2:	bf18      	it	ne
 8008ec4:	2001      	movne	r0, #1
 8008ec6:	b002      	add	sp, #8
 8008ec8:	4770      	bx	lr
 8008eca:	4610      	mov	r0, r2
 8008ecc:	e7fb      	b.n	8008ec6 <__ascii_mbtowc+0x16>
 8008ece:	f06f 0001 	mvn.w	r0, #1
 8008ed2:	e7f8      	b.n	8008ec6 <__ascii_mbtowc+0x16>

08008ed4 <__malloc_lock>:
 8008ed4:	4801      	ldr	r0, [pc, #4]	@ (8008edc <__malloc_lock+0x8>)
 8008ed6:	f7ff bb84 	b.w	80085e2 <__retarget_lock_acquire_recursive>
 8008eda:	bf00      	nop
 8008edc:	20000680 	.word	0x20000680

08008ee0 <__malloc_unlock>:
 8008ee0:	4801      	ldr	r0, [pc, #4]	@ (8008ee8 <__malloc_unlock+0x8>)
 8008ee2:	f7ff bb7f 	b.w	80085e4 <__retarget_lock_release_recursive>
 8008ee6:	bf00      	nop
 8008ee8:	20000680 	.word	0x20000680

08008eec <_Balloc>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	69c6      	ldr	r6, [r0, #28]
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	460d      	mov	r5, r1
 8008ef4:	b976      	cbnz	r6, 8008f14 <_Balloc+0x28>
 8008ef6:	2010      	movs	r0, #16
 8008ef8:	f7ff ff30 	bl	8008d5c <malloc>
 8008efc:	4602      	mov	r2, r0
 8008efe:	61e0      	str	r0, [r4, #28]
 8008f00:	b920      	cbnz	r0, 8008f0c <_Balloc+0x20>
 8008f02:	4b18      	ldr	r3, [pc, #96]	@ (8008f64 <_Balloc+0x78>)
 8008f04:	4818      	ldr	r0, [pc, #96]	@ (8008f68 <_Balloc+0x7c>)
 8008f06:	216b      	movs	r1, #107	@ 0x6b
 8008f08:	f7ff fb86 	bl	8008618 <__assert_func>
 8008f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f10:	6006      	str	r6, [r0, #0]
 8008f12:	60c6      	str	r6, [r0, #12]
 8008f14:	69e6      	ldr	r6, [r4, #28]
 8008f16:	68f3      	ldr	r3, [r6, #12]
 8008f18:	b183      	cbz	r3, 8008f3c <_Balloc+0x50>
 8008f1a:	69e3      	ldr	r3, [r4, #28]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f22:	b9b8      	cbnz	r0, 8008f54 <_Balloc+0x68>
 8008f24:	2101      	movs	r1, #1
 8008f26:	fa01 f605 	lsl.w	r6, r1, r5
 8008f2a:	1d72      	adds	r2, r6, #5
 8008f2c:	0092      	lsls	r2, r2, #2
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f000 fd71 	bl	8009a16 <_calloc_r>
 8008f34:	b160      	cbz	r0, 8008f50 <_Balloc+0x64>
 8008f36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f3a:	e00e      	b.n	8008f5a <_Balloc+0x6e>
 8008f3c:	2221      	movs	r2, #33	@ 0x21
 8008f3e:	2104      	movs	r1, #4
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 fd68 	bl	8009a16 <_calloc_r>
 8008f46:	69e3      	ldr	r3, [r4, #28]
 8008f48:	60f0      	str	r0, [r6, #12]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e4      	bne.n	8008f1a <_Balloc+0x2e>
 8008f50:	2000      	movs	r0, #0
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	6802      	ldr	r2, [r0, #0]
 8008f56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f60:	e7f7      	b.n	8008f52 <_Balloc+0x66>
 8008f62:	bf00      	nop
 8008f64:	0800a3d8 	.word	0x0800a3d8
 8008f68:	0800a4fe 	.word	0x0800a4fe

08008f6c <_Bfree>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	69c6      	ldr	r6, [r0, #28]
 8008f70:	4605      	mov	r5, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	b976      	cbnz	r6, 8008f94 <_Bfree+0x28>
 8008f76:	2010      	movs	r0, #16
 8008f78:	f7ff fef0 	bl	8008d5c <malloc>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	61e8      	str	r0, [r5, #28]
 8008f80:	b920      	cbnz	r0, 8008f8c <_Bfree+0x20>
 8008f82:	4b09      	ldr	r3, [pc, #36]	@ (8008fa8 <_Bfree+0x3c>)
 8008f84:	4809      	ldr	r0, [pc, #36]	@ (8008fac <_Bfree+0x40>)
 8008f86:	218f      	movs	r1, #143	@ 0x8f
 8008f88:	f7ff fb46 	bl	8008618 <__assert_func>
 8008f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f90:	6006      	str	r6, [r0, #0]
 8008f92:	60c6      	str	r6, [r0, #12]
 8008f94:	b13c      	cbz	r4, 8008fa6 <_Bfree+0x3a>
 8008f96:	69eb      	ldr	r3, [r5, #28]
 8008f98:	6862      	ldr	r2, [r4, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fa0:	6021      	str	r1, [r4, #0]
 8008fa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}
 8008fa8:	0800a3d8 	.word	0x0800a3d8
 8008fac:	0800a4fe 	.word	0x0800a4fe

08008fb0 <__multadd>:
 8008fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb4:	690d      	ldr	r5, [r1, #16]
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	461e      	mov	r6, r3
 8008fbc:	f101 0c14 	add.w	ip, r1, #20
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	f8dc 3000 	ldr.w	r3, [ip]
 8008fc6:	b299      	uxth	r1, r3
 8008fc8:	fb02 6101 	mla	r1, r2, r1, r6
 8008fcc:	0c1e      	lsrs	r6, r3, #16
 8008fce:	0c0b      	lsrs	r3, r1, #16
 8008fd0:	fb02 3306 	mla	r3, r2, r6, r3
 8008fd4:	b289      	uxth	r1, r1
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fdc:	4285      	cmp	r5, r0
 8008fde:	f84c 1b04 	str.w	r1, [ip], #4
 8008fe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fe6:	dcec      	bgt.n	8008fc2 <__multadd+0x12>
 8008fe8:	b30e      	cbz	r6, 800902e <__multadd+0x7e>
 8008fea:	68a3      	ldr	r3, [r4, #8]
 8008fec:	42ab      	cmp	r3, r5
 8008fee:	dc19      	bgt.n	8009024 <__multadd+0x74>
 8008ff0:	6861      	ldr	r1, [r4, #4]
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	3101      	adds	r1, #1
 8008ff6:	f7ff ff79 	bl	8008eec <_Balloc>
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	b928      	cbnz	r0, 800900a <__multadd+0x5a>
 8008ffe:	4602      	mov	r2, r0
 8009000:	4b0c      	ldr	r3, [pc, #48]	@ (8009034 <__multadd+0x84>)
 8009002:	480d      	ldr	r0, [pc, #52]	@ (8009038 <__multadd+0x88>)
 8009004:	21ba      	movs	r1, #186	@ 0xba
 8009006:	f7ff fb07 	bl	8008618 <__assert_func>
 800900a:	6922      	ldr	r2, [r4, #16]
 800900c:	3202      	adds	r2, #2
 800900e:	f104 010c 	add.w	r1, r4, #12
 8009012:	0092      	lsls	r2, r2, #2
 8009014:	300c      	adds	r0, #12
 8009016:	f7ff fae6 	bl	80085e6 <memcpy>
 800901a:	4621      	mov	r1, r4
 800901c:	4638      	mov	r0, r7
 800901e:	f7ff ffa5 	bl	8008f6c <_Bfree>
 8009022:	4644      	mov	r4, r8
 8009024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009028:	3501      	adds	r5, #1
 800902a:	615e      	str	r6, [r3, #20]
 800902c:	6125      	str	r5, [r4, #16]
 800902e:	4620      	mov	r0, r4
 8009030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009034:	0800a48d 	.word	0x0800a48d
 8009038:	0800a4fe 	.word	0x0800a4fe

0800903c <__s2b>:
 800903c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009040:	460c      	mov	r4, r1
 8009042:	4615      	mov	r5, r2
 8009044:	461f      	mov	r7, r3
 8009046:	2209      	movs	r2, #9
 8009048:	3308      	adds	r3, #8
 800904a:	4606      	mov	r6, r0
 800904c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009050:	2100      	movs	r1, #0
 8009052:	2201      	movs	r2, #1
 8009054:	429a      	cmp	r2, r3
 8009056:	db09      	blt.n	800906c <__s2b+0x30>
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff ff47 	bl	8008eec <_Balloc>
 800905e:	b940      	cbnz	r0, 8009072 <__s2b+0x36>
 8009060:	4602      	mov	r2, r0
 8009062:	4b19      	ldr	r3, [pc, #100]	@ (80090c8 <__s2b+0x8c>)
 8009064:	4819      	ldr	r0, [pc, #100]	@ (80090cc <__s2b+0x90>)
 8009066:	21d3      	movs	r1, #211	@ 0xd3
 8009068:	f7ff fad6 	bl	8008618 <__assert_func>
 800906c:	0052      	lsls	r2, r2, #1
 800906e:	3101      	adds	r1, #1
 8009070:	e7f0      	b.n	8009054 <__s2b+0x18>
 8009072:	9b08      	ldr	r3, [sp, #32]
 8009074:	6143      	str	r3, [r0, #20]
 8009076:	2d09      	cmp	r5, #9
 8009078:	f04f 0301 	mov.w	r3, #1
 800907c:	6103      	str	r3, [r0, #16]
 800907e:	dd16      	ble.n	80090ae <__s2b+0x72>
 8009080:	f104 0909 	add.w	r9, r4, #9
 8009084:	46c8      	mov	r8, r9
 8009086:	442c      	add	r4, r5
 8009088:	f818 3b01 	ldrb.w	r3, [r8], #1
 800908c:	4601      	mov	r1, r0
 800908e:	3b30      	subs	r3, #48	@ 0x30
 8009090:	220a      	movs	r2, #10
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ff8c 	bl	8008fb0 <__multadd>
 8009098:	45a0      	cmp	r8, r4
 800909a:	d1f5      	bne.n	8009088 <__s2b+0x4c>
 800909c:	f1a5 0408 	sub.w	r4, r5, #8
 80090a0:	444c      	add	r4, r9
 80090a2:	1b2d      	subs	r5, r5, r4
 80090a4:	1963      	adds	r3, r4, r5
 80090a6:	42bb      	cmp	r3, r7
 80090a8:	db04      	blt.n	80090b4 <__s2b+0x78>
 80090aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ae:	340a      	adds	r4, #10
 80090b0:	2509      	movs	r5, #9
 80090b2:	e7f6      	b.n	80090a2 <__s2b+0x66>
 80090b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090b8:	4601      	mov	r1, r0
 80090ba:	3b30      	subs	r3, #48	@ 0x30
 80090bc:	220a      	movs	r2, #10
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff76 	bl	8008fb0 <__multadd>
 80090c4:	e7ee      	b.n	80090a4 <__s2b+0x68>
 80090c6:	bf00      	nop
 80090c8:	0800a48d 	.word	0x0800a48d
 80090cc:	0800a4fe 	.word	0x0800a4fe

080090d0 <__hi0bits>:
 80090d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090d4:	4603      	mov	r3, r0
 80090d6:	bf36      	itet	cc
 80090d8:	0403      	lslcc	r3, r0, #16
 80090da:	2000      	movcs	r0, #0
 80090dc:	2010      	movcc	r0, #16
 80090de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090e2:	bf3c      	itt	cc
 80090e4:	021b      	lslcc	r3, r3, #8
 80090e6:	3008      	addcc	r0, #8
 80090e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ec:	bf3c      	itt	cc
 80090ee:	011b      	lslcc	r3, r3, #4
 80090f0:	3004      	addcc	r0, #4
 80090f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090f6:	bf3c      	itt	cc
 80090f8:	009b      	lslcc	r3, r3, #2
 80090fa:	3002      	addcc	r0, #2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	db05      	blt.n	800910c <__hi0bits+0x3c>
 8009100:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009104:	f100 0001 	add.w	r0, r0, #1
 8009108:	bf08      	it	eq
 800910a:	2020      	moveq	r0, #32
 800910c:	4770      	bx	lr

0800910e <__lo0bits>:
 800910e:	6803      	ldr	r3, [r0, #0]
 8009110:	4602      	mov	r2, r0
 8009112:	f013 0007 	ands.w	r0, r3, #7
 8009116:	d00b      	beq.n	8009130 <__lo0bits+0x22>
 8009118:	07d9      	lsls	r1, r3, #31
 800911a:	d421      	bmi.n	8009160 <__lo0bits+0x52>
 800911c:	0798      	lsls	r0, r3, #30
 800911e:	bf49      	itett	mi
 8009120:	085b      	lsrmi	r3, r3, #1
 8009122:	089b      	lsrpl	r3, r3, #2
 8009124:	2001      	movmi	r0, #1
 8009126:	6013      	strmi	r3, [r2, #0]
 8009128:	bf5c      	itt	pl
 800912a:	6013      	strpl	r3, [r2, #0]
 800912c:	2002      	movpl	r0, #2
 800912e:	4770      	bx	lr
 8009130:	b299      	uxth	r1, r3
 8009132:	b909      	cbnz	r1, 8009138 <__lo0bits+0x2a>
 8009134:	0c1b      	lsrs	r3, r3, #16
 8009136:	2010      	movs	r0, #16
 8009138:	b2d9      	uxtb	r1, r3
 800913a:	b909      	cbnz	r1, 8009140 <__lo0bits+0x32>
 800913c:	3008      	adds	r0, #8
 800913e:	0a1b      	lsrs	r3, r3, #8
 8009140:	0719      	lsls	r1, r3, #28
 8009142:	bf04      	itt	eq
 8009144:	091b      	lsreq	r3, r3, #4
 8009146:	3004      	addeq	r0, #4
 8009148:	0799      	lsls	r1, r3, #30
 800914a:	bf04      	itt	eq
 800914c:	089b      	lsreq	r3, r3, #2
 800914e:	3002      	addeq	r0, #2
 8009150:	07d9      	lsls	r1, r3, #31
 8009152:	d403      	bmi.n	800915c <__lo0bits+0x4e>
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	f100 0001 	add.w	r0, r0, #1
 800915a:	d003      	beq.n	8009164 <__lo0bits+0x56>
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	4770      	bx	lr
 8009160:	2000      	movs	r0, #0
 8009162:	4770      	bx	lr
 8009164:	2020      	movs	r0, #32
 8009166:	4770      	bx	lr

08009168 <__i2b>:
 8009168:	b510      	push	{r4, lr}
 800916a:	460c      	mov	r4, r1
 800916c:	2101      	movs	r1, #1
 800916e:	f7ff febd 	bl	8008eec <_Balloc>
 8009172:	4602      	mov	r2, r0
 8009174:	b928      	cbnz	r0, 8009182 <__i2b+0x1a>
 8009176:	4b05      	ldr	r3, [pc, #20]	@ (800918c <__i2b+0x24>)
 8009178:	4805      	ldr	r0, [pc, #20]	@ (8009190 <__i2b+0x28>)
 800917a:	f240 1145 	movw	r1, #325	@ 0x145
 800917e:	f7ff fa4b 	bl	8008618 <__assert_func>
 8009182:	2301      	movs	r3, #1
 8009184:	6144      	str	r4, [r0, #20]
 8009186:	6103      	str	r3, [r0, #16]
 8009188:	bd10      	pop	{r4, pc}
 800918a:	bf00      	nop
 800918c:	0800a48d 	.word	0x0800a48d
 8009190:	0800a4fe 	.word	0x0800a4fe

08009194 <__multiply>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	4614      	mov	r4, r2
 800919a:	690a      	ldr	r2, [r1, #16]
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	429a      	cmp	r2, r3
 80091a0:	bfa8      	it	ge
 80091a2:	4623      	movge	r3, r4
 80091a4:	460f      	mov	r7, r1
 80091a6:	bfa4      	itt	ge
 80091a8:	460c      	movge	r4, r1
 80091aa:	461f      	movge	r7, r3
 80091ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80091b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80091b4:	68a3      	ldr	r3, [r4, #8]
 80091b6:	6861      	ldr	r1, [r4, #4]
 80091b8:	eb0a 0609 	add.w	r6, sl, r9
 80091bc:	42b3      	cmp	r3, r6
 80091be:	b085      	sub	sp, #20
 80091c0:	bfb8      	it	lt
 80091c2:	3101      	addlt	r1, #1
 80091c4:	f7ff fe92 	bl	8008eec <_Balloc>
 80091c8:	b930      	cbnz	r0, 80091d8 <__multiply+0x44>
 80091ca:	4602      	mov	r2, r0
 80091cc:	4b44      	ldr	r3, [pc, #272]	@ (80092e0 <__multiply+0x14c>)
 80091ce:	4845      	ldr	r0, [pc, #276]	@ (80092e4 <__multiply+0x150>)
 80091d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091d4:	f7ff fa20 	bl	8008618 <__assert_func>
 80091d8:	f100 0514 	add.w	r5, r0, #20
 80091dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091e0:	462b      	mov	r3, r5
 80091e2:	2200      	movs	r2, #0
 80091e4:	4543      	cmp	r3, r8
 80091e6:	d321      	bcc.n	800922c <__multiply+0x98>
 80091e8:	f107 0114 	add.w	r1, r7, #20
 80091ec:	f104 0214 	add.w	r2, r4, #20
 80091f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80091f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80091f8:	9302      	str	r3, [sp, #8]
 80091fa:	1b13      	subs	r3, r2, r4
 80091fc:	3b15      	subs	r3, #21
 80091fe:	f023 0303 	bic.w	r3, r3, #3
 8009202:	3304      	adds	r3, #4
 8009204:	f104 0715 	add.w	r7, r4, #21
 8009208:	42ba      	cmp	r2, r7
 800920a:	bf38      	it	cc
 800920c:	2304      	movcc	r3, #4
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	9103      	str	r1, [sp, #12]
 8009214:	428b      	cmp	r3, r1
 8009216:	d80c      	bhi.n	8009232 <__multiply+0x9e>
 8009218:	2e00      	cmp	r6, #0
 800921a:	dd03      	ble.n	8009224 <__multiply+0x90>
 800921c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009220:	2b00      	cmp	r3, #0
 8009222:	d05b      	beq.n	80092dc <__multiply+0x148>
 8009224:	6106      	str	r6, [r0, #16]
 8009226:	b005      	add	sp, #20
 8009228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922c:	f843 2b04 	str.w	r2, [r3], #4
 8009230:	e7d8      	b.n	80091e4 <__multiply+0x50>
 8009232:	f8b1 a000 	ldrh.w	sl, [r1]
 8009236:	f1ba 0f00 	cmp.w	sl, #0
 800923a:	d024      	beq.n	8009286 <__multiply+0xf2>
 800923c:	f104 0e14 	add.w	lr, r4, #20
 8009240:	46a9      	mov	r9, r5
 8009242:	f04f 0c00 	mov.w	ip, #0
 8009246:	f85e 7b04 	ldr.w	r7, [lr], #4
 800924a:	f8d9 3000 	ldr.w	r3, [r9]
 800924e:	fa1f fb87 	uxth.w	fp, r7
 8009252:	b29b      	uxth	r3, r3
 8009254:	fb0a 330b 	mla	r3, sl, fp, r3
 8009258:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800925c:	f8d9 7000 	ldr.w	r7, [r9]
 8009260:	4463      	add	r3, ip
 8009262:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009266:	fb0a c70b 	mla	r7, sl, fp, ip
 800926a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800926e:	b29b      	uxth	r3, r3
 8009270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009274:	4572      	cmp	r2, lr
 8009276:	f849 3b04 	str.w	r3, [r9], #4
 800927a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800927e:	d8e2      	bhi.n	8009246 <__multiply+0xb2>
 8009280:	9b01      	ldr	r3, [sp, #4]
 8009282:	f845 c003 	str.w	ip, [r5, r3]
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800928c:	3104      	adds	r1, #4
 800928e:	f1b9 0f00 	cmp.w	r9, #0
 8009292:	d021      	beq.n	80092d8 <__multiply+0x144>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	f104 0c14 	add.w	ip, r4, #20
 800929a:	46ae      	mov	lr, r5
 800929c:	f04f 0a00 	mov.w	sl, #0
 80092a0:	f8bc b000 	ldrh.w	fp, [ip]
 80092a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80092a8:	fb09 770b 	mla	r7, r9, fp, r7
 80092ac:	4457      	add	r7, sl
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092b4:	f84e 3b04 	str.w	r3, [lr], #4
 80092b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092c0:	f8be 3000 	ldrh.w	r3, [lr]
 80092c4:	fb09 330a 	mla	r3, r9, sl, r3
 80092c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80092cc:	4562      	cmp	r2, ip
 80092ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092d2:	d8e5      	bhi.n	80092a0 <__multiply+0x10c>
 80092d4:	9f01      	ldr	r7, [sp, #4]
 80092d6:	51eb      	str	r3, [r5, r7]
 80092d8:	3504      	adds	r5, #4
 80092da:	e799      	b.n	8009210 <__multiply+0x7c>
 80092dc:	3e01      	subs	r6, #1
 80092de:	e79b      	b.n	8009218 <__multiply+0x84>
 80092e0:	0800a48d 	.word	0x0800a48d
 80092e4:	0800a4fe 	.word	0x0800a4fe

080092e8 <__pow5mult>:
 80092e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ec:	4615      	mov	r5, r2
 80092ee:	f012 0203 	ands.w	r2, r2, #3
 80092f2:	4607      	mov	r7, r0
 80092f4:	460e      	mov	r6, r1
 80092f6:	d007      	beq.n	8009308 <__pow5mult+0x20>
 80092f8:	4c25      	ldr	r4, [pc, #148]	@ (8009390 <__pow5mult+0xa8>)
 80092fa:	3a01      	subs	r2, #1
 80092fc:	2300      	movs	r3, #0
 80092fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009302:	f7ff fe55 	bl	8008fb0 <__multadd>
 8009306:	4606      	mov	r6, r0
 8009308:	10ad      	asrs	r5, r5, #2
 800930a:	d03d      	beq.n	8009388 <__pow5mult+0xa0>
 800930c:	69fc      	ldr	r4, [r7, #28]
 800930e:	b97c      	cbnz	r4, 8009330 <__pow5mult+0x48>
 8009310:	2010      	movs	r0, #16
 8009312:	f7ff fd23 	bl	8008d5c <malloc>
 8009316:	4602      	mov	r2, r0
 8009318:	61f8      	str	r0, [r7, #28]
 800931a:	b928      	cbnz	r0, 8009328 <__pow5mult+0x40>
 800931c:	4b1d      	ldr	r3, [pc, #116]	@ (8009394 <__pow5mult+0xac>)
 800931e:	481e      	ldr	r0, [pc, #120]	@ (8009398 <__pow5mult+0xb0>)
 8009320:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009324:	f7ff f978 	bl	8008618 <__assert_func>
 8009328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800932c:	6004      	str	r4, [r0, #0]
 800932e:	60c4      	str	r4, [r0, #12]
 8009330:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009338:	b94c      	cbnz	r4, 800934e <__pow5mult+0x66>
 800933a:	f240 2171 	movw	r1, #625	@ 0x271
 800933e:	4638      	mov	r0, r7
 8009340:	f7ff ff12 	bl	8009168 <__i2b>
 8009344:	2300      	movs	r3, #0
 8009346:	f8c8 0008 	str.w	r0, [r8, #8]
 800934a:	4604      	mov	r4, r0
 800934c:	6003      	str	r3, [r0, #0]
 800934e:	f04f 0900 	mov.w	r9, #0
 8009352:	07eb      	lsls	r3, r5, #31
 8009354:	d50a      	bpl.n	800936c <__pow5mult+0x84>
 8009356:	4631      	mov	r1, r6
 8009358:	4622      	mov	r2, r4
 800935a:	4638      	mov	r0, r7
 800935c:	f7ff ff1a 	bl	8009194 <__multiply>
 8009360:	4631      	mov	r1, r6
 8009362:	4680      	mov	r8, r0
 8009364:	4638      	mov	r0, r7
 8009366:	f7ff fe01 	bl	8008f6c <_Bfree>
 800936a:	4646      	mov	r6, r8
 800936c:	106d      	asrs	r5, r5, #1
 800936e:	d00b      	beq.n	8009388 <__pow5mult+0xa0>
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	b938      	cbnz	r0, 8009384 <__pow5mult+0x9c>
 8009374:	4622      	mov	r2, r4
 8009376:	4621      	mov	r1, r4
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff ff0b 	bl	8009194 <__multiply>
 800937e:	6020      	str	r0, [r4, #0]
 8009380:	f8c0 9000 	str.w	r9, [r0]
 8009384:	4604      	mov	r4, r0
 8009386:	e7e4      	b.n	8009352 <__pow5mult+0x6a>
 8009388:	4630      	mov	r0, r6
 800938a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800938e:	bf00      	nop
 8009390:	0800a558 	.word	0x0800a558
 8009394:	0800a3d8 	.word	0x0800a3d8
 8009398:	0800a4fe 	.word	0x0800a4fe

0800939c <__lshift>:
 800939c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a0:	460c      	mov	r4, r1
 80093a2:	6849      	ldr	r1, [r1, #4]
 80093a4:	6923      	ldr	r3, [r4, #16]
 80093a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093aa:	68a3      	ldr	r3, [r4, #8]
 80093ac:	4607      	mov	r7, r0
 80093ae:	4691      	mov	r9, r2
 80093b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093b4:	f108 0601 	add.w	r6, r8, #1
 80093b8:	42b3      	cmp	r3, r6
 80093ba:	db0b      	blt.n	80093d4 <__lshift+0x38>
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff fd95 	bl	8008eec <_Balloc>
 80093c2:	4605      	mov	r5, r0
 80093c4:	b948      	cbnz	r0, 80093da <__lshift+0x3e>
 80093c6:	4602      	mov	r2, r0
 80093c8:	4b28      	ldr	r3, [pc, #160]	@ (800946c <__lshift+0xd0>)
 80093ca:	4829      	ldr	r0, [pc, #164]	@ (8009470 <__lshift+0xd4>)
 80093cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093d0:	f7ff f922 	bl	8008618 <__assert_func>
 80093d4:	3101      	adds	r1, #1
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	e7ee      	b.n	80093b8 <__lshift+0x1c>
 80093da:	2300      	movs	r3, #0
 80093dc:	f100 0114 	add.w	r1, r0, #20
 80093e0:	f100 0210 	add.w	r2, r0, #16
 80093e4:	4618      	mov	r0, r3
 80093e6:	4553      	cmp	r3, sl
 80093e8:	db33      	blt.n	8009452 <__lshift+0xb6>
 80093ea:	6920      	ldr	r0, [r4, #16]
 80093ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093f0:	f104 0314 	add.w	r3, r4, #20
 80093f4:	f019 091f 	ands.w	r9, r9, #31
 80093f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009400:	d02b      	beq.n	800945a <__lshift+0xbe>
 8009402:	f1c9 0e20 	rsb	lr, r9, #32
 8009406:	468a      	mov	sl, r1
 8009408:	2200      	movs	r2, #0
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	fa00 f009 	lsl.w	r0, r0, r9
 8009410:	4310      	orrs	r0, r2
 8009412:	f84a 0b04 	str.w	r0, [sl], #4
 8009416:	f853 2b04 	ldr.w	r2, [r3], #4
 800941a:	459c      	cmp	ip, r3
 800941c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009420:	d8f3      	bhi.n	800940a <__lshift+0x6e>
 8009422:	ebac 0304 	sub.w	r3, ip, r4
 8009426:	3b15      	subs	r3, #21
 8009428:	f023 0303 	bic.w	r3, r3, #3
 800942c:	3304      	adds	r3, #4
 800942e:	f104 0015 	add.w	r0, r4, #21
 8009432:	4584      	cmp	ip, r0
 8009434:	bf38      	it	cc
 8009436:	2304      	movcc	r3, #4
 8009438:	50ca      	str	r2, [r1, r3]
 800943a:	b10a      	cbz	r2, 8009440 <__lshift+0xa4>
 800943c:	f108 0602 	add.w	r6, r8, #2
 8009440:	3e01      	subs	r6, #1
 8009442:	4638      	mov	r0, r7
 8009444:	612e      	str	r6, [r5, #16]
 8009446:	4621      	mov	r1, r4
 8009448:	f7ff fd90 	bl	8008f6c <_Bfree>
 800944c:	4628      	mov	r0, r5
 800944e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009452:	f842 0f04 	str.w	r0, [r2, #4]!
 8009456:	3301      	adds	r3, #1
 8009458:	e7c5      	b.n	80093e6 <__lshift+0x4a>
 800945a:	3904      	subs	r1, #4
 800945c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009460:	f841 2f04 	str.w	r2, [r1, #4]!
 8009464:	459c      	cmp	ip, r3
 8009466:	d8f9      	bhi.n	800945c <__lshift+0xc0>
 8009468:	e7ea      	b.n	8009440 <__lshift+0xa4>
 800946a:	bf00      	nop
 800946c:	0800a48d 	.word	0x0800a48d
 8009470:	0800a4fe 	.word	0x0800a4fe

08009474 <__mcmp>:
 8009474:	690a      	ldr	r2, [r1, #16]
 8009476:	4603      	mov	r3, r0
 8009478:	6900      	ldr	r0, [r0, #16]
 800947a:	1a80      	subs	r0, r0, r2
 800947c:	b530      	push	{r4, r5, lr}
 800947e:	d10e      	bne.n	800949e <__mcmp+0x2a>
 8009480:	3314      	adds	r3, #20
 8009482:	3114      	adds	r1, #20
 8009484:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009488:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800948c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009494:	4295      	cmp	r5, r2
 8009496:	d003      	beq.n	80094a0 <__mcmp+0x2c>
 8009498:	d205      	bcs.n	80094a6 <__mcmp+0x32>
 800949a:	f04f 30ff 	mov.w	r0, #4294967295
 800949e:	bd30      	pop	{r4, r5, pc}
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	d3f3      	bcc.n	800948c <__mcmp+0x18>
 80094a4:	e7fb      	b.n	800949e <__mcmp+0x2a>
 80094a6:	2001      	movs	r0, #1
 80094a8:	e7f9      	b.n	800949e <__mcmp+0x2a>
	...

080094ac <__mdiff>:
 80094ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	4689      	mov	r9, r1
 80094b2:	4606      	mov	r6, r0
 80094b4:	4611      	mov	r1, r2
 80094b6:	4648      	mov	r0, r9
 80094b8:	4614      	mov	r4, r2
 80094ba:	f7ff ffdb 	bl	8009474 <__mcmp>
 80094be:	1e05      	subs	r5, r0, #0
 80094c0:	d112      	bne.n	80094e8 <__mdiff+0x3c>
 80094c2:	4629      	mov	r1, r5
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7ff fd11 	bl	8008eec <_Balloc>
 80094ca:	4602      	mov	r2, r0
 80094cc:	b928      	cbnz	r0, 80094da <__mdiff+0x2e>
 80094ce:	4b3f      	ldr	r3, [pc, #252]	@ (80095cc <__mdiff+0x120>)
 80094d0:	f240 2137 	movw	r1, #567	@ 0x237
 80094d4:	483e      	ldr	r0, [pc, #248]	@ (80095d0 <__mdiff+0x124>)
 80094d6:	f7ff f89f 	bl	8008618 <__assert_func>
 80094da:	2301      	movs	r3, #1
 80094dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094e0:	4610      	mov	r0, r2
 80094e2:	b003      	add	sp, #12
 80094e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e8:	bfbc      	itt	lt
 80094ea:	464b      	movlt	r3, r9
 80094ec:	46a1      	movlt	r9, r4
 80094ee:	4630      	mov	r0, r6
 80094f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094f4:	bfba      	itte	lt
 80094f6:	461c      	movlt	r4, r3
 80094f8:	2501      	movlt	r5, #1
 80094fa:	2500      	movge	r5, #0
 80094fc:	f7ff fcf6 	bl	8008eec <_Balloc>
 8009500:	4602      	mov	r2, r0
 8009502:	b918      	cbnz	r0, 800950c <__mdiff+0x60>
 8009504:	4b31      	ldr	r3, [pc, #196]	@ (80095cc <__mdiff+0x120>)
 8009506:	f240 2145 	movw	r1, #581	@ 0x245
 800950a:	e7e3      	b.n	80094d4 <__mdiff+0x28>
 800950c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009510:	6926      	ldr	r6, [r4, #16]
 8009512:	60c5      	str	r5, [r0, #12]
 8009514:	f109 0310 	add.w	r3, r9, #16
 8009518:	f109 0514 	add.w	r5, r9, #20
 800951c:	f104 0e14 	add.w	lr, r4, #20
 8009520:	f100 0b14 	add.w	fp, r0, #20
 8009524:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009528:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	46d9      	mov	r9, fp
 8009530:	f04f 0c00 	mov.w	ip, #0
 8009534:	9b01      	ldr	r3, [sp, #4]
 8009536:	f85e 0b04 	ldr.w	r0, [lr], #4
 800953a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	fa1f f38a 	uxth.w	r3, sl
 8009544:	4619      	mov	r1, r3
 8009546:	b283      	uxth	r3, r0
 8009548:	1acb      	subs	r3, r1, r3
 800954a:	0c00      	lsrs	r0, r0, #16
 800954c:	4463      	add	r3, ip
 800954e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009552:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009556:	b29b      	uxth	r3, r3
 8009558:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800955c:	4576      	cmp	r6, lr
 800955e:	f849 3b04 	str.w	r3, [r9], #4
 8009562:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009566:	d8e5      	bhi.n	8009534 <__mdiff+0x88>
 8009568:	1b33      	subs	r3, r6, r4
 800956a:	3b15      	subs	r3, #21
 800956c:	f023 0303 	bic.w	r3, r3, #3
 8009570:	3415      	adds	r4, #21
 8009572:	3304      	adds	r3, #4
 8009574:	42a6      	cmp	r6, r4
 8009576:	bf38      	it	cc
 8009578:	2304      	movcc	r3, #4
 800957a:	441d      	add	r5, r3
 800957c:	445b      	add	r3, fp
 800957e:	461e      	mov	r6, r3
 8009580:	462c      	mov	r4, r5
 8009582:	4544      	cmp	r4, r8
 8009584:	d30e      	bcc.n	80095a4 <__mdiff+0xf8>
 8009586:	f108 0103 	add.w	r1, r8, #3
 800958a:	1b49      	subs	r1, r1, r5
 800958c:	f021 0103 	bic.w	r1, r1, #3
 8009590:	3d03      	subs	r5, #3
 8009592:	45a8      	cmp	r8, r5
 8009594:	bf38      	it	cc
 8009596:	2100      	movcc	r1, #0
 8009598:	440b      	add	r3, r1
 800959a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800959e:	b191      	cbz	r1, 80095c6 <__mdiff+0x11a>
 80095a0:	6117      	str	r7, [r2, #16]
 80095a2:	e79d      	b.n	80094e0 <__mdiff+0x34>
 80095a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80095a8:	46e6      	mov	lr, ip
 80095aa:	0c08      	lsrs	r0, r1, #16
 80095ac:	fa1c fc81 	uxtah	ip, ip, r1
 80095b0:	4471      	add	r1, lr
 80095b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095b6:	b289      	uxth	r1, r1
 80095b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095bc:	f846 1b04 	str.w	r1, [r6], #4
 80095c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095c4:	e7dd      	b.n	8009582 <__mdiff+0xd6>
 80095c6:	3f01      	subs	r7, #1
 80095c8:	e7e7      	b.n	800959a <__mdiff+0xee>
 80095ca:	bf00      	nop
 80095cc:	0800a48d 	.word	0x0800a48d
 80095d0:	0800a4fe 	.word	0x0800a4fe

080095d4 <__ulp>:
 80095d4:	b082      	sub	sp, #8
 80095d6:	ed8d 0b00 	vstr	d0, [sp]
 80095da:	9a01      	ldr	r2, [sp, #4]
 80095dc:	4b0f      	ldr	r3, [pc, #60]	@ (800961c <__ulp+0x48>)
 80095de:	4013      	ands	r3, r2
 80095e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dc08      	bgt.n	80095fa <__ulp+0x26>
 80095e8:	425b      	negs	r3, r3
 80095ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80095ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095f2:	da04      	bge.n	80095fe <__ulp+0x2a>
 80095f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80095f8:	4113      	asrs	r3, r2
 80095fa:	2200      	movs	r2, #0
 80095fc:	e008      	b.n	8009610 <__ulp+0x3c>
 80095fe:	f1a2 0314 	sub.w	r3, r2, #20
 8009602:	2b1e      	cmp	r3, #30
 8009604:	bfda      	itte	le
 8009606:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800960a:	40da      	lsrle	r2, r3
 800960c:	2201      	movgt	r2, #1
 800960e:	2300      	movs	r3, #0
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	ec41 0b10 	vmov	d0, r0, r1
 8009618:	b002      	add	sp, #8
 800961a:	4770      	bx	lr
 800961c:	7ff00000 	.word	0x7ff00000

08009620 <__b2d>:
 8009620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009624:	6906      	ldr	r6, [r0, #16]
 8009626:	f100 0814 	add.w	r8, r0, #20
 800962a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800962e:	1f37      	subs	r7, r6, #4
 8009630:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009634:	4610      	mov	r0, r2
 8009636:	f7ff fd4b 	bl	80090d0 <__hi0bits>
 800963a:	f1c0 0320 	rsb	r3, r0, #32
 800963e:	280a      	cmp	r0, #10
 8009640:	600b      	str	r3, [r1, #0]
 8009642:	491b      	ldr	r1, [pc, #108]	@ (80096b0 <__b2d+0x90>)
 8009644:	dc15      	bgt.n	8009672 <__b2d+0x52>
 8009646:	f1c0 0c0b 	rsb	ip, r0, #11
 800964a:	fa22 f30c 	lsr.w	r3, r2, ip
 800964e:	45b8      	cmp	r8, r7
 8009650:	ea43 0501 	orr.w	r5, r3, r1
 8009654:	bf34      	ite	cc
 8009656:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800965a:	2300      	movcs	r3, #0
 800965c:	3015      	adds	r0, #21
 800965e:	fa02 f000 	lsl.w	r0, r2, r0
 8009662:	fa23 f30c 	lsr.w	r3, r3, ip
 8009666:	4303      	orrs	r3, r0
 8009668:	461c      	mov	r4, r3
 800966a:	ec45 4b10 	vmov	d0, r4, r5
 800966e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009672:	45b8      	cmp	r8, r7
 8009674:	bf3a      	itte	cc
 8009676:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800967a:	f1a6 0708 	subcc.w	r7, r6, #8
 800967e:	2300      	movcs	r3, #0
 8009680:	380b      	subs	r0, #11
 8009682:	d012      	beq.n	80096aa <__b2d+0x8a>
 8009684:	f1c0 0120 	rsb	r1, r0, #32
 8009688:	fa23 f401 	lsr.w	r4, r3, r1
 800968c:	4082      	lsls	r2, r0
 800968e:	4322      	orrs	r2, r4
 8009690:	4547      	cmp	r7, r8
 8009692:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009696:	bf8c      	ite	hi
 8009698:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800969c:	2200      	movls	r2, #0
 800969e:	4083      	lsls	r3, r0
 80096a0:	40ca      	lsrs	r2, r1
 80096a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80096a6:	4313      	orrs	r3, r2
 80096a8:	e7de      	b.n	8009668 <__b2d+0x48>
 80096aa:	ea42 0501 	orr.w	r5, r2, r1
 80096ae:	e7db      	b.n	8009668 <__b2d+0x48>
 80096b0:	3ff00000 	.word	0x3ff00000

080096b4 <__d2b>:
 80096b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096b8:	460f      	mov	r7, r1
 80096ba:	2101      	movs	r1, #1
 80096bc:	ec59 8b10 	vmov	r8, r9, d0
 80096c0:	4616      	mov	r6, r2
 80096c2:	f7ff fc13 	bl	8008eec <_Balloc>
 80096c6:	4604      	mov	r4, r0
 80096c8:	b930      	cbnz	r0, 80096d8 <__d2b+0x24>
 80096ca:	4602      	mov	r2, r0
 80096cc:	4b23      	ldr	r3, [pc, #140]	@ (800975c <__d2b+0xa8>)
 80096ce:	4824      	ldr	r0, [pc, #144]	@ (8009760 <__d2b+0xac>)
 80096d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80096d4:	f7fe ffa0 	bl	8008618 <__assert_func>
 80096d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096e0:	b10d      	cbz	r5, 80096e6 <__d2b+0x32>
 80096e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	f1b8 0300 	subs.w	r3, r8, #0
 80096ec:	d023      	beq.n	8009736 <__d2b+0x82>
 80096ee:	4668      	mov	r0, sp
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	f7ff fd0c 	bl	800910e <__lo0bits>
 80096f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096fa:	b1d0      	cbz	r0, 8009732 <__d2b+0x7e>
 80096fc:	f1c0 0320 	rsb	r3, r0, #32
 8009700:	fa02 f303 	lsl.w	r3, r2, r3
 8009704:	430b      	orrs	r3, r1
 8009706:	40c2      	lsrs	r2, r0
 8009708:	6163      	str	r3, [r4, #20]
 800970a:	9201      	str	r2, [sp, #4]
 800970c:	9b01      	ldr	r3, [sp, #4]
 800970e:	61a3      	str	r3, [r4, #24]
 8009710:	2b00      	cmp	r3, #0
 8009712:	bf0c      	ite	eq
 8009714:	2201      	moveq	r2, #1
 8009716:	2202      	movne	r2, #2
 8009718:	6122      	str	r2, [r4, #16]
 800971a:	b1a5      	cbz	r5, 8009746 <__d2b+0x92>
 800971c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009720:	4405      	add	r5, r0
 8009722:	603d      	str	r5, [r7, #0]
 8009724:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009728:	6030      	str	r0, [r6, #0]
 800972a:	4620      	mov	r0, r4
 800972c:	b003      	add	sp, #12
 800972e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009732:	6161      	str	r1, [r4, #20]
 8009734:	e7ea      	b.n	800970c <__d2b+0x58>
 8009736:	a801      	add	r0, sp, #4
 8009738:	f7ff fce9 	bl	800910e <__lo0bits>
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	6163      	str	r3, [r4, #20]
 8009740:	3020      	adds	r0, #32
 8009742:	2201      	movs	r2, #1
 8009744:	e7e8      	b.n	8009718 <__d2b+0x64>
 8009746:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800974a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800974e:	6038      	str	r0, [r7, #0]
 8009750:	6918      	ldr	r0, [r3, #16]
 8009752:	f7ff fcbd 	bl	80090d0 <__hi0bits>
 8009756:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800975a:	e7e5      	b.n	8009728 <__d2b+0x74>
 800975c:	0800a48d 	.word	0x0800a48d
 8009760:	0800a4fe 	.word	0x0800a4fe

08009764 <__ratio>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	b085      	sub	sp, #20
 800976a:	e9cd 1000 	strd	r1, r0, [sp]
 800976e:	a902      	add	r1, sp, #8
 8009770:	f7ff ff56 	bl	8009620 <__b2d>
 8009774:	9800      	ldr	r0, [sp, #0]
 8009776:	a903      	add	r1, sp, #12
 8009778:	ec55 4b10 	vmov	r4, r5, d0
 800977c:	f7ff ff50 	bl	8009620 <__b2d>
 8009780:	9b01      	ldr	r3, [sp, #4]
 8009782:	6919      	ldr	r1, [r3, #16]
 8009784:	9b00      	ldr	r3, [sp, #0]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	1ac9      	subs	r1, r1, r3
 800978a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800978e:	1a9b      	subs	r3, r3, r2
 8009790:	ec5b ab10 	vmov	sl, fp, d0
 8009794:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009798:	2b00      	cmp	r3, #0
 800979a:	bfce      	itee	gt
 800979c:	462a      	movgt	r2, r5
 800979e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097a2:	465a      	movle	r2, fp
 80097a4:	462f      	mov	r7, r5
 80097a6:	46d9      	mov	r9, fp
 80097a8:	bfcc      	ite	gt
 80097aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80097ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80097b2:	464b      	mov	r3, r9
 80097b4:	4652      	mov	r2, sl
 80097b6:	4620      	mov	r0, r4
 80097b8:	4639      	mov	r1, r7
 80097ba:	f7f7 f87f 	bl	80008bc <__aeabi_ddiv>
 80097be:	ec41 0b10 	vmov	d0, r0, r1
 80097c2:	b005      	add	sp, #20
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097c8 <__copybits>:
 80097c8:	3901      	subs	r1, #1
 80097ca:	b570      	push	{r4, r5, r6, lr}
 80097cc:	1149      	asrs	r1, r1, #5
 80097ce:	6914      	ldr	r4, [r2, #16]
 80097d0:	3101      	adds	r1, #1
 80097d2:	f102 0314 	add.w	r3, r2, #20
 80097d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097de:	1f05      	subs	r5, r0, #4
 80097e0:	42a3      	cmp	r3, r4
 80097e2:	d30c      	bcc.n	80097fe <__copybits+0x36>
 80097e4:	1aa3      	subs	r3, r4, r2
 80097e6:	3b11      	subs	r3, #17
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	3211      	adds	r2, #17
 80097ee:	42a2      	cmp	r2, r4
 80097f0:	bf88      	it	hi
 80097f2:	2300      	movhi	r3, #0
 80097f4:	4418      	add	r0, r3
 80097f6:	2300      	movs	r3, #0
 80097f8:	4288      	cmp	r0, r1
 80097fa:	d305      	bcc.n	8009808 <__copybits+0x40>
 80097fc:	bd70      	pop	{r4, r5, r6, pc}
 80097fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8009802:	f845 6f04 	str.w	r6, [r5, #4]!
 8009806:	e7eb      	b.n	80097e0 <__copybits+0x18>
 8009808:	f840 3b04 	str.w	r3, [r0], #4
 800980c:	e7f4      	b.n	80097f8 <__copybits+0x30>

0800980e <__any_on>:
 800980e:	f100 0214 	add.w	r2, r0, #20
 8009812:	6900      	ldr	r0, [r0, #16]
 8009814:	114b      	asrs	r3, r1, #5
 8009816:	4298      	cmp	r0, r3
 8009818:	b510      	push	{r4, lr}
 800981a:	db11      	blt.n	8009840 <__any_on+0x32>
 800981c:	dd0a      	ble.n	8009834 <__any_on+0x26>
 800981e:	f011 011f 	ands.w	r1, r1, #31
 8009822:	d007      	beq.n	8009834 <__any_on+0x26>
 8009824:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009828:	fa24 f001 	lsr.w	r0, r4, r1
 800982c:	fa00 f101 	lsl.w	r1, r0, r1
 8009830:	428c      	cmp	r4, r1
 8009832:	d10b      	bne.n	800984c <__any_on+0x3e>
 8009834:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009838:	4293      	cmp	r3, r2
 800983a:	d803      	bhi.n	8009844 <__any_on+0x36>
 800983c:	2000      	movs	r0, #0
 800983e:	bd10      	pop	{r4, pc}
 8009840:	4603      	mov	r3, r0
 8009842:	e7f7      	b.n	8009834 <__any_on+0x26>
 8009844:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009848:	2900      	cmp	r1, #0
 800984a:	d0f5      	beq.n	8009838 <__any_on+0x2a>
 800984c:	2001      	movs	r0, #1
 800984e:	e7f6      	b.n	800983e <__any_on+0x30>

08009850 <__ascii_wctomb>:
 8009850:	4603      	mov	r3, r0
 8009852:	4608      	mov	r0, r1
 8009854:	b141      	cbz	r1, 8009868 <__ascii_wctomb+0x18>
 8009856:	2aff      	cmp	r2, #255	@ 0xff
 8009858:	d904      	bls.n	8009864 <__ascii_wctomb+0x14>
 800985a:	228a      	movs	r2, #138	@ 0x8a
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	f04f 30ff 	mov.w	r0, #4294967295
 8009862:	4770      	bx	lr
 8009864:	700a      	strb	r2, [r1, #0]
 8009866:	2001      	movs	r0, #1
 8009868:	4770      	bx	lr
	...

0800986c <__sflush_r>:
 800986c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009874:	0716      	lsls	r6, r2, #28
 8009876:	4605      	mov	r5, r0
 8009878:	460c      	mov	r4, r1
 800987a:	d454      	bmi.n	8009926 <__sflush_r+0xba>
 800987c:	684b      	ldr	r3, [r1, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	dc02      	bgt.n	8009888 <__sflush_r+0x1c>
 8009882:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	dd48      	ble.n	800991a <__sflush_r+0xae>
 8009888:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800988a:	2e00      	cmp	r6, #0
 800988c:	d045      	beq.n	800991a <__sflush_r+0xae>
 800988e:	2300      	movs	r3, #0
 8009890:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009894:	682f      	ldr	r7, [r5, #0]
 8009896:	6a21      	ldr	r1, [r4, #32]
 8009898:	602b      	str	r3, [r5, #0]
 800989a:	d030      	beq.n	80098fe <__sflush_r+0x92>
 800989c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	0759      	lsls	r1, r3, #29
 80098a2:	d505      	bpl.n	80098b0 <__sflush_r+0x44>
 80098a4:	6863      	ldr	r3, [r4, #4]
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098aa:	b10b      	cbz	r3, 80098b0 <__sflush_r+0x44>
 80098ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098ae:	1ad2      	subs	r2, r2, r3
 80098b0:	2300      	movs	r3, #0
 80098b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098b4:	6a21      	ldr	r1, [r4, #32]
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b0      	blx	r6
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	d106      	bne.n	80098ce <__sflush_r+0x62>
 80098c0:	6829      	ldr	r1, [r5, #0]
 80098c2:	291d      	cmp	r1, #29
 80098c4:	d82b      	bhi.n	800991e <__sflush_r+0xb2>
 80098c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009970 <__sflush_r+0x104>)
 80098c8:	410a      	asrs	r2, r1
 80098ca:	07d6      	lsls	r6, r2, #31
 80098cc:	d427      	bmi.n	800991e <__sflush_r+0xb2>
 80098ce:	2200      	movs	r2, #0
 80098d0:	6062      	str	r2, [r4, #4]
 80098d2:	04d9      	lsls	r1, r3, #19
 80098d4:	6922      	ldr	r2, [r4, #16]
 80098d6:	6022      	str	r2, [r4, #0]
 80098d8:	d504      	bpl.n	80098e4 <__sflush_r+0x78>
 80098da:	1c42      	adds	r2, r0, #1
 80098dc:	d101      	bne.n	80098e2 <__sflush_r+0x76>
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	b903      	cbnz	r3, 80098e4 <__sflush_r+0x78>
 80098e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80098e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098e6:	602f      	str	r7, [r5, #0]
 80098e8:	b1b9      	cbz	r1, 800991a <__sflush_r+0xae>
 80098ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098ee:	4299      	cmp	r1, r3
 80098f0:	d002      	beq.n	80098f8 <__sflush_r+0x8c>
 80098f2:	4628      	mov	r0, r5
 80098f4:	f7fe feae 	bl	8008654 <_free_r>
 80098f8:	2300      	movs	r3, #0
 80098fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80098fc:	e00d      	b.n	800991a <__sflush_r+0xae>
 80098fe:	2301      	movs	r3, #1
 8009900:	4628      	mov	r0, r5
 8009902:	47b0      	blx	r6
 8009904:	4602      	mov	r2, r0
 8009906:	1c50      	adds	r0, r2, #1
 8009908:	d1c9      	bne.n	800989e <__sflush_r+0x32>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0c6      	beq.n	800989e <__sflush_r+0x32>
 8009910:	2b1d      	cmp	r3, #29
 8009912:	d001      	beq.n	8009918 <__sflush_r+0xac>
 8009914:	2b16      	cmp	r3, #22
 8009916:	d11e      	bne.n	8009956 <__sflush_r+0xea>
 8009918:	602f      	str	r7, [r5, #0]
 800991a:	2000      	movs	r0, #0
 800991c:	e022      	b.n	8009964 <__sflush_r+0xf8>
 800991e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009922:	b21b      	sxth	r3, r3
 8009924:	e01b      	b.n	800995e <__sflush_r+0xf2>
 8009926:	690f      	ldr	r7, [r1, #16]
 8009928:	2f00      	cmp	r7, #0
 800992a:	d0f6      	beq.n	800991a <__sflush_r+0xae>
 800992c:	0793      	lsls	r3, r2, #30
 800992e:	680e      	ldr	r6, [r1, #0]
 8009930:	bf08      	it	eq
 8009932:	694b      	ldreq	r3, [r1, #20]
 8009934:	600f      	str	r7, [r1, #0]
 8009936:	bf18      	it	ne
 8009938:	2300      	movne	r3, #0
 800993a:	eba6 0807 	sub.w	r8, r6, r7
 800993e:	608b      	str	r3, [r1, #8]
 8009940:	f1b8 0f00 	cmp.w	r8, #0
 8009944:	dde9      	ble.n	800991a <__sflush_r+0xae>
 8009946:	6a21      	ldr	r1, [r4, #32]
 8009948:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800994a:	4643      	mov	r3, r8
 800994c:	463a      	mov	r2, r7
 800994e:	4628      	mov	r0, r5
 8009950:	47b0      	blx	r6
 8009952:	2800      	cmp	r0, #0
 8009954:	dc08      	bgt.n	8009968 <__sflush_r+0xfc>
 8009956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	f04f 30ff 	mov.w	r0, #4294967295
 8009964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009968:	4407      	add	r7, r0
 800996a:	eba8 0800 	sub.w	r8, r8, r0
 800996e:	e7e7      	b.n	8009940 <__sflush_r+0xd4>
 8009970:	dfbffffe 	.word	0xdfbffffe

08009974 <_fflush_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	690b      	ldr	r3, [r1, #16]
 8009978:	4605      	mov	r5, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b913      	cbnz	r3, 8009984 <_fflush_r+0x10>
 800997e:	2500      	movs	r5, #0
 8009980:	4628      	mov	r0, r5
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	b118      	cbz	r0, 800998e <_fflush_r+0x1a>
 8009986:	6a03      	ldr	r3, [r0, #32]
 8009988:	b90b      	cbnz	r3, 800998e <_fflush_r+0x1a>
 800998a:	f7fe fcc9 	bl	8008320 <__sinit>
 800998e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0f3      	beq.n	800997e <_fflush_r+0xa>
 8009996:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009998:	07d0      	lsls	r0, r2, #31
 800999a:	d404      	bmi.n	80099a6 <_fflush_r+0x32>
 800999c:	0599      	lsls	r1, r3, #22
 800999e:	d402      	bmi.n	80099a6 <_fflush_r+0x32>
 80099a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099a2:	f7fe fe1e 	bl	80085e2 <__retarget_lock_acquire_recursive>
 80099a6:	4628      	mov	r0, r5
 80099a8:	4621      	mov	r1, r4
 80099aa:	f7ff ff5f 	bl	800986c <__sflush_r>
 80099ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099b0:	07da      	lsls	r2, r3, #31
 80099b2:	4605      	mov	r5, r0
 80099b4:	d4e4      	bmi.n	8009980 <_fflush_r+0xc>
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	059b      	lsls	r3, r3, #22
 80099ba:	d4e1      	bmi.n	8009980 <_fflush_r+0xc>
 80099bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099be:	f7fe fe11 	bl	80085e4 <__retarget_lock_release_recursive>
 80099c2:	e7dd      	b.n	8009980 <_fflush_r+0xc>

080099c4 <fiprintf>:
 80099c4:	b40e      	push	{r1, r2, r3}
 80099c6:	b503      	push	{r0, r1, lr}
 80099c8:	4601      	mov	r1, r0
 80099ca:	ab03      	add	r3, sp, #12
 80099cc:	4805      	ldr	r0, [pc, #20]	@ (80099e4 <fiprintf+0x20>)
 80099ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d2:	6800      	ldr	r0, [r0, #0]
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	f000 f85b 	bl	8009a90 <_vfiprintf_r>
 80099da:	b002      	add	sp, #8
 80099dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e0:	b003      	add	sp, #12
 80099e2:	4770      	bx	lr
 80099e4:	20000188 	.word	0x20000188

080099e8 <_sbrk_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d06      	ldr	r5, [pc, #24]	@ (8009a04 <_sbrk_r+0x1c>)
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	f7f8 fcd6 	bl	80023a4 <_sbrk>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_sbrk_r+0x1a>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_sbrk_r+0x1a>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	2000067c 	.word	0x2000067c

08009a08 <abort>:
 8009a08:	b508      	push	{r3, lr}
 8009a0a:	2006      	movs	r0, #6
 8009a0c:	f000 fba2 	bl	800a154 <raise>
 8009a10:	2001      	movs	r0, #1
 8009a12:	f7f8 fc4f 	bl	80022b4 <_exit>

08009a16 <_calloc_r>:
 8009a16:	b570      	push	{r4, r5, r6, lr}
 8009a18:	fba1 5402 	umull	r5, r4, r1, r2
 8009a1c:	b93c      	cbnz	r4, 8009a2e <_calloc_r+0x18>
 8009a1e:	4629      	mov	r1, r5
 8009a20:	f7ff f9c6 	bl	8008db0 <_malloc_r>
 8009a24:	4606      	mov	r6, r0
 8009a26:	b928      	cbnz	r0, 8009a34 <_calloc_r+0x1e>
 8009a28:	2600      	movs	r6, #0
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	220c      	movs	r2, #12
 8009a30:	6002      	str	r2, [r0, #0]
 8009a32:	e7f9      	b.n	8009a28 <_calloc_r+0x12>
 8009a34:	462a      	mov	r2, r5
 8009a36:	4621      	mov	r1, r4
 8009a38:	f7fe fceb 	bl	8008412 <memset>
 8009a3c:	e7f5      	b.n	8009a2a <_calloc_r+0x14>

08009a3e <__sfputc_r>:
 8009a3e:	6893      	ldr	r3, [r2, #8]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	b410      	push	{r4}
 8009a46:	6093      	str	r3, [r2, #8]
 8009a48:	da08      	bge.n	8009a5c <__sfputc_r+0x1e>
 8009a4a:	6994      	ldr	r4, [r2, #24]
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	db01      	blt.n	8009a54 <__sfputc_r+0x16>
 8009a50:	290a      	cmp	r1, #10
 8009a52:	d103      	bne.n	8009a5c <__sfputc_r+0x1e>
 8009a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a58:	f000 bac0 	b.w	8009fdc <__swbuf_r>
 8009a5c:	6813      	ldr	r3, [r2, #0]
 8009a5e:	1c58      	adds	r0, r3, #1
 8009a60:	6010      	str	r0, [r2, #0]
 8009a62:	7019      	strb	r1, [r3, #0]
 8009a64:	4608      	mov	r0, r1
 8009a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <__sfputs_r>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	4606      	mov	r6, r0
 8009a70:	460f      	mov	r7, r1
 8009a72:	4614      	mov	r4, r2
 8009a74:	18d5      	adds	r5, r2, r3
 8009a76:	42ac      	cmp	r4, r5
 8009a78:	d101      	bne.n	8009a7e <__sfputs_r+0x12>
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	e007      	b.n	8009a8e <__sfputs_r+0x22>
 8009a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a82:	463a      	mov	r2, r7
 8009a84:	4630      	mov	r0, r6
 8009a86:	f7ff ffda 	bl	8009a3e <__sfputc_r>
 8009a8a:	1c43      	adds	r3, r0, #1
 8009a8c:	d1f3      	bne.n	8009a76 <__sfputs_r+0xa>
 8009a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a90 <_vfiprintf_r>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	460d      	mov	r5, r1
 8009a96:	b09d      	sub	sp, #116	@ 0x74
 8009a98:	4614      	mov	r4, r2
 8009a9a:	4698      	mov	r8, r3
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	b118      	cbz	r0, 8009aa8 <_vfiprintf_r+0x18>
 8009aa0:	6a03      	ldr	r3, [r0, #32]
 8009aa2:	b90b      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x18>
 8009aa4:	f7fe fc3c 	bl	8008320 <__sinit>
 8009aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aaa:	07d9      	lsls	r1, r3, #31
 8009aac:	d405      	bmi.n	8009aba <_vfiprintf_r+0x2a>
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	059a      	lsls	r2, r3, #22
 8009ab2:	d402      	bmi.n	8009aba <_vfiprintf_r+0x2a>
 8009ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ab6:	f7fe fd94 	bl	80085e2 <__retarget_lock_acquire_recursive>
 8009aba:	89ab      	ldrh	r3, [r5, #12]
 8009abc:	071b      	lsls	r3, r3, #28
 8009abe:	d501      	bpl.n	8009ac4 <_vfiprintf_r+0x34>
 8009ac0:	692b      	ldr	r3, [r5, #16]
 8009ac2:	b99b      	cbnz	r3, 8009aec <_vfiprintf_r+0x5c>
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f000 fac6 	bl	800a058 <__swsetup_r>
 8009acc:	b170      	cbz	r0, 8009aec <_vfiprintf_r+0x5c>
 8009ace:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ad0:	07dc      	lsls	r4, r3, #31
 8009ad2:	d504      	bpl.n	8009ade <_vfiprintf_r+0x4e>
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	b01d      	add	sp, #116	@ 0x74
 8009ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ade:	89ab      	ldrh	r3, [r5, #12]
 8009ae0:	0598      	lsls	r0, r3, #22
 8009ae2:	d4f7      	bmi.n	8009ad4 <_vfiprintf_r+0x44>
 8009ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ae6:	f7fe fd7d 	bl	80085e4 <__retarget_lock_release_recursive>
 8009aea:	e7f3      	b.n	8009ad4 <_vfiprintf_r+0x44>
 8009aec:	2300      	movs	r3, #0
 8009aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8009af0:	2320      	movs	r3, #32
 8009af2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009afa:	2330      	movs	r3, #48	@ 0x30
 8009afc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009cac <_vfiprintf_r+0x21c>
 8009b00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b04:	f04f 0901 	mov.w	r9, #1
 8009b08:	4623      	mov	r3, r4
 8009b0a:	469a      	mov	sl, r3
 8009b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b10:	b10a      	cbz	r2, 8009b16 <_vfiprintf_r+0x86>
 8009b12:	2a25      	cmp	r2, #37	@ 0x25
 8009b14:	d1f9      	bne.n	8009b0a <_vfiprintf_r+0x7a>
 8009b16:	ebba 0b04 	subs.w	fp, sl, r4
 8009b1a:	d00b      	beq.n	8009b34 <_vfiprintf_r+0xa4>
 8009b1c:	465b      	mov	r3, fp
 8009b1e:	4622      	mov	r2, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff ffa2 	bl	8009a6c <__sfputs_r>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	f000 80a7 	beq.w	8009c7c <_vfiprintf_r+0x1ec>
 8009b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b30:	445a      	add	r2, fp
 8009b32:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b34:	f89a 3000 	ldrb.w	r3, [sl]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 809f 	beq.w	8009c7c <_vfiprintf_r+0x1ec>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f04f 32ff 	mov.w	r2, #4294967295
 8009b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b48:	f10a 0a01 	add.w	sl, sl, #1
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	9307      	str	r3, [sp, #28]
 8009b50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b54:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b56:	4654      	mov	r4, sl
 8009b58:	2205      	movs	r2, #5
 8009b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5e:	4853      	ldr	r0, [pc, #332]	@ (8009cac <_vfiprintf_r+0x21c>)
 8009b60:	f7f6 fb76 	bl	8000250 <memchr>
 8009b64:	9a04      	ldr	r2, [sp, #16]
 8009b66:	b9d8      	cbnz	r0, 8009ba0 <_vfiprintf_r+0x110>
 8009b68:	06d1      	lsls	r1, r2, #27
 8009b6a:	bf44      	itt	mi
 8009b6c:	2320      	movmi	r3, #32
 8009b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b72:	0713      	lsls	r3, r2, #28
 8009b74:	bf44      	itt	mi
 8009b76:	232b      	movmi	r3, #43	@ 0x2b
 8009b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b82:	d015      	beq.n	8009bb0 <_vfiprintf_r+0x120>
 8009b84:	9a07      	ldr	r2, [sp, #28]
 8009b86:	4654      	mov	r4, sl
 8009b88:	2000      	movs	r0, #0
 8009b8a:	f04f 0c0a 	mov.w	ip, #10
 8009b8e:	4621      	mov	r1, r4
 8009b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b94:	3b30      	subs	r3, #48	@ 0x30
 8009b96:	2b09      	cmp	r3, #9
 8009b98:	d94b      	bls.n	8009c32 <_vfiprintf_r+0x1a2>
 8009b9a:	b1b0      	cbz	r0, 8009bca <_vfiprintf_r+0x13a>
 8009b9c:	9207      	str	r2, [sp, #28]
 8009b9e:	e014      	b.n	8009bca <_vfiprintf_r+0x13a>
 8009ba0:	eba0 0308 	sub.w	r3, r0, r8
 8009ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	46a2      	mov	sl, r4
 8009bae:	e7d2      	b.n	8009b56 <_vfiprintf_r+0xc6>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	1d19      	adds	r1, r3, #4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	9103      	str	r1, [sp, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bfbb      	ittet	lt
 8009bbc:	425b      	neglt	r3, r3
 8009bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8009bc2:	9307      	strge	r3, [sp, #28]
 8009bc4:	9307      	strlt	r3, [sp, #28]
 8009bc6:	bfb8      	it	lt
 8009bc8:	9204      	strlt	r2, [sp, #16]
 8009bca:	7823      	ldrb	r3, [r4, #0]
 8009bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bce:	d10a      	bne.n	8009be6 <_vfiprintf_r+0x156>
 8009bd0:	7863      	ldrb	r3, [r4, #1]
 8009bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bd4:	d132      	bne.n	8009c3c <_vfiprintf_r+0x1ac>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	1d1a      	adds	r2, r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	9203      	str	r2, [sp, #12]
 8009bde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009be2:	3402      	adds	r4, #2
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cbc <_vfiprintf_r+0x22c>
 8009bea:	7821      	ldrb	r1, [r4, #0]
 8009bec:	2203      	movs	r2, #3
 8009bee:	4650      	mov	r0, sl
 8009bf0:	f7f6 fb2e 	bl	8000250 <memchr>
 8009bf4:	b138      	cbz	r0, 8009c06 <_vfiprintf_r+0x176>
 8009bf6:	9b04      	ldr	r3, [sp, #16]
 8009bf8:	eba0 000a 	sub.w	r0, r0, sl
 8009bfc:	2240      	movs	r2, #64	@ 0x40
 8009bfe:	4082      	lsls	r2, r0
 8009c00:	4313      	orrs	r3, r2
 8009c02:	3401      	adds	r4, #1
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4829      	ldr	r0, [pc, #164]	@ (8009cb0 <_vfiprintf_r+0x220>)
 8009c0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c10:	2206      	movs	r2, #6
 8009c12:	f7f6 fb1d 	bl	8000250 <memchr>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d03f      	beq.n	8009c9a <_vfiprintf_r+0x20a>
 8009c1a:	4b26      	ldr	r3, [pc, #152]	@ (8009cb4 <_vfiprintf_r+0x224>)
 8009c1c:	bb1b      	cbnz	r3, 8009c66 <_vfiprintf_r+0x1d6>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	3307      	adds	r3, #7
 8009c22:	f023 0307 	bic.w	r3, r3, #7
 8009c26:	3308      	adds	r3, #8
 8009c28:	9303      	str	r3, [sp, #12]
 8009c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2c:	443b      	add	r3, r7
 8009c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c30:	e76a      	b.n	8009b08 <_vfiprintf_r+0x78>
 8009c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c36:	460c      	mov	r4, r1
 8009c38:	2001      	movs	r0, #1
 8009c3a:	e7a8      	b.n	8009b8e <_vfiprintf_r+0xfe>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	3401      	adds	r4, #1
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	4619      	mov	r1, r3
 8009c44:	f04f 0c0a 	mov.w	ip, #10
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c4e:	3a30      	subs	r2, #48	@ 0x30
 8009c50:	2a09      	cmp	r2, #9
 8009c52:	d903      	bls.n	8009c5c <_vfiprintf_r+0x1cc>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0c6      	beq.n	8009be6 <_vfiprintf_r+0x156>
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	e7c4      	b.n	8009be6 <_vfiprintf_r+0x156>
 8009c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c60:	4604      	mov	r4, r0
 8009c62:	2301      	movs	r3, #1
 8009c64:	e7f0      	b.n	8009c48 <_vfiprintf_r+0x1b8>
 8009c66:	ab03      	add	r3, sp, #12
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4b12      	ldr	r3, [pc, #72]	@ (8009cb8 <_vfiprintf_r+0x228>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	4630      	mov	r0, r6
 8009c72:	f3af 8000 	nop.w
 8009c76:	4607      	mov	r7, r0
 8009c78:	1c78      	adds	r0, r7, #1
 8009c7a:	d1d6      	bne.n	8009c2a <_vfiprintf_r+0x19a>
 8009c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_vfiprintf_r+0x1fe>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_vfiprintf_r+0x1fe>
 8009c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c8a:	f7fe fcab 	bl	80085e4 <__retarget_lock_release_recursive>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	065b      	lsls	r3, r3, #25
 8009c92:	f53f af1f 	bmi.w	8009ad4 <_vfiprintf_r+0x44>
 8009c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c98:	e71e      	b.n	8009ad8 <_vfiprintf_r+0x48>
 8009c9a:	ab03      	add	r3, sp, #12
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	462a      	mov	r2, r5
 8009ca0:	4b05      	ldr	r3, [pc, #20]	@ (8009cb8 <_vfiprintf_r+0x228>)
 8009ca2:	a904      	add	r1, sp, #16
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f000 f879 	bl	8009d9c <_printf_i>
 8009caa:	e7e4      	b.n	8009c76 <_vfiprintf_r+0x1e6>
 8009cac:	0800a759 	.word	0x0800a759
 8009cb0:	0800a763 	.word	0x0800a763
 8009cb4:	00000000 	.word	0x00000000
 8009cb8:	08009a6d 	.word	0x08009a6d
 8009cbc:	0800a75f 	.word	0x0800a75f

08009cc0 <_printf_common>:
 8009cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	4698      	mov	r8, r3
 8009cc8:	688a      	ldr	r2, [r1, #8]
 8009cca:	690b      	ldr	r3, [r1, #16]
 8009ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	bfb8      	it	lt
 8009cd4:	4613      	movlt	r3, r2
 8009cd6:	6033      	str	r3, [r6, #0]
 8009cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009cdc:	4607      	mov	r7, r0
 8009cde:	460c      	mov	r4, r1
 8009ce0:	b10a      	cbz	r2, 8009ce6 <_printf_common+0x26>
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	6033      	str	r3, [r6, #0]
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	0699      	lsls	r1, r3, #26
 8009cea:	bf42      	ittt	mi
 8009cec:	6833      	ldrmi	r3, [r6, #0]
 8009cee:	3302      	addmi	r3, #2
 8009cf0:	6033      	strmi	r3, [r6, #0]
 8009cf2:	6825      	ldr	r5, [r4, #0]
 8009cf4:	f015 0506 	ands.w	r5, r5, #6
 8009cf8:	d106      	bne.n	8009d08 <_printf_common+0x48>
 8009cfa:	f104 0a19 	add.w	sl, r4, #25
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	6832      	ldr	r2, [r6, #0]
 8009d02:	1a9b      	subs	r3, r3, r2
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	dc26      	bgt.n	8009d56 <_printf_common+0x96>
 8009d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d0c:	6822      	ldr	r2, [r4, #0]
 8009d0e:	3b00      	subs	r3, #0
 8009d10:	bf18      	it	ne
 8009d12:	2301      	movne	r3, #1
 8009d14:	0692      	lsls	r2, r2, #26
 8009d16:	d42b      	bmi.n	8009d70 <_printf_common+0xb0>
 8009d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	4638      	mov	r0, r7
 8009d20:	47c8      	blx	r9
 8009d22:	3001      	adds	r0, #1
 8009d24:	d01e      	beq.n	8009d64 <_printf_common+0xa4>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	6922      	ldr	r2, [r4, #16]
 8009d2a:	f003 0306 	and.w	r3, r3, #6
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	bf02      	ittt	eq
 8009d32:	68e5      	ldreq	r5, [r4, #12]
 8009d34:	6833      	ldreq	r3, [r6, #0]
 8009d36:	1aed      	subeq	r5, r5, r3
 8009d38:	68a3      	ldr	r3, [r4, #8]
 8009d3a:	bf0c      	ite	eq
 8009d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d40:	2500      	movne	r5, #0
 8009d42:	4293      	cmp	r3, r2
 8009d44:	bfc4      	itt	gt
 8009d46:	1a9b      	subgt	r3, r3, r2
 8009d48:	18ed      	addgt	r5, r5, r3
 8009d4a:	2600      	movs	r6, #0
 8009d4c:	341a      	adds	r4, #26
 8009d4e:	42b5      	cmp	r5, r6
 8009d50:	d11a      	bne.n	8009d88 <_printf_common+0xc8>
 8009d52:	2000      	movs	r0, #0
 8009d54:	e008      	b.n	8009d68 <_printf_common+0xa8>
 8009d56:	2301      	movs	r3, #1
 8009d58:	4652      	mov	r2, sl
 8009d5a:	4641      	mov	r1, r8
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	47c8      	blx	r9
 8009d60:	3001      	adds	r0, #1
 8009d62:	d103      	bne.n	8009d6c <_printf_common+0xac>
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295
 8009d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	e7c6      	b.n	8009cfe <_printf_common+0x3e>
 8009d70:	18e1      	adds	r1, r4, r3
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	2030      	movs	r0, #48	@ 0x30
 8009d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d7a:	4422      	add	r2, r4
 8009d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d84:	3302      	adds	r3, #2
 8009d86:	e7c7      	b.n	8009d18 <_printf_common+0x58>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	4638      	mov	r0, r7
 8009d90:	47c8      	blx	r9
 8009d92:	3001      	adds	r0, #1
 8009d94:	d0e6      	beq.n	8009d64 <_printf_common+0xa4>
 8009d96:	3601      	adds	r6, #1
 8009d98:	e7d9      	b.n	8009d4e <_printf_common+0x8e>
	...

08009d9c <_printf_i>:
 8009d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009da0:	7e0f      	ldrb	r7, [r1, #24]
 8009da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009da4:	2f78      	cmp	r7, #120	@ 0x78
 8009da6:	4691      	mov	r9, r2
 8009da8:	4680      	mov	r8, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	469a      	mov	sl, r3
 8009dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009db2:	d807      	bhi.n	8009dc4 <_printf_i+0x28>
 8009db4:	2f62      	cmp	r7, #98	@ 0x62
 8009db6:	d80a      	bhi.n	8009dce <_printf_i+0x32>
 8009db8:	2f00      	cmp	r7, #0
 8009dba:	f000 80d2 	beq.w	8009f62 <_printf_i+0x1c6>
 8009dbe:	2f58      	cmp	r7, #88	@ 0x58
 8009dc0:	f000 80b9 	beq.w	8009f36 <_printf_i+0x19a>
 8009dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009dcc:	e03a      	b.n	8009e44 <_printf_i+0xa8>
 8009dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009dd2:	2b15      	cmp	r3, #21
 8009dd4:	d8f6      	bhi.n	8009dc4 <_printf_i+0x28>
 8009dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8009ddc <_printf_i+0x40>)
 8009dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ddc:	08009e35 	.word	0x08009e35
 8009de0:	08009e49 	.word	0x08009e49
 8009de4:	08009dc5 	.word	0x08009dc5
 8009de8:	08009dc5 	.word	0x08009dc5
 8009dec:	08009dc5 	.word	0x08009dc5
 8009df0:	08009dc5 	.word	0x08009dc5
 8009df4:	08009e49 	.word	0x08009e49
 8009df8:	08009dc5 	.word	0x08009dc5
 8009dfc:	08009dc5 	.word	0x08009dc5
 8009e00:	08009dc5 	.word	0x08009dc5
 8009e04:	08009dc5 	.word	0x08009dc5
 8009e08:	08009f49 	.word	0x08009f49
 8009e0c:	08009e73 	.word	0x08009e73
 8009e10:	08009f03 	.word	0x08009f03
 8009e14:	08009dc5 	.word	0x08009dc5
 8009e18:	08009dc5 	.word	0x08009dc5
 8009e1c:	08009f6b 	.word	0x08009f6b
 8009e20:	08009dc5 	.word	0x08009dc5
 8009e24:	08009e73 	.word	0x08009e73
 8009e28:	08009dc5 	.word	0x08009dc5
 8009e2c:	08009dc5 	.word	0x08009dc5
 8009e30:	08009f0b 	.word	0x08009f0b
 8009e34:	6833      	ldr	r3, [r6, #0]
 8009e36:	1d1a      	adds	r2, r3, #4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6032      	str	r2, [r6, #0]
 8009e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e44:	2301      	movs	r3, #1
 8009e46:	e09d      	b.n	8009f84 <_printf_i+0x1e8>
 8009e48:	6833      	ldr	r3, [r6, #0]
 8009e4a:	6820      	ldr	r0, [r4, #0]
 8009e4c:	1d19      	adds	r1, r3, #4
 8009e4e:	6031      	str	r1, [r6, #0]
 8009e50:	0606      	lsls	r6, r0, #24
 8009e52:	d501      	bpl.n	8009e58 <_printf_i+0xbc>
 8009e54:	681d      	ldr	r5, [r3, #0]
 8009e56:	e003      	b.n	8009e60 <_printf_i+0xc4>
 8009e58:	0645      	lsls	r5, r0, #25
 8009e5a:	d5fb      	bpl.n	8009e54 <_printf_i+0xb8>
 8009e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e60:	2d00      	cmp	r5, #0
 8009e62:	da03      	bge.n	8009e6c <_printf_i+0xd0>
 8009e64:	232d      	movs	r3, #45	@ 0x2d
 8009e66:	426d      	negs	r5, r5
 8009e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e6c:	4859      	ldr	r0, [pc, #356]	@ (8009fd4 <_printf_i+0x238>)
 8009e6e:	230a      	movs	r3, #10
 8009e70:	e011      	b.n	8009e96 <_printf_i+0xfa>
 8009e72:	6821      	ldr	r1, [r4, #0]
 8009e74:	6833      	ldr	r3, [r6, #0]
 8009e76:	0608      	lsls	r0, r1, #24
 8009e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e7c:	d402      	bmi.n	8009e84 <_printf_i+0xe8>
 8009e7e:	0649      	lsls	r1, r1, #25
 8009e80:	bf48      	it	mi
 8009e82:	b2ad      	uxthmi	r5, r5
 8009e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e86:	4853      	ldr	r0, [pc, #332]	@ (8009fd4 <_printf_i+0x238>)
 8009e88:	6033      	str	r3, [r6, #0]
 8009e8a:	bf14      	ite	ne
 8009e8c:	230a      	movne	r3, #10
 8009e8e:	2308      	moveq	r3, #8
 8009e90:	2100      	movs	r1, #0
 8009e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e96:	6866      	ldr	r6, [r4, #4]
 8009e98:	60a6      	str	r6, [r4, #8]
 8009e9a:	2e00      	cmp	r6, #0
 8009e9c:	bfa2      	ittt	ge
 8009e9e:	6821      	ldrge	r1, [r4, #0]
 8009ea0:	f021 0104 	bicge.w	r1, r1, #4
 8009ea4:	6021      	strge	r1, [r4, #0]
 8009ea6:	b90d      	cbnz	r5, 8009eac <_printf_i+0x110>
 8009ea8:	2e00      	cmp	r6, #0
 8009eaa:	d04b      	beq.n	8009f44 <_printf_i+0x1a8>
 8009eac:	4616      	mov	r6, r2
 8009eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8009eb6:	5dc7      	ldrb	r7, [r0, r7]
 8009eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ebc:	462f      	mov	r7, r5
 8009ebe:	42bb      	cmp	r3, r7
 8009ec0:	460d      	mov	r5, r1
 8009ec2:	d9f4      	bls.n	8009eae <_printf_i+0x112>
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	d10b      	bne.n	8009ee0 <_printf_i+0x144>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	07df      	lsls	r7, r3, #31
 8009ecc:	d508      	bpl.n	8009ee0 <_printf_i+0x144>
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	6861      	ldr	r1, [r4, #4]
 8009ed2:	4299      	cmp	r1, r3
 8009ed4:	bfde      	ittt	le
 8009ed6:	2330      	movle	r3, #48	@ 0x30
 8009ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ee0:	1b92      	subs	r2, r2, r6
 8009ee2:	6122      	str	r2, [r4, #16]
 8009ee4:	f8cd a000 	str.w	sl, [sp]
 8009ee8:	464b      	mov	r3, r9
 8009eea:	aa03      	add	r2, sp, #12
 8009eec:	4621      	mov	r1, r4
 8009eee:	4640      	mov	r0, r8
 8009ef0:	f7ff fee6 	bl	8009cc0 <_printf_common>
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d14a      	bne.n	8009f8e <_printf_i+0x1f2>
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8009efc:	b004      	add	sp, #16
 8009efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	f043 0320 	orr.w	r3, r3, #32
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	4833      	ldr	r0, [pc, #204]	@ (8009fd8 <_printf_i+0x23c>)
 8009f0c:	2778      	movs	r7, #120	@ 0x78
 8009f0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	6831      	ldr	r1, [r6, #0]
 8009f16:	061f      	lsls	r7, r3, #24
 8009f18:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f1c:	d402      	bmi.n	8009f24 <_printf_i+0x188>
 8009f1e:	065f      	lsls	r7, r3, #25
 8009f20:	bf48      	it	mi
 8009f22:	b2ad      	uxthmi	r5, r5
 8009f24:	6031      	str	r1, [r6, #0]
 8009f26:	07d9      	lsls	r1, r3, #31
 8009f28:	bf44      	itt	mi
 8009f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f2e:	6023      	strmi	r3, [r4, #0]
 8009f30:	b11d      	cbz	r5, 8009f3a <_printf_i+0x19e>
 8009f32:	2310      	movs	r3, #16
 8009f34:	e7ac      	b.n	8009e90 <_printf_i+0xf4>
 8009f36:	4827      	ldr	r0, [pc, #156]	@ (8009fd4 <_printf_i+0x238>)
 8009f38:	e7e9      	b.n	8009f0e <_printf_i+0x172>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	f023 0320 	bic.w	r3, r3, #32
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	e7f6      	b.n	8009f32 <_printf_i+0x196>
 8009f44:	4616      	mov	r6, r2
 8009f46:	e7bd      	b.n	8009ec4 <_printf_i+0x128>
 8009f48:	6833      	ldr	r3, [r6, #0]
 8009f4a:	6825      	ldr	r5, [r4, #0]
 8009f4c:	6961      	ldr	r1, [r4, #20]
 8009f4e:	1d18      	adds	r0, r3, #4
 8009f50:	6030      	str	r0, [r6, #0]
 8009f52:	062e      	lsls	r6, r5, #24
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	d501      	bpl.n	8009f5c <_printf_i+0x1c0>
 8009f58:	6019      	str	r1, [r3, #0]
 8009f5a:	e002      	b.n	8009f62 <_printf_i+0x1c6>
 8009f5c:	0668      	lsls	r0, r5, #25
 8009f5e:	d5fb      	bpl.n	8009f58 <_printf_i+0x1bc>
 8009f60:	8019      	strh	r1, [r3, #0]
 8009f62:	2300      	movs	r3, #0
 8009f64:	6123      	str	r3, [r4, #16]
 8009f66:	4616      	mov	r6, r2
 8009f68:	e7bc      	b.n	8009ee4 <_printf_i+0x148>
 8009f6a:	6833      	ldr	r3, [r6, #0]
 8009f6c:	1d1a      	adds	r2, r3, #4
 8009f6e:	6032      	str	r2, [r6, #0]
 8009f70:	681e      	ldr	r6, [r3, #0]
 8009f72:	6862      	ldr	r2, [r4, #4]
 8009f74:	2100      	movs	r1, #0
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7f6 f96a 	bl	8000250 <memchr>
 8009f7c:	b108      	cbz	r0, 8009f82 <_printf_i+0x1e6>
 8009f7e:	1b80      	subs	r0, r0, r6
 8009f80:	6060      	str	r0, [r4, #4]
 8009f82:	6863      	ldr	r3, [r4, #4]
 8009f84:	6123      	str	r3, [r4, #16]
 8009f86:	2300      	movs	r3, #0
 8009f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f8c:	e7aa      	b.n	8009ee4 <_printf_i+0x148>
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	4632      	mov	r2, r6
 8009f92:	4649      	mov	r1, r9
 8009f94:	4640      	mov	r0, r8
 8009f96:	47d0      	blx	sl
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d0ad      	beq.n	8009ef8 <_printf_i+0x15c>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	079b      	lsls	r3, r3, #30
 8009fa0:	d413      	bmi.n	8009fca <_printf_i+0x22e>
 8009fa2:	68e0      	ldr	r0, [r4, #12]
 8009fa4:	9b03      	ldr	r3, [sp, #12]
 8009fa6:	4298      	cmp	r0, r3
 8009fa8:	bfb8      	it	lt
 8009faa:	4618      	movlt	r0, r3
 8009fac:	e7a6      	b.n	8009efc <_printf_i+0x160>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	4632      	mov	r2, r6
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	47d0      	blx	sl
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d09d      	beq.n	8009ef8 <_printf_i+0x15c>
 8009fbc:	3501      	adds	r5, #1
 8009fbe:	68e3      	ldr	r3, [r4, #12]
 8009fc0:	9903      	ldr	r1, [sp, #12]
 8009fc2:	1a5b      	subs	r3, r3, r1
 8009fc4:	42ab      	cmp	r3, r5
 8009fc6:	dcf2      	bgt.n	8009fae <_printf_i+0x212>
 8009fc8:	e7eb      	b.n	8009fa2 <_printf_i+0x206>
 8009fca:	2500      	movs	r5, #0
 8009fcc:	f104 0619 	add.w	r6, r4, #25
 8009fd0:	e7f5      	b.n	8009fbe <_printf_i+0x222>
 8009fd2:	bf00      	nop
 8009fd4:	0800a76a 	.word	0x0800a76a
 8009fd8:	0800a77b 	.word	0x0800a77b

08009fdc <__swbuf_r>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	460e      	mov	r6, r1
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	b118      	cbz	r0, 8009fee <__swbuf_r+0x12>
 8009fe6:	6a03      	ldr	r3, [r0, #32]
 8009fe8:	b90b      	cbnz	r3, 8009fee <__swbuf_r+0x12>
 8009fea:	f7fe f999 	bl	8008320 <__sinit>
 8009fee:	69a3      	ldr	r3, [r4, #24]
 8009ff0:	60a3      	str	r3, [r4, #8]
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	071a      	lsls	r2, r3, #28
 8009ff6:	d501      	bpl.n	8009ffc <__swbuf_r+0x20>
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	b943      	cbnz	r3, 800a00e <__swbuf_r+0x32>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 f82a 	bl	800a058 <__swsetup_r>
 800a004:	b118      	cbz	r0, 800a00e <__swbuf_r+0x32>
 800a006:	f04f 37ff 	mov.w	r7, #4294967295
 800a00a:	4638      	mov	r0, r7
 800a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	6922      	ldr	r2, [r4, #16]
 800a012:	1a98      	subs	r0, r3, r2
 800a014:	6963      	ldr	r3, [r4, #20]
 800a016:	b2f6      	uxtb	r6, r6
 800a018:	4283      	cmp	r3, r0
 800a01a:	4637      	mov	r7, r6
 800a01c:	dc05      	bgt.n	800a02a <__swbuf_r+0x4e>
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f7ff fca7 	bl	8009974 <_fflush_r>
 800a026:	2800      	cmp	r0, #0
 800a028:	d1ed      	bne.n	800a006 <__swbuf_r+0x2a>
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	60a3      	str	r3, [r4, #8]
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	6022      	str	r2, [r4, #0]
 800a036:	701e      	strb	r6, [r3, #0]
 800a038:	6962      	ldr	r2, [r4, #20]
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d004      	beq.n	800a04a <__swbuf_r+0x6e>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	07db      	lsls	r3, r3, #31
 800a044:	d5e1      	bpl.n	800a00a <__swbuf_r+0x2e>
 800a046:	2e0a      	cmp	r6, #10
 800a048:	d1df      	bne.n	800a00a <__swbuf_r+0x2e>
 800a04a:	4621      	mov	r1, r4
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7ff fc91 	bl	8009974 <_fflush_r>
 800a052:	2800      	cmp	r0, #0
 800a054:	d0d9      	beq.n	800a00a <__swbuf_r+0x2e>
 800a056:	e7d6      	b.n	800a006 <__swbuf_r+0x2a>

0800a058 <__swsetup_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4b29      	ldr	r3, [pc, #164]	@ (800a100 <__swsetup_r+0xa8>)
 800a05c:	4605      	mov	r5, r0
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	460c      	mov	r4, r1
 800a062:	b118      	cbz	r0, 800a06c <__swsetup_r+0x14>
 800a064:	6a03      	ldr	r3, [r0, #32]
 800a066:	b90b      	cbnz	r3, 800a06c <__swsetup_r+0x14>
 800a068:	f7fe f95a 	bl	8008320 <__sinit>
 800a06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a070:	0719      	lsls	r1, r3, #28
 800a072:	d422      	bmi.n	800a0ba <__swsetup_r+0x62>
 800a074:	06da      	lsls	r2, r3, #27
 800a076:	d407      	bmi.n	800a088 <__swsetup_r+0x30>
 800a078:	2209      	movs	r2, #9
 800a07a:	602a      	str	r2, [r5, #0]
 800a07c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	f04f 30ff 	mov.w	r0, #4294967295
 800a086:	e033      	b.n	800a0f0 <__swsetup_r+0x98>
 800a088:	0758      	lsls	r0, r3, #29
 800a08a:	d512      	bpl.n	800a0b2 <__swsetup_r+0x5a>
 800a08c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a08e:	b141      	cbz	r1, 800a0a2 <__swsetup_r+0x4a>
 800a090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a094:	4299      	cmp	r1, r3
 800a096:	d002      	beq.n	800a09e <__swsetup_r+0x46>
 800a098:	4628      	mov	r0, r5
 800a09a:	f7fe fadb 	bl	8008654 <_free_r>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6063      	str	r3, [r4, #4]
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	f043 0308 	orr.w	r3, r3, #8
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	b94b      	cbnz	r3, 800a0d2 <__swsetup_r+0x7a>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c8:	d003      	beq.n	800a0d2 <__swsetup_r+0x7a>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 f883 	bl	800a1d8 <__smakebuf_r>
 800a0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d6:	f013 0201 	ands.w	r2, r3, #1
 800a0da:	d00a      	beq.n	800a0f2 <__swsetup_r+0x9a>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	60a2      	str	r2, [r4, #8]
 800a0e0:	6962      	ldr	r2, [r4, #20]
 800a0e2:	4252      	negs	r2, r2
 800a0e4:	61a2      	str	r2, [r4, #24]
 800a0e6:	6922      	ldr	r2, [r4, #16]
 800a0e8:	b942      	cbnz	r2, 800a0fc <__swsetup_r+0xa4>
 800a0ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0ee:	d1c5      	bne.n	800a07c <__swsetup_r+0x24>
 800a0f0:	bd38      	pop	{r3, r4, r5, pc}
 800a0f2:	0799      	lsls	r1, r3, #30
 800a0f4:	bf58      	it	pl
 800a0f6:	6962      	ldrpl	r2, [r4, #20]
 800a0f8:	60a2      	str	r2, [r4, #8]
 800a0fa:	e7f4      	b.n	800a0e6 <__swsetup_r+0x8e>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e7f7      	b.n	800a0f0 <__swsetup_r+0x98>
 800a100:	20000188 	.word	0x20000188

0800a104 <_raise_r>:
 800a104:	291f      	cmp	r1, #31
 800a106:	b538      	push	{r3, r4, r5, lr}
 800a108:	4605      	mov	r5, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	d904      	bls.n	800a118 <_raise_r+0x14>
 800a10e:	2316      	movs	r3, #22
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	f04f 30ff 	mov.w	r0, #4294967295
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a11a:	b112      	cbz	r2, 800a122 <_raise_r+0x1e>
 800a11c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a120:	b94b      	cbnz	r3, 800a136 <_raise_r+0x32>
 800a122:	4628      	mov	r0, r5
 800a124:	f000 f830 	bl	800a188 <_getpid_r>
 800a128:	4622      	mov	r2, r4
 800a12a:	4601      	mov	r1, r0
 800a12c:	4628      	mov	r0, r5
 800a12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a132:	f000 b817 	b.w	800a164 <_kill_r>
 800a136:	2b01      	cmp	r3, #1
 800a138:	d00a      	beq.n	800a150 <_raise_r+0x4c>
 800a13a:	1c59      	adds	r1, r3, #1
 800a13c:	d103      	bne.n	800a146 <_raise_r+0x42>
 800a13e:	2316      	movs	r3, #22
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	2001      	movs	r0, #1
 800a144:	e7e7      	b.n	800a116 <_raise_r+0x12>
 800a146:	2100      	movs	r1, #0
 800a148:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a14c:	4620      	mov	r0, r4
 800a14e:	4798      	blx	r3
 800a150:	2000      	movs	r0, #0
 800a152:	e7e0      	b.n	800a116 <_raise_r+0x12>

0800a154 <raise>:
 800a154:	4b02      	ldr	r3, [pc, #8]	@ (800a160 <raise+0xc>)
 800a156:	4601      	mov	r1, r0
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	f7ff bfd3 	b.w	800a104 <_raise_r>
 800a15e:	bf00      	nop
 800a160:	20000188 	.word	0x20000188

0800a164 <_kill_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	@ (800a184 <_kill_r+0x20>)
 800a168:	2300      	movs	r3, #0
 800a16a:	4604      	mov	r4, r0
 800a16c:	4608      	mov	r0, r1
 800a16e:	4611      	mov	r1, r2
 800a170:	602b      	str	r3, [r5, #0]
 800a172:	f7f8 f88f 	bl	8002294 <_kill>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d102      	bne.n	800a180 <_kill_r+0x1c>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	b103      	cbz	r3, 800a180 <_kill_r+0x1c>
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	bd38      	pop	{r3, r4, r5, pc}
 800a182:	bf00      	nop
 800a184:	2000067c 	.word	0x2000067c

0800a188 <_getpid_r>:
 800a188:	f7f8 b87c 	b.w	8002284 <_getpid>

0800a18c <__swhatbuf_r>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	460c      	mov	r4, r1
 800a190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a194:	2900      	cmp	r1, #0
 800a196:	b096      	sub	sp, #88	@ 0x58
 800a198:	4615      	mov	r5, r2
 800a19a:	461e      	mov	r6, r3
 800a19c:	da0d      	bge.n	800a1ba <__swhatbuf_r+0x2e>
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1a4:	f04f 0100 	mov.w	r1, #0
 800a1a8:	bf14      	ite	ne
 800a1aa:	2340      	movne	r3, #64	@ 0x40
 800a1ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	6031      	str	r1, [r6, #0]
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	b016      	add	sp, #88	@ 0x58
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ba:	466a      	mov	r2, sp
 800a1bc:	f000 f848 	bl	800a250 <_fstat_r>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	dbec      	blt.n	800a19e <__swhatbuf_r+0x12>
 800a1c4:	9901      	ldr	r1, [sp, #4]
 800a1c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1ce:	4259      	negs	r1, r3
 800a1d0:	4159      	adcs	r1, r3
 800a1d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1d6:	e7eb      	b.n	800a1b0 <__swhatbuf_r+0x24>

0800a1d8 <__smakebuf_r>:
 800a1d8:	898b      	ldrh	r3, [r1, #12]
 800a1da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1dc:	079d      	lsls	r5, r3, #30
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	d507      	bpl.n	800a1f4 <__smakebuf_r+0x1c>
 800a1e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	6163      	str	r3, [r4, #20]
 800a1f0:	b003      	add	sp, #12
 800a1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f4:	ab01      	add	r3, sp, #4
 800a1f6:	466a      	mov	r2, sp
 800a1f8:	f7ff ffc8 	bl	800a18c <__swhatbuf_r>
 800a1fc:	9f00      	ldr	r7, [sp, #0]
 800a1fe:	4605      	mov	r5, r0
 800a200:	4639      	mov	r1, r7
 800a202:	4630      	mov	r0, r6
 800a204:	f7fe fdd4 	bl	8008db0 <_malloc_r>
 800a208:	b948      	cbnz	r0, 800a21e <__smakebuf_r+0x46>
 800a20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a20e:	059a      	lsls	r2, r3, #22
 800a210:	d4ee      	bmi.n	800a1f0 <__smakebuf_r+0x18>
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	f043 0302 	orr.w	r3, r3, #2
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	e7e2      	b.n	800a1e4 <__smakebuf_r+0xc>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	6020      	str	r0, [r4, #0]
 800a222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a22e:	b15b      	cbz	r3, 800a248 <__smakebuf_r+0x70>
 800a230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a234:	4630      	mov	r0, r6
 800a236:	f000 f81d 	bl	800a274 <_isatty_r>
 800a23a:	b128      	cbz	r0, 800a248 <__smakebuf_r+0x70>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	431d      	orrs	r5, r3
 800a24c:	81a5      	strh	r5, [r4, #12]
 800a24e:	e7cf      	b.n	800a1f0 <__smakebuf_r+0x18>

0800a250 <_fstat_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d07      	ldr	r5, [pc, #28]	@ (800a270 <_fstat_r+0x20>)
 800a254:	2300      	movs	r3, #0
 800a256:	4604      	mov	r4, r0
 800a258:	4608      	mov	r0, r1
 800a25a:	4611      	mov	r1, r2
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	f7f8 f879 	bl	8002354 <_fstat>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	d102      	bne.n	800a26c <_fstat_r+0x1c>
 800a266:	682b      	ldr	r3, [r5, #0]
 800a268:	b103      	cbz	r3, 800a26c <_fstat_r+0x1c>
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	bd38      	pop	{r3, r4, r5, pc}
 800a26e:	bf00      	nop
 800a270:	2000067c 	.word	0x2000067c

0800a274 <_isatty_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d06      	ldr	r5, [pc, #24]	@ (800a290 <_isatty_r+0x1c>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	f7f8 f878 	bl	8002374 <_isatty>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_isatty_r+0x1a>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_isatty_r+0x1a>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	2000067c 	.word	0x2000067c

0800a294 <_init>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	bf00      	nop
 800a298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29a:	bc08      	pop	{r3}
 800a29c:	469e      	mov	lr, r3
 800a29e:	4770      	bx	lr

0800a2a0 <_fini>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	bf00      	nop
 800a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a6:	bc08      	pop	{r3}
 800a2a8:	469e      	mov	lr, r3
 800a2aa:	4770      	bx	lr
